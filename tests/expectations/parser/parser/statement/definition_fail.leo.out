---
namespace: ParseStatement
expectation: Fail
outputs:
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x = expr;\n     | ^^^^^^^"
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x = ();\n     | ^^^^^^^"
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x = x+y;\n     | ^^^^^^^"
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x = (x,y);\n     | ^^^^^^^"
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x = x();\n     | ^^^^^^^"
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x = expr;\n     | ^^^^^^^^^"
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x = ();\n     | ^^^^^^^^^"
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x = x+y;\n     | ^^^^^^^^^"
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x = (x,y);\n     | ^^^^^^^^^"
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x = x();\n     | ^^^^^^^^^"
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x: u32 = expr;\n     | ^^^^^^^"
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x: u32 = ();\n     | ^^^^^^^"
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x: u32 = x+y;\n     | ^^^^^^^"
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x: u32 = (x,y);\n     | ^^^^^^^"
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | let mut x: u32 = x();\n     | ^^^^^^^"
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x: u32 = expr;\n     | ^^^^^^^^^"
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x: u32 = ();\n     | ^^^^^^^^^"
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x: u32 = x+y;\n     | ^^^^^^^^^"
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x: u32 = (x,y);\n     | ^^^^^^^^^"
  - "Error [EPAR0370015]: let mut = ... is deprecated. `let` keyword implies mutabality by default.\n    --> test:1:1\n     |\n   1 | const mut x: u32 = x();\n     | ^^^^^^^^^"
  - "Error [EPAR0370009]: unexpected string: expected 'ident', got ','\n    --> test:1:10\n     |\n   1 | let (x,y,,) = ();\n     |          ^"
  - "Error [EPAR0370009]: unexpected string: expected 'ident', got ','\n    --> test:1:6\n     |\n   1 | let (,x,y) = ();\n     |      ^"
  - "Error [EPAR0370009]: unexpected string: expected 'ident', got ','\n    --> test:1:8\n     |\n   1 | let (x,,y) = ();\n     |        ^"
  - "Error [EPAR0370009]: unexpected string: expected 'int', got ','\n    --> test:1:16\n     |\n   1 | let x: [u8; (2,,)] = [[0,0], [0,0]];\n     |                ^"
  - "Error [EPAR0370005]: expected 'i8', 'i16', 'i32', 'i64', 'i128', 'u8', 'u16', 'u32', 'u64', 'u128', 'field', 'group', 'address', 'bool', 'char' -- got 'const'\n    --> test:1:8\n     |\n   1 | let x: const = expr;\n     |        ^^^^^"
  - "Error [EPAR0370005]: expected 'i8', 'i16', 'i32', 'i64', 'i128', 'u8', 'u16', 'u32', 'u64', 'u128', 'field', 'group', 'address', 'bool', 'char' -- got 'let'\n    --> test:1:10\n     |\n   1 | const x: let = expr;\n     |          ^^^"
  - "Error [EPAR0370005]: expected 'i8', 'i16', 'i32', 'i64', 'i128', 'u8', 'u16', 'u32', 'u64', 'u128', 'field', 'group', 'address', 'bool', 'char' -- got 'mut'\n    --> test:1:8\n     |\n   1 | let x: mut = expr;\n     |        ^^^"
  - "Error [EPAR0370003]: unexpected EOF\n    --> test:1:1\n     |\n   1 | let\n     | ^^^"
  - "Error [EPAR0370003]: unexpected EOF\n    --> test:1:5\n     |\n   1 | let x\n     |     ^"
  - "Error [EPAR0370003]: unexpected EOF\n    --> test:1:6\n     |\n   1 | let x:\n     |      ^"
  - "Error [EPAR0370005]: expected ) -- got ']'\n    --> test:1:14\n     |\n   1 | let x = (a, y]);\n     |              ^"
