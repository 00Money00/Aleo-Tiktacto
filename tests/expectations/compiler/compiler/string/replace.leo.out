---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 68
      num_constraints: 51
      at: 45fa182371664010950da6ec3fa6360de34dda5cb814b3c8bd119a09e86b5c77
      bt: 4da3499799890924c2910625e052c6757e7cfd857ebbd18afd3d16b5bd0e9a73
      ct: 183c15a7bf0d7c109b082a55e696874797e7ce685096881ce803f6bfa453a875
    output:
      - input_file: inputs/string.in
        output:
          registers:
            out:
              type: bool
              value: "true"
      - input_file: inputs/weird.in
        output:
          registers:
            out:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Char
                    - - value: "13"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 17
                  path: compiler-test
                  content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {"
            - Variable:
                identifier: "{\"name\":\"s2\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":31,\\\"col_stop\\\":33,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Char
                    - - value: "4"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 31
                  col_stop: 33
                  path: compiler-test
                  content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {"
          output: Boolean
          block:
            statements:
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":7,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    s1[..4] = s2;\\\"}\"}"
                    accesses:
                      - ArrayRange:
                          - ~
                          - Value:
                              Implicit:
                                - "4"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 10
                                  col_stop: 11
                                  path: compiler-test
                                  content: "    s1[..4] = s2;"
                    span:
                      line_start: 4
                      line_stop: 4
                      col_start: 5
                      col_stop: 12
                      path: compiler-test
                      content: "    s1[..4] = s2;"
                  value:
                    Identifier: "{\"name\":\"s2\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":15,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    s1[..4] = s2;\\\"}\"}"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 17
                    path: compiler-test
                    content: "    s1[..4] = s2;"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":12,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return s1 != \\\\\\\"Hello, World!\\\\\\\";\\\"}\"}"
                      right:
                        Value:
                          String:
                            - - Scalar: 72
                              - Scalar: 101
                              - Scalar: 108
                              - Scalar: 108
                              - Scalar: 111
                              - Scalar: 44
                              - Scalar: 32
                              - Scalar: 87
                              - Scalar: 111
                              - Scalar: 114
                              - Scalar: 108
                              - Scalar: 100
                              - Scalar: 33
                            - line_start: 5
                              line_stop: 5
                              col_start: 18
                              col_stop: 33
                              path: compiler-test
                              content: "    return s1 != \"Hello, World!\";"
                      op: Ne
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 12
                        col_stop: 33
                        path: compiler-test
                        content: "    return s1 != \"Hello, World!\";"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 33
                    path: compiler-test
                    content: "    return s1 != \"Hello, World!\";"
            span:
              line_start: 3
              line_stop: 6
              col_start: 54
              col_stop: 2
              path: compiler-test
              content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 6
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {\n...\n}\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Char
                    - - value: "13"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 17
                  path: compiler-test
                  content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {"
            - Variable:
                identifier: "{\"name\":\"s2\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":31,\\\"col_stop\\\":33,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Char
                    - - value: "4"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 31
                  col_stop: 33
                  path: compiler-test
                  content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {"
          output: Boolean
          block:
            statements:
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":7,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    s1[..4] = s2;\\\"}\"}"
                    accesses:
                      - ArrayRange:
                          - ~
                          - Value:
                              Implicit:
                                - "4"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 10
                                  col_stop: 11
                                  path: compiler-test
                                  content: "    s1[..4] = s2;"
                    span:
                      line_start: 4
                      line_stop: 4
                      col_start: 5
                      col_stop: 12
                      path: compiler-test
                      content: "    s1[..4] = s2;"
                  value:
                    Identifier: "{\"name\":\"s2\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":15,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    s1[..4] = s2;\\\"}\"}"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 17
                    path: compiler-test
                    content: "    s1[..4] = s2;"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":12,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return s1 != \\\\\\\"Hello, World!\\\\\\\";\\\"}\"}"
                      right:
                        ArrayInline:
                          elements:
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 72
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 19
                                      col_stop: 20
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 101
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 20
                                      col_stop: 21
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 108
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 21
                                      col_stop: 22
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 108
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 22
                                      col_stop: 23
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 111
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 23
                                      col_stop: 24
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 44
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 24
                                      col_stop: 25
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 32
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 25
                                      col_stop: 26
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 87
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 26
                                      col_stop: 27
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 111
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 27
                                      col_stop: 28
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 114
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 28
                                      col_stop: 29
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 108
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 29
                                      col_stop: 30
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 100
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 30
                                      col_stop: 31
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 33
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 31
                                      col_stop: 32
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                          span:
                            line_start: 5
                            line_stop: 5
                            col_start: 18
                            col_stop: 33
                            path: compiler-test
                            content: "    return s1 != \"Hello, World!\";"
                      op: Ne
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 12
                        col_stop: 33
                        path: compiler-test
                        content: "    return s1 != \"Hello, World!\";"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 33
                    path: compiler-test
                    content: "    return s1 != \"Hello, World!\";"
            span:
              line_start: 3
              line_stop: 6
              col_start: 54
              col_stop: 2
              path: compiler-test
              content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 6
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {\n...\n}\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Char
                    - - value: "13"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 17
                  path: compiler-test
                  content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {"
            - Variable:
                identifier: "{\"name\":\"s2\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":31,\\\"col_stop\\\":33,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Char
                    - - value: "4"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 31
                  col_stop: 33
                  path: compiler-test
                  content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {"
          output: Boolean
          block:
            statements:
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":7,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    s1[..4] = s2;\\\"}\"}"
                    accesses:
                      - ArrayRange:
                          - ~
                          - Value:
                              Integer:
                                - U32
                                - "4"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 10
                                  col_stop: 11
                                  path: compiler-test
                                  content: "    s1[..4] = s2;"
                    span:
                      line_start: 4
                      line_stop: 4
                      col_start: 5
                      col_stop: 12
                      path: compiler-test
                      content: "    s1[..4] = s2;"
                  value:
                    Identifier: "{\"name\":\"s2\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":15,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    s1[..4] = s2;\\\"}\"}"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 17
                    path: compiler-test
                    content: "    s1[..4] = s2;"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":12,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return s1 != \\\\\\\"Hello, World!\\\\\\\";\\\"}\"}"
                      right:
                        ArrayInline:
                          elements:
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 72
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 19
                                      col_stop: 20
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 101
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 20
                                      col_stop: 21
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 108
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 21
                                      col_stop: 22
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 108
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 22
                                      col_stop: 23
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 111
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 23
                                      col_stop: 24
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 44
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 24
                                      col_stop: 25
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 32
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 25
                                      col_stop: 26
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 87
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 26
                                      col_stop: 27
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 111
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 27
                                      col_stop: 28
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 114
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 28
                                      col_stop: 29
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 108
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 29
                                      col_stop: 30
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 100
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 30
                                      col_stop: 31
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 33
                                    span:
                                      line_start: 5
                                      line_stop: 5
                                      col_start: 31
                                      col_stop: 32
                                      path: compiler-test
                                      content: "    return s1 != \"Hello, World!\";"
                          span:
                            line_start: 5
                            line_stop: 5
                            col_start: 18
                            col_stop: 33
                            path: compiler-test
                            content: "    return s1 != \"Hello, World!\";"
                      op: Ne
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 12
                        col_stop: 33
                        path: compiler-test
                        content: "    return s1 != \"Hello, World!\";"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 33
                    path: compiler-test
                    content: "    return s1 != \"Hello, World!\";"
            span:
              line_start: 3
              line_stop: 6
              col_start: 54
              col_stop: 2
              path: compiler-test
              content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 6
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {\n...\n}\n"
