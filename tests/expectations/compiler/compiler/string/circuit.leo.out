---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 141
      num_constraints: 115
      at: 145ada587c833434abb89c3349d19e06365fda3eb9b2a227046a78469e3ca313
      bt: f2945a3bc1beaee407bb4ec35303115a93a8c68886d97011cd65ec6d899664e8
      ct: 10b997b6341b3cf811cb7b0fdb891f91006d41c50e9f9566ff92f92816153dfc
    output:
      - input_file: inputs/string_out.in
        output:
          registers:
            out:
              type: "[char; 13]"
              value: "\"Hello, World!\""
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":7,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    s1: [char; 13];\\\"}\"}"
                - Array:
                    - Char
                    - - value: "13"
      global_consts: {}
      functions:
        "{\"name\":\"takes_string\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":10,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function takes_string(s: [char; 13]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"takes_string\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":10,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function takes_string(s: [char; 13]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"s\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":23,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function takes_string(s: [char; 13]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Char
                    - - value: "13"
                span:
                  line_start: 7
                  line_stop: 7
                  col_start: 23
                  col_stop: 24
                  path: compiler-test
                  content: "function takes_string(s: [char; 13]) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"s\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return s == \\\\\\\"Hello, World!\\\\\\\";\\\"}\"}"
                      right:
                        Value:
                          String:
                            - - Scalar: 72
                              - Scalar: 101
                              - Scalar: 108
                              - Scalar: 108
                              - Scalar: 111
                              - Scalar: 44
                              - Scalar: 32
                              - Scalar: 87
                              - Scalar: 111
                              - Scalar: 114
                              - Scalar: 108
                              - Scalar: 100
                              - Scalar: 33
                            - line_start: 8
                              line_stop: 8
                              col_start: 17
                              col_stop: 32
                              path: compiler-test
                              content: "    return s == \"Hello, World!\";"
                      op: Eq
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 12
                        col_stop: 32
                        path: compiler-test
                        content: "    return s == \"Hello, World!\";"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 32
                    path: compiler-test
                    content: "    return s == \"Hello, World!\";"
            span:
              line_start: 7
              line_stop: 9
              col_start: 46
              col_stop: 2
              path: compiler-test
              content: "function takes_string(s: [char; 13]) -> bool {\n...\n}"
          span:
            line_start: 7
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function takes_string(s: [char; 13]) -> bool {\n...\n}"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13]) -> [char; 13] {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13]) -> [char; 13] {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":15,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13]) -> [char; 13] {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Char
                    - - value: "13"
                span:
                  line_start: 11
                  line_stop: 11
                  col_start: 15
                  col_stop: 17
                  path: compiler-test
                  content: "function main(s1: [char; 13]) -> [char; 13] {"
          output:
            Array:
              - Char
              - - value: "13"
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"f\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let f = Foo { s1 };\\\"}\"}"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let f = Foo { s1 };"
                  type_: ~
                  value:
                    CircuitInit:
                      name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":13,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let f = Foo { s1 };\\\"}\"}"
                      members:
                        - identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":19,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let f = Foo { s1 };\\\"}\"}"
                          expression: ~
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 13
                        col_stop: 23
                        path: compiler-test
                        content: "    let f = Foo { s1 };"
                  span:
                    line_start: 12
                    line_stop: 12
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    let f = Foo { s1 };"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = takes_string(s1);\\\"}\"}"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let b = takes_string(s1);"
                  type_: ~
                  value:
                    Call:
                      function:
                        Identifier: "{\"name\":\"takes_string\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":13,\\\"col_stop\\\":25,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = takes_string(s1);\\\"}\"}"
                      arguments:
                        - Identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":26,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = takes_string(s1);\\\"}\"}"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 13
                        col_stop: 29
                        path: compiler-test
                        content: "    let b = takes_string(s1);"
                  span:
                    line_start: 13
                    line_stop: 13
                    col_start: 5
                    col_stop: 29
                    path: compiler-test
                    content: "    let b = takes_string(s1);"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"result\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":9,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let result = f.s1 == \\\\\\\"Hello, World!\\\\\\\" ? s1 : \\\\\\\"abcdefghjklmn\\\\\\\";\\\"}\"}"
                      span:
                        line_start: 15
                        line_stop: 15
                        col_start: 9
                        col_stop: 15
                        path: compiler-test
                        content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                  type_: ~
                  value:
                    Ternary:
                      condition:
                        Binary:
                          left:
                            CircuitMemberAccess:
                              circuit:
                                Identifier: "{\"name\":\"f\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":18,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let result = f.s1 == \\\\\\\"Hello, World!\\\\\\\" ? s1 : \\\\\\\"abcdefghjklmn\\\\\\\";\\\"}\"}"
                              name: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":20,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let result = f.s1 == \\\\\\\"Hello, World!\\\\\\\" ? s1 : \\\\\\\"abcdefghjklmn\\\\\\\";\\\"}\"}"
                              span:
                                line_start: 15
                                line_stop: 15
                                col_start: 18
                                col_stop: 22
                                path: compiler-test
                                content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                          right:
                            Value:
                              String:
                                - - Scalar: 72
                                  - Scalar: 101
                                  - Scalar: 108
                                  - Scalar: 108
                                  - Scalar: 111
                                  - Scalar: 44
                                  - Scalar: 32
                                  - Scalar: 87
                                  - Scalar: 111
                                  - Scalar: 114
                                  - Scalar: 108
                                  - Scalar: 100
                                  - Scalar: 33
                                - line_start: 15
                                  line_stop: 15
                                  col_start: 26
                                  col_stop: 41
                                  path: compiler-test
                                  content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                          op: Eq
                          span:
                            line_start: 15
                            line_stop: 15
                            col_start: 18
                            col_stop: 41
                            path: compiler-test
                            content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                      if_true:
                        Identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":44,\\\"col_stop\\\":46,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let result = f.s1 == \\\\\\\"Hello, World!\\\\\\\" ? s1 : \\\\\\\"abcdefghjklmn\\\\\\\";\\\"}\"}"
                      if_false:
                        Value:
                          String:
                            - - Scalar: 97
                              - Scalar: 98
                              - Scalar: 99
                              - Scalar: 100
                              - Scalar: 101
                              - Scalar: 102
                              - Scalar: 103
                              - Scalar: 104
                              - Scalar: 106
                              - Scalar: 107
                              - Scalar: 108
                              - Scalar: 109
                              - Scalar: 110
                            - line_start: 15
                              line_stop: 15
                              col_start: 49
                              col_stop: 64
                              path: compiler-test
                              content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                      span:
                        line_start: 15
                        line_stop: 15
                        col_start: 18
                        col_stop: 64
                        path: compiler-test
                        content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                  span:
                    line_start: 15
                    line_stop: 15
                    col_start: 5
                    col_stop: 64
                    path: compiler-test
                    content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
              - Return:
                  expression:
                    Identifier: "{\"name\":\"result\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":12,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return result;\\\"}\"}"
                  span:
                    line_start: 16
                    line_stop: 16
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return result;"
            span:
              line_start: 11
              line_stop: 17
              col_start: 45
              col_stop: 2
              path: compiler-test
              content: "function main(s1: [char; 13]) -> [char; 13] {\n...\n}"
          span:
            line_start: 11
            line_stop: 17
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(s1: [char; 13]) -> [char; 13] {\n...\n}\n\n\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":7,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    s1: [char; 13];\\\"}\"}"
                - Array:
                    - Char
                    - - value: "13"
      global_consts: {}
      functions:
        "{\"name\":\"takes_string\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":10,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function takes_string(s: [char; 13]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"takes_string\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":10,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function takes_string(s: [char; 13]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"s\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":23,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function takes_string(s: [char; 13]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Char
                    - - value: "13"
                span:
                  line_start: 7
                  line_stop: 7
                  col_start: 23
                  col_stop: 24
                  path: compiler-test
                  content: "function takes_string(s: [char; 13]) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"s\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return s == \\\\\\\"Hello, World!\\\\\\\";\\\"}\"}"
                      right:
                        ArrayInline:
                          elements:
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 72
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 18
                                      col_stop: 19
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 101
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 19
                                      col_stop: 20
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 108
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 20
                                      col_stop: 21
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 108
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 21
                                      col_stop: 22
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 111
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 22
                                      col_stop: 23
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 44
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 23
                                      col_stop: 24
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 32
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 24
                                      col_stop: 25
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 87
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 25
                                      col_stop: 26
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 111
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 26
                                      col_stop: 27
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 114
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 27
                                      col_stop: 28
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 108
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 28
                                      col_stop: 29
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 100
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 29
                                      col_stop: 30
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 33
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 30
                                      col_stop: 31
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                          span:
                            line_start: 8
                            line_stop: 8
                            col_start: 17
                            col_stop: 32
                            path: compiler-test
                            content: "    return s == \"Hello, World!\";"
                      op: Eq
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 12
                        col_stop: 32
                        path: compiler-test
                        content: "    return s == \"Hello, World!\";"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 32
                    path: compiler-test
                    content: "    return s == \"Hello, World!\";"
            span:
              line_start: 7
              line_stop: 9
              col_start: 46
              col_stop: 2
              path: compiler-test
              content: "function takes_string(s: [char; 13]) -> bool {\n...\n}"
          span:
            line_start: 7
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function takes_string(s: [char; 13]) -> bool {\n...\n}"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13]) -> [char; 13] {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13]) -> [char; 13] {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":15,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13]) -> [char; 13] {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Char
                    - - value: "13"
                span:
                  line_start: 11
                  line_stop: 11
                  col_start: 15
                  col_stop: 17
                  path: compiler-test
                  content: "function main(s1: [char; 13]) -> [char; 13] {"
          output:
            Array:
              - Char
              - - value: "13"
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"f\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let f = Foo { s1 };\\\"}\"}"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let f = Foo { s1 };"
                  type_: ~
                  value:
                    CircuitInit:
                      name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":13,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let f = Foo { s1 };\\\"}\"}"
                      members:
                        - identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":19,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let f = Foo { s1 };\\\"}\"}"
                          expression: ~
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 13
                        col_stop: 23
                        path: compiler-test
                        content: "    let f = Foo { s1 };"
                  span:
                    line_start: 12
                    line_stop: 12
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    let f = Foo { s1 };"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = takes_string(s1);\\\"}\"}"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let b = takes_string(s1);"
                  type_: ~
                  value:
                    Call:
                      function:
                        Identifier: "{\"name\":\"takes_string\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":13,\\\"col_stop\\\":25,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = takes_string(s1);\\\"}\"}"
                      arguments:
                        - Identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":26,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = takes_string(s1);\\\"}\"}"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 13
                        col_stop: 29
                        path: compiler-test
                        content: "    let b = takes_string(s1);"
                  span:
                    line_start: 13
                    line_stop: 13
                    col_start: 5
                    col_stop: 29
                    path: compiler-test
                    content: "    let b = takes_string(s1);"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"result\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":9,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let result = f.s1 == \\\\\\\"Hello, World!\\\\\\\" ? s1 : \\\\\\\"abcdefghjklmn\\\\\\\";\\\"}\"}"
                      span:
                        line_start: 15
                        line_stop: 15
                        col_start: 9
                        col_stop: 15
                        path: compiler-test
                        content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                  type_: ~
                  value:
                    Ternary:
                      condition:
                        Binary:
                          left:
                            CircuitMemberAccess:
                              circuit:
                                Identifier: "{\"name\":\"f\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":18,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let result = f.s1 == \\\\\\\"Hello, World!\\\\\\\" ? s1 : \\\\\\\"abcdefghjklmn\\\\\\\";\\\"}\"}"
                              name: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":20,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let result = f.s1 == \\\\\\\"Hello, World!\\\\\\\" ? s1 : \\\\\\\"abcdefghjklmn\\\\\\\";\\\"}\"}"
                              span:
                                line_start: 15
                                line_stop: 15
                                col_start: 18
                                col_stop: 22
                                path: compiler-test
                                content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                          right:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 72
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 27
                                          col_stop: 28
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 101
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 28
                                          col_stop: 29
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 108
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 29
                                          col_stop: 30
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 108
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 30
                                          col_stop: 31
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 111
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 31
                                          col_stop: 32
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 44
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 32
                                          col_stop: 33
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 32
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 33
                                          col_stop: 34
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 87
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 34
                                          col_stop: 35
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 111
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 35
                                          col_stop: 36
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 114
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 36
                                          col_stop: 37
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 108
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 37
                                          col_stop: 38
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 100
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 38
                                          col_stop: 39
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 33
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 39
                                          col_stop: 40
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                              span:
                                line_start: 15
                                line_stop: 15
                                col_start: 26
                                col_stop: 41
                                path: compiler-test
                                content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                          op: Eq
                          span:
                            line_start: 15
                            line_stop: 15
                            col_start: 18
                            col_stop: 41
                            path: compiler-test
                            content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                      if_true:
                        Identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":44,\\\"col_stop\\\":46,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let result = f.s1 == \\\\\\\"Hello, World!\\\\\\\" ? s1 : \\\\\\\"abcdefghjklmn\\\\\\\";\\\"}\"}"
                      if_false:
                        ArrayInline:
                          elements:
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 97
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 50
                                      col_stop: 51
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 98
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 51
                                      col_stop: 52
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 99
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 52
                                      col_stop: 53
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 100
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 53
                                      col_stop: 54
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 101
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 54
                                      col_stop: 55
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 102
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 55
                                      col_stop: 56
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 103
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 56
                                      col_stop: 57
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 104
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 57
                                      col_stop: 58
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 106
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 58
                                      col_stop: 59
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 107
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 59
                                      col_stop: 60
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 108
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 60
                                      col_stop: 61
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 109
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 61
                                      col_stop: 62
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 110
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 62
                                      col_stop: 63
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                          span:
                            line_start: 15
                            line_stop: 15
                            col_start: 49
                            col_stop: 64
                            path: compiler-test
                            content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                      span:
                        line_start: 15
                        line_stop: 15
                        col_start: 18
                        col_stop: 64
                        path: compiler-test
                        content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                  span:
                    line_start: 15
                    line_stop: 15
                    col_start: 5
                    col_stop: 64
                    path: compiler-test
                    content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
              - Return:
                  expression:
                    Identifier: "{\"name\":\"result\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":12,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return result;\\\"}\"}"
                  span:
                    line_start: 16
                    line_stop: 16
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return result;"
            span:
              line_start: 11
              line_stop: 17
              col_start: 45
              col_stop: 2
              path: compiler-test
              content: "function main(s1: [char; 13]) -> [char; 13] {\n...\n}"
          span:
            line_start: 11
            line_stop: 17
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(s1: [char; 13]) -> [char; 13] {\n...\n}\n\n\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":7,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    s1: [char; 13];\\\"}\"}"
                - Array:
                    - Char
                    - - value: "13"
      global_consts: {}
      functions:
        "{\"name\":\"takes_string\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":10,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function takes_string(s: [char; 13]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"takes_string\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":10,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function takes_string(s: [char; 13]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"s\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":23,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function takes_string(s: [char; 13]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Char
                    - - value: "13"
                span:
                  line_start: 7
                  line_stop: 7
                  col_start: 23
                  col_stop: 24
                  path: compiler-test
                  content: "function takes_string(s: [char; 13]) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"s\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return s == \\\\\\\"Hello, World!\\\\\\\";\\\"}\"}"
                      right:
                        ArrayInline:
                          elements:
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 72
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 18
                                      col_stop: 19
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 101
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 19
                                      col_stop: 20
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 108
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 20
                                      col_stop: 21
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 108
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 21
                                      col_stop: 22
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 111
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 22
                                      col_stop: 23
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 44
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 23
                                      col_stop: 24
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 32
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 24
                                      col_stop: 25
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 87
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 25
                                      col_stop: 26
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 111
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 26
                                      col_stop: 27
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 114
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 27
                                      col_stop: 28
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 108
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 28
                                      col_stop: 29
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 100
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 29
                                      col_stop: 30
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 33
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 30
                                      col_stop: 31
                                      path: compiler-test
                                      content: "    return s == \"Hello, World!\";"
                          span:
                            line_start: 8
                            line_stop: 8
                            col_start: 17
                            col_stop: 32
                            path: compiler-test
                            content: "    return s == \"Hello, World!\";"
                      op: Eq
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 12
                        col_stop: 32
                        path: compiler-test
                        content: "    return s == \"Hello, World!\";"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 32
                    path: compiler-test
                    content: "    return s == \"Hello, World!\";"
            span:
              line_start: 7
              line_stop: 9
              col_start: 46
              col_stop: 2
              path: compiler-test
              content: "function takes_string(s: [char; 13]) -> bool {\n...\n}"
          span:
            line_start: 7
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function takes_string(s: [char; 13]) -> bool {\n...\n}"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13]) -> [char; 13] {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13]) -> [char; 13] {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":15,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13]) -> [char; 13] {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Char
                    - - value: "13"
                span:
                  line_start: 11
                  line_stop: 11
                  col_start: 15
                  col_stop: 17
                  path: compiler-test
                  content: "function main(s1: [char; 13]) -> [char; 13] {"
          output:
            Array:
              - Char
              - - value: "13"
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"f\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let f = Foo { s1 };\\\"}\"}"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let f = Foo { s1 };"
                  type_:
                    Circuit: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
                  value:
                    CircuitInit:
                      name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":13,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let f = Foo { s1 };\\\"}\"}"
                      members:
                        - identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":19,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let f = Foo { s1 };\\\"}\"}"
                          expression: ~
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 13
                        col_stop: 23
                        path: compiler-test
                        content: "    let f = Foo { s1 };"
                  span:
                    line_start: 12
                    line_stop: 12
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    let f = Foo { s1 };"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = takes_string(s1);\\\"}\"}"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let b = takes_string(s1);"
                  type_: Boolean
                  value:
                    Call:
                      function:
                        Identifier: "{\"name\":\"takes_string\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":13,\\\"col_stop\\\":25,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = takes_string(s1);\\\"}\"}"
                      arguments:
                        - Identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":26,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = takes_string(s1);\\\"}\"}"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 13
                        col_stop: 29
                        path: compiler-test
                        content: "    let b = takes_string(s1);"
                  span:
                    line_start: 13
                    line_stop: 13
                    col_start: 5
                    col_stop: 29
                    path: compiler-test
                    content: "    let b = takes_string(s1);"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"result\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":9,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let result = f.s1 == \\\\\\\"Hello, World!\\\\\\\" ? s1 : \\\\\\\"abcdefghjklmn\\\\\\\";\\\"}\"}"
                      span:
                        line_start: 15
                        line_stop: 15
                        col_start: 9
                        col_stop: 15
                        path: compiler-test
                        content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                  type_:
                    Array:
                      - Char
                      - - value: "13"
                  value:
                    Ternary:
                      condition:
                        Binary:
                          left:
                            CircuitMemberAccess:
                              circuit:
                                Identifier: "{\"name\":\"f\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":18,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let result = f.s1 == \\\\\\\"Hello, World!\\\\\\\" ? s1 : \\\\\\\"abcdefghjklmn\\\\\\\";\\\"}\"}"
                              name: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":20,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let result = f.s1 == \\\\\\\"Hello, World!\\\\\\\" ? s1 : \\\\\\\"abcdefghjklmn\\\\\\\";\\\"}\"}"
                              span:
                                line_start: 15
                                line_stop: 15
                                col_start: 18
                                col_stop: 22
                                path: compiler-test
                                content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                          right:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 72
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 27
                                          col_stop: 28
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 101
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 28
                                          col_stop: 29
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 108
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 29
                                          col_stop: 30
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 108
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 30
                                          col_stop: 31
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 111
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 31
                                          col_stop: 32
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 44
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 32
                                          col_stop: 33
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 32
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 33
                                          col_stop: 34
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 87
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 34
                                          col_stop: 35
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 111
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 35
                                          col_stop: 36
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 114
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 36
                                          col_stop: 37
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 108
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 37
                                          col_stop: 38
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 100
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 38
                                          col_stop: 39
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 33
                                        span:
                                          line_start: 15
                                          line_stop: 15
                                          col_start: 39
                                          col_stop: 40
                                          path: compiler-test
                                          content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                              span:
                                line_start: 15
                                line_stop: 15
                                col_start: 26
                                col_stop: 41
                                path: compiler-test
                                content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                          op: Eq
                          span:
                            line_start: 15
                            line_stop: 15
                            col_start: 18
                            col_stop: 41
                            path: compiler-test
                            content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                      if_true:
                        Identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":44,\\\"col_stop\\\":46,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let result = f.s1 == \\\\\\\"Hello, World!\\\\\\\" ? s1 : \\\\\\\"abcdefghjklmn\\\\\\\";\\\"}\"}"
                      if_false:
                        ArrayInline:
                          elements:
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 97
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 50
                                      col_stop: 51
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 98
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 51
                                      col_stop: 52
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 99
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 52
                                      col_stop: 53
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 100
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 53
                                      col_stop: 54
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 101
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 54
                                      col_stop: 55
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 102
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 55
                                      col_stop: 56
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 103
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 56
                                      col_stop: 57
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 104
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 57
                                      col_stop: 58
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 106
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 58
                                      col_stop: 59
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 107
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 59
                                      col_stop: 60
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 108
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 60
                                      col_stop: 61
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 109
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 61
                                      col_stop: 62
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 110
                                    span:
                                      line_start: 15
                                      line_stop: 15
                                      col_start: 62
                                      col_stop: 63
                                      path: compiler-test
                                      content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                          span:
                            line_start: 15
                            line_stop: 15
                            col_start: 49
                            col_stop: 64
                            path: compiler-test
                            content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                      span:
                        line_start: 15
                        line_stop: 15
                        col_start: 18
                        col_stop: 64
                        path: compiler-test
                        content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
                  span:
                    line_start: 15
                    line_stop: 15
                    col_start: 5
                    col_stop: 64
                    path: compiler-test
                    content: "    let result = f.s1 == \"Hello, World!\" ? s1 : \"abcdefghjklmn\";"
              - Return:
                  expression:
                    Identifier: "{\"name\":\"result\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":12,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return result;\\\"}\"}"
                  span:
                    line_start: 16
                    line_stop: 16
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return result;"
            span:
              line_start: 11
              line_stop: 17
              col_start: 45
              col_stop: 2
              path: compiler-test
              content: "function main(s1: [char; 13]) -> [char; 13] {\n...\n}"
          span:
            line_start: 11
            line_stop: 17
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(s1: [char; 13]) -> [char; 13] {\n...\n}\n\n\n\n"
