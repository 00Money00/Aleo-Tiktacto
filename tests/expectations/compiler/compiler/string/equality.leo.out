---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 92
      num_constraints: 75
      at: c03384068dd2b9bd528c65e301960d5c4f61bf94949c9080f28a4bc57f81e856
      bt: 7f653d4004b13eee112bbefcf900b0c8201524129423cdda82799c18fdcfb3f7
      ct: bce0d8a64cf530613e693412358d17d231ec8516108ab4ee5a47ddf185a471fa
    output:
      - input_file: inputs/string.in
        output:
          registers:
            out:
              type: bool
              value: "true"
      - input_file: inputs/weird.in
        output:
          registers:
            out:
              type: bool
              value: "false"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Char
                    - - value: "13"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 17
                  path: compiler-test
                  content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {"
            - Variable:
                identifier: "{\"name\":\"s2\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":31,\\\"col_stop\\\":33,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Char
                    - - value: "4"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 31
                  col_stop: 33
                  path: compiler-test
                  content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"hello\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let hello: [char; 13] = \\\\\\\"Hello, World!\\\\\\\";\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 14
                        path: compiler-test
                        content: "    let hello: [char; 13] = \"Hello, World!\";"
                  type_:
                    Array:
                      - Char
                      - - value: "13"
                  value:
                    Value:
                      String:
                        - - Scalar: 72
                          - Scalar: 101
                          - Scalar: 108
                          - Scalar: 108
                          - Scalar: 111
                          - Scalar: 44
                          - Scalar: 32
                          - Scalar: 87
                          - Scalar: 111
                          - Scalar: 114
                          - Scalar: 108
                          - Scalar: 100
                          - Scalar: 33
                        - line_start: 4
                          line_stop: 4
                          col_start: 29
                          col_stop: 44
                          path: compiler-test
                          content: "    let hello: [char; 13] = \"Hello, World!\";"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 44
                    path: compiler-test
                    content: "    let hello: [char; 13] = \"Hello, World!\";"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"part1\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":9,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let part1 = \\\\\\\"Good\\\\\\\";\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 9
                        col_stop: 14
                        path: compiler-test
                        content: "    let part1 = \"Good\";"
                  type_: ~
                  value:
                    Value:
                      String:
                        - - Scalar: 71
                          - Scalar: 111
                          - Scalar: 111
                          - Scalar: 100
                        - line_start: 5
                          line_stop: 5
                          col_start: 17
                          col_stop: 23
                          path: compiler-test
                          content: "    let part1 = \"Good\";"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    let part1 = \"Good\";"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"part2\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":9,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let part2 = \\\\\\\" dog!\\\\\\\";\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 9
                        col_stop: 14
                        path: compiler-test
                        content: "    let part2 = \" dog!\";"
                  type_: ~
                  value:
                    Value:
                      String:
                        - - Scalar: 32
                          - Scalar: 100
                          - Scalar: 111
                          - Scalar: 103
                          - Scalar: 33
                        - line_start: 6
                          line_stop: 6
                          col_start: 17
                          col_stop: 24
                          path: compiler-test
                          content: "    let part2 = \" dog!\";"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 24
                    path: compiler-test
                    content: "    let part2 = \" dog!\";"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"concat\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let concat: [char; 9] = [...part1, ...part2];\\\"}\"}"
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 9
                        col_stop: 15
                        path: compiler-test
                        content: "    let concat: [char; 9] = [...part1, ...part2];"
                  type_:
                    Array:
                      - Char
                      - - value: "9"
                  value:
                    ArrayInline:
                      elements:
                        - Spread:
                            Identifier: "{\"name\":\"part1\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":33,\\\"col_stop\\\":38,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let concat: [char; 9] = [...part1, ...part2];\\\"}\"}"
                        - Spread:
                            Identifier: "{\"name\":\"part2\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":43,\\\"col_stop\\\":48,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let concat: [char; 9] = [...part1, ...part2];\\\"}\"}"
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 29
                        col_stop: 49
                        path: compiler-test
                        content: "    let concat: [char; 9] = [...part1, ...part2];"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 49
                    path: compiler-test
                    content: "    let concat: [char; 9] = [...part1, ...part2];"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let x = false;\\\"}\"}"
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let x = false;"
                  type_: ~
                  value:
                    Value:
                      Boolean:
                        - "false"
                        - line_start: 8
                          line_stop: 8
                          col_start: 13
                          col_stop: 18
                          path: compiler-test
                          content: "    let x = false;"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    let x = false;"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    x = \\\\\\\"test1\\\\\\\" == \\\\\\\"test2\\\\\\\";\\\"}\"}"
                    accesses: []
                    span:
                      line_start: 9
                      line_stop: 9
                      col_start: 5
                      col_stop: 6
                      path: compiler-test
                      content: "    x = \"test1\" == \"test2\";"
                  value:
                    Binary:
                      left:
                        Value:
                          String:
                            - - Scalar: 116
                              - Scalar: 101
                              - Scalar: 115
                              - Scalar: 116
                              - Scalar: 49
                            - line_start: 9
                              line_stop: 9
                              col_start: 9
                              col_stop: 16
                              path: compiler-test
                              content: "    x = \"test1\" == \"test2\";"
                      right:
                        Value:
                          String:
                            - - Scalar: 116
                              - Scalar: 101
                              - Scalar: 115
                              - Scalar: 116
                              - Scalar: 50
                            - line_start: 9
                              line_stop: 9
                              col_start: 20
                              col_stop: 27
                              path: compiler-test
                              content: "    x = \"test1\" == \"test2\";"
                      op: Eq
                      span:
                        line_start: 9
                        line_stop: 9
                        col_start: 9
                        col_stop: 27
                        path: compiler-test
                        content: "    x = \"test1\" == \"test2\";"
                  span:
                    line_start: 9
                    line_stop: 9
                    col_start: 5
                    col_stop: 27
                    path: compiler-test
                    content: "    x = \"test1\" == \"test2\";"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Binary:
                              left:
                                Binary:
                                  left:
                                    Identifier: "{\"name\":\"hello\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return hello == s1 && \\\\\\\"nope\\\\\\\" != s2 && \\\\\\\"es\\\\\\\" == s2[1..3] && concat == \\\\\\\"Good dog!\\\\\\\";\\\"}\"}"
                                  right:
                                    Identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":21,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return hello == s1 && \\\\\\\"nope\\\\\\\" != s2 && \\\\\\\"es\\\\\\\" == s2[1..3] && concat == \\\\\\\"Good dog!\\\\\\\";\\\"}\"}"
                                  op: Eq
                                  span:
                                    line_start: 10
                                    line_stop: 10
                                    col_start: 12
                                    col_stop: 23
                                    path: compiler-test
                                    content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                              right:
                                Binary:
                                  left:
                                    Value:
                                      String:
                                        - - Scalar: 110
                                          - Scalar: 111
                                          - Scalar: 112
                                          - Scalar: 101
                                        - line_start: 10
                                          line_stop: 10
                                          col_start: 27
                                          col_stop: 33
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                  right:
                                    Identifier: "{\"name\":\"s2\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":37,\\\"col_stop\\\":39,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return hello == s1 && \\\\\\\"nope\\\\\\\" != s2 && \\\\\\\"es\\\\\\\" == s2[1..3] && concat == \\\\\\\"Good dog!\\\\\\\";\\\"}\"}"
                                  op: Ne
                                  span:
                                    line_start: 10
                                    line_stop: 10
                                    col_start: 27
                                    col_stop: 39
                                    path: compiler-test
                                    content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                              op: And
                              span:
                                line_start: 10
                                line_stop: 10
                                col_start: 12
                                col_stop: 39
                                path: compiler-test
                                content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                          right:
                            Binary:
                              left:
                                Value:
                                  String:
                                    - - Scalar: 101
                                      - Scalar: 115
                                    - line_start: 10
                                      line_stop: 10
                                      col_start: 43
                                      col_stop: 47
                                      path: compiler-test
                                      content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                              right:
                                ArrayRangeAccess:
                                  array:
                                    Identifier: "{\"name\":\"s2\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":51,\\\"col_stop\\\":53,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return hello == s1 && \\\\\\\"nope\\\\\\\" != s2 && \\\\\\\"es\\\\\\\" == s2[1..3] && concat == \\\\\\\"Good dog!\\\\\\\";\\\"}\"}"
                                  left:
                                    Value:
                                      Implicit:
                                        - "1"
                                        - line_start: 10
                                          line_stop: 10
                                          col_start: 54
                                          col_stop: 55
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                  right:
                                    Value:
                                      Implicit:
                                        - "3"
                                        - line_start: 10
                                          line_stop: 10
                                          col_start: 57
                                          col_stop: 58
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                  span:
                                    line_start: 10
                                    line_stop: 10
                                    col_start: 51
                                    col_stop: 59
                                    path: compiler-test
                                    content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                              op: Eq
                              span:
                                line_start: 10
                                line_stop: 10
                                col_start: 43
                                col_stop: 59
                                path: compiler-test
                                content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                          op: And
                          span:
                            line_start: 10
                            line_stop: 10
                            col_start: 12
                            col_stop: 59
                            path: compiler-test
                            content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                      right:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"concat\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":63,\\\"col_stop\\\":69,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return hello == s1 && \\\\\\\"nope\\\\\\\" != s2 && \\\\\\\"es\\\\\\\" == s2[1..3] && concat == \\\\\\\"Good dog!\\\\\\\";\\\"}\"}"
                          right:
                            Value:
                              String:
                                - - Scalar: 71
                                  - Scalar: 111
                                  - Scalar: 111
                                  - Scalar: 100
                                  - Scalar: 32
                                  - Scalar: 100
                                  - Scalar: 111
                                  - Scalar: 103
                                  - Scalar: 33
                                - line_start: 10
                                  line_stop: 10
                                  col_start: 73
                                  col_stop: 84
                                  path: compiler-test
                                  content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                          op: Eq
                          span:
                            line_start: 10
                            line_stop: 10
                            col_start: 63
                            col_stop: 84
                            path: compiler-test
                            content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                      op: And
                      span:
                        line_start: 10
                        line_stop: 10
                        col_start: 12
                        col_stop: 84
                        path: compiler-test
                        content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                  span:
                    line_start: 10
                    line_stop: 10
                    col_start: 5
                    col_stop: 84
                    path: compiler-test
                    content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
            span:
              line_start: 3
              line_stop: 11
              col_start: 54
              col_stop: 2
              path: compiler-test
              content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 11
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {\n...\n}\n\n\n\n\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Char
                    - - value: "13"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 17
                  path: compiler-test
                  content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {"
            - Variable:
                identifier: "{\"name\":\"s2\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":31,\\\"col_stop\\\":33,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Char
                    - - value: "4"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 31
                  col_stop: 33
                  path: compiler-test
                  content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"hello\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let hello: [char; 13] = \\\\\\\"Hello, World!\\\\\\\";\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 14
                        path: compiler-test
                        content: "    let hello: [char; 13] = \"Hello, World!\";"
                  type_:
                    Array:
                      - Char
                      - - value: "13"
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 72
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 30
                                  col_stop: 31
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 101
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 31
                                  col_stop: 32
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 108
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 32
                                  col_stop: 33
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 108
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 33
                                  col_stop: 34
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 111
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 34
                                  col_stop: 35
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 44
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 35
                                  col_stop: 36
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 32
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 36
                                  col_stop: 37
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 87
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 37
                                  col_stop: 38
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 111
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 38
                                  col_stop: 39
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 114
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 39
                                  col_stop: 40
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 108
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 40
                                  col_stop: 41
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 100
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 41
                                  col_stop: 42
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 33
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 42
                                  col_stop: 43
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 29
                        col_stop: 44
                        path: compiler-test
                        content: "    let hello: [char; 13] = \"Hello, World!\";"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 44
                    path: compiler-test
                    content: "    let hello: [char; 13] = \"Hello, World!\";"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"part1\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":9,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let part1 = \\\\\\\"Good\\\\\\\";\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 9
                        col_stop: 14
                        path: compiler-test
                        content: "    let part1 = \"Good\";"
                  type_: ~
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 71
                                span:
                                  line_start: 5
                                  line_stop: 5
                                  col_start: 18
                                  col_stop: 19
                                  path: compiler-test
                                  content: "    let part1 = \"Good\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 111
                                span:
                                  line_start: 5
                                  line_stop: 5
                                  col_start: 19
                                  col_stop: 20
                                  path: compiler-test
                                  content: "    let part1 = \"Good\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 111
                                span:
                                  line_start: 5
                                  line_stop: 5
                                  col_start: 20
                                  col_stop: 21
                                  path: compiler-test
                                  content: "    let part1 = \"Good\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 100
                                span:
                                  line_start: 5
                                  line_stop: 5
                                  col_start: 21
                                  col_stop: 22
                                  path: compiler-test
                                  content: "    let part1 = \"Good\";"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 17
                        col_stop: 23
                        path: compiler-test
                        content: "    let part1 = \"Good\";"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    let part1 = \"Good\";"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"part2\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":9,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let part2 = \\\\\\\" dog!\\\\\\\";\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 9
                        col_stop: 14
                        path: compiler-test
                        content: "    let part2 = \" dog!\";"
                  type_: ~
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 32
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 18
                                  col_stop: 19
                                  path: compiler-test
                                  content: "    let part2 = \" dog!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 100
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 19
                                  col_stop: 20
                                  path: compiler-test
                                  content: "    let part2 = \" dog!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 111
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 20
                                  col_stop: 21
                                  path: compiler-test
                                  content: "    let part2 = \" dog!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 103
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 21
                                  col_stop: 22
                                  path: compiler-test
                                  content: "    let part2 = \" dog!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 33
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 22
                                  col_stop: 23
                                  path: compiler-test
                                  content: "    let part2 = \" dog!\";"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 17
                        col_stop: 24
                        path: compiler-test
                        content: "    let part2 = \" dog!\";"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 24
                    path: compiler-test
                    content: "    let part2 = \" dog!\";"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"concat\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let concat: [char; 9] = [...part1, ...part2];\\\"}\"}"
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 9
                        col_stop: 15
                        path: compiler-test
                        content: "    let concat: [char; 9] = [...part1, ...part2];"
                  type_:
                    Array:
                      - Char
                      - - value: "9"
                  value:
                    ArrayInline:
                      elements:
                        - Spread:
                            Identifier: "{\"name\":\"part1\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":33,\\\"col_stop\\\":38,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let concat: [char; 9] = [...part1, ...part2];\\\"}\"}"
                        - Spread:
                            Identifier: "{\"name\":\"part2\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":43,\\\"col_stop\\\":48,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let concat: [char; 9] = [...part1, ...part2];\\\"}\"}"
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 29
                        col_stop: 49
                        path: compiler-test
                        content: "    let concat: [char; 9] = [...part1, ...part2];"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 49
                    path: compiler-test
                    content: "    let concat: [char; 9] = [...part1, ...part2];"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let x = false;\\\"}\"}"
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let x = false;"
                  type_: ~
                  value:
                    Value:
                      Boolean:
                        - "false"
                        - line_start: 8
                          line_stop: 8
                          col_start: 13
                          col_stop: 18
                          path: compiler-test
                          content: "    let x = false;"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    let x = false;"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    x = \\\\\\\"test1\\\\\\\" == \\\\\\\"test2\\\\\\\";\\\"}\"}"
                    accesses: []
                    span:
                      line_start: 9
                      line_stop: 9
                      col_start: 5
                      col_stop: 6
                      path: compiler-test
                      content: "    x = \"test1\" == \"test2\";"
                  value:
                    Binary:
                      left:
                        ArrayInline:
                          elements:
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 116
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 10
                                      col_stop: 11
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 101
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 11
                                      col_stop: 12
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 115
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 12
                                      col_stop: 13
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 116
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 13
                                      col_stop: 14
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 49
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 14
                                      col_stop: 15
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                          span:
                            line_start: 9
                            line_stop: 9
                            col_start: 9
                            col_stop: 16
                            path: compiler-test
                            content: "    x = \"test1\" == \"test2\";"
                      right:
                        ArrayInline:
                          elements:
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 116
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 21
                                      col_stop: 22
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 101
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 22
                                      col_stop: 23
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 115
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 23
                                      col_stop: 24
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 116
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 24
                                      col_stop: 25
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 50
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 25
                                      col_stop: 26
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                          span:
                            line_start: 9
                            line_stop: 9
                            col_start: 20
                            col_stop: 27
                            path: compiler-test
                            content: "    x = \"test1\" == \"test2\";"
                      op: Eq
                      span:
                        line_start: 9
                        line_stop: 9
                        col_start: 9
                        col_stop: 27
                        path: compiler-test
                        content: "    x = \"test1\" == \"test2\";"
                  span:
                    line_start: 9
                    line_stop: 9
                    col_start: 5
                    col_stop: 27
                    path: compiler-test
                    content: "    x = \"test1\" == \"test2\";"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Binary:
                              left:
                                Binary:
                                  left:
                                    Identifier: "{\"name\":\"hello\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return hello == s1 && \\\\\\\"nope\\\\\\\" != s2 && \\\\\\\"es\\\\\\\" == s2[1..3] && concat == \\\\\\\"Good dog!\\\\\\\";\\\"}\"}"
                                  right:
                                    Identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":21,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return hello == s1 && \\\\\\\"nope\\\\\\\" != s2 && \\\\\\\"es\\\\\\\" == s2[1..3] && concat == \\\\\\\"Good dog!\\\\\\\";\\\"}\"}"
                                  op: Eq
                                  span:
                                    line_start: 10
                                    line_stop: 10
                                    col_start: 12
                                    col_stop: 23
                                    path: compiler-test
                                    content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                              right:
                                Binary:
                                  left:
                                    ArrayInline:
                                      elements:
                                        - Expression:
                                            Value:
                                              Char:
                                                character:
                                                  Scalar: 110
                                                span:
                                                  line_start: 10
                                                  line_stop: 10
                                                  col_start: 28
                                                  col_stop: 29
                                                  path: compiler-test
                                                  content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                        - Expression:
                                            Value:
                                              Char:
                                                character:
                                                  Scalar: 111
                                                span:
                                                  line_start: 10
                                                  line_stop: 10
                                                  col_start: 29
                                                  col_stop: 30
                                                  path: compiler-test
                                                  content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                        - Expression:
                                            Value:
                                              Char:
                                                character:
                                                  Scalar: 112
                                                span:
                                                  line_start: 10
                                                  line_stop: 10
                                                  col_start: 30
                                                  col_stop: 31
                                                  path: compiler-test
                                                  content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                        - Expression:
                                            Value:
                                              Char:
                                                character:
                                                  Scalar: 101
                                                span:
                                                  line_start: 10
                                                  line_stop: 10
                                                  col_start: 31
                                                  col_stop: 32
                                                  path: compiler-test
                                                  content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                      span:
                                        line_start: 10
                                        line_stop: 10
                                        col_start: 27
                                        col_stop: 33
                                        path: compiler-test
                                        content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                  right:
                                    Identifier: "{\"name\":\"s2\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":37,\\\"col_stop\\\":39,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return hello == s1 && \\\\\\\"nope\\\\\\\" != s2 && \\\\\\\"es\\\\\\\" == s2[1..3] && concat == \\\\\\\"Good dog!\\\\\\\";\\\"}\"}"
                                  op: Ne
                                  span:
                                    line_start: 10
                                    line_stop: 10
                                    col_start: 27
                                    col_stop: 39
                                    path: compiler-test
                                    content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                              op: And
                              span:
                                line_start: 10
                                line_stop: 10
                                col_start: 12
                                col_stop: 39
                                path: compiler-test
                                content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                          right:
                            Binary:
                              left:
                                ArrayInline:
                                  elements:
                                    - Expression:
                                        Value:
                                          Char:
                                            character:
                                              Scalar: 101
                                            span:
                                              line_start: 10
                                              line_stop: 10
                                              col_start: 44
                                              col_stop: 45
                                              path: compiler-test
                                              content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                    - Expression:
                                        Value:
                                          Char:
                                            character:
                                              Scalar: 115
                                            span:
                                              line_start: 10
                                              line_stop: 10
                                              col_start: 45
                                              col_stop: 46
                                              path: compiler-test
                                              content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                  span:
                                    line_start: 10
                                    line_stop: 10
                                    col_start: 43
                                    col_stop: 47
                                    path: compiler-test
                                    content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                              right:
                                ArrayRangeAccess:
                                  array:
                                    Identifier: "{\"name\":\"s2\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":51,\\\"col_stop\\\":53,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return hello == s1 && \\\\\\\"nope\\\\\\\" != s2 && \\\\\\\"es\\\\\\\" == s2[1..3] && concat == \\\\\\\"Good dog!\\\\\\\";\\\"}\"}"
                                  left:
                                    Value:
                                      Implicit:
                                        - "1"
                                        - line_start: 10
                                          line_stop: 10
                                          col_start: 54
                                          col_stop: 55
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                  right:
                                    Value:
                                      Implicit:
                                        - "3"
                                        - line_start: 10
                                          line_stop: 10
                                          col_start: 57
                                          col_stop: 58
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                  span:
                                    line_start: 10
                                    line_stop: 10
                                    col_start: 51
                                    col_stop: 59
                                    path: compiler-test
                                    content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                              op: Eq
                              span:
                                line_start: 10
                                line_stop: 10
                                col_start: 43
                                col_stop: 59
                                path: compiler-test
                                content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                          op: And
                          span:
                            line_start: 10
                            line_stop: 10
                            col_start: 12
                            col_stop: 59
                            path: compiler-test
                            content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                      right:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"concat\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":63,\\\"col_stop\\\":69,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return hello == s1 && \\\\\\\"nope\\\\\\\" != s2 && \\\\\\\"es\\\\\\\" == s2[1..3] && concat == \\\\\\\"Good dog!\\\\\\\";\\\"}\"}"
                          right:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 71
                                        span:
                                          line_start: 10
                                          line_stop: 10
                                          col_start: 74
                                          col_stop: 75
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 111
                                        span:
                                          line_start: 10
                                          line_stop: 10
                                          col_start: 75
                                          col_stop: 76
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 111
                                        span:
                                          line_start: 10
                                          line_stop: 10
                                          col_start: 76
                                          col_stop: 77
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 100
                                        span:
                                          line_start: 10
                                          line_stop: 10
                                          col_start: 77
                                          col_stop: 78
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 32
                                        span:
                                          line_start: 10
                                          line_stop: 10
                                          col_start: 78
                                          col_stop: 79
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 100
                                        span:
                                          line_start: 10
                                          line_stop: 10
                                          col_start: 79
                                          col_stop: 80
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 111
                                        span:
                                          line_start: 10
                                          line_stop: 10
                                          col_start: 80
                                          col_stop: 81
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 103
                                        span:
                                          line_start: 10
                                          line_stop: 10
                                          col_start: 81
                                          col_stop: 82
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 33
                                        span:
                                          line_start: 10
                                          line_stop: 10
                                          col_start: 82
                                          col_stop: 83
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                              span:
                                line_start: 10
                                line_stop: 10
                                col_start: 73
                                col_stop: 84
                                path: compiler-test
                                content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                          op: Eq
                          span:
                            line_start: 10
                            line_stop: 10
                            col_start: 63
                            col_stop: 84
                            path: compiler-test
                            content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                      op: And
                      span:
                        line_start: 10
                        line_stop: 10
                        col_start: 12
                        col_stop: 84
                        path: compiler-test
                        content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                  span:
                    line_start: 10
                    line_stop: 10
                    col_start: 5
                    col_stop: 84
                    path: compiler-test
                    content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
            span:
              line_start: 3
              line_stop: 11
              col_start: 54
              col_stop: 2
              path: compiler-test
              content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 11
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {\n...\n}\n\n\n\n\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Char
                    - - value: "13"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 17
                  path: compiler-test
                  content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {"
            - Variable:
                identifier: "{\"name\":\"s2\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":31,\\\"col_stop\\\":33,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(s1: [char; 13], s2: [char; 4]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Char
                    - - value: "4"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 31
                  col_stop: 33
                  path: compiler-test
                  content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"hello\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let hello: [char; 13] = \\\\\\\"Hello, World!\\\\\\\";\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 14
                        path: compiler-test
                        content: "    let hello: [char; 13] = \"Hello, World!\";"
                  type_:
                    Array:
                      - Char
                      - - value: "13"
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 72
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 30
                                  col_stop: 31
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 101
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 31
                                  col_stop: 32
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 108
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 32
                                  col_stop: 33
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 108
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 33
                                  col_stop: 34
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 111
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 34
                                  col_stop: 35
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 44
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 35
                                  col_stop: 36
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 32
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 36
                                  col_stop: 37
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 87
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 37
                                  col_stop: 38
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 111
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 38
                                  col_stop: 39
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 114
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 39
                                  col_stop: 40
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 108
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 40
                                  col_stop: 41
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 100
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 41
                                  col_stop: 42
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 33
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 42
                                  col_stop: 43
                                  path: compiler-test
                                  content: "    let hello: [char; 13] = \"Hello, World!\";"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 29
                        col_stop: 44
                        path: compiler-test
                        content: "    let hello: [char; 13] = \"Hello, World!\";"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 44
                    path: compiler-test
                    content: "    let hello: [char; 13] = \"Hello, World!\";"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"part1\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":9,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let part1 = \\\\\\\"Good\\\\\\\";\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 9
                        col_stop: 14
                        path: compiler-test
                        content: "    let part1 = \"Good\";"
                  type_:
                    Array:
                      - Char
                      - - value: "4"
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 71
                                span:
                                  line_start: 5
                                  line_stop: 5
                                  col_start: 18
                                  col_stop: 19
                                  path: compiler-test
                                  content: "    let part1 = \"Good\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 111
                                span:
                                  line_start: 5
                                  line_stop: 5
                                  col_start: 19
                                  col_stop: 20
                                  path: compiler-test
                                  content: "    let part1 = \"Good\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 111
                                span:
                                  line_start: 5
                                  line_stop: 5
                                  col_start: 20
                                  col_stop: 21
                                  path: compiler-test
                                  content: "    let part1 = \"Good\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 100
                                span:
                                  line_start: 5
                                  line_stop: 5
                                  col_start: 21
                                  col_stop: 22
                                  path: compiler-test
                                  content: "    let part1 = \"Good\";"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 17
                        col_stop: 23
                        path: compiler-test
                        content: "    let part1 = \"Good\";"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    let part1 = \"Good\";"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"part2\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":9,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let part2 = \\\\\\\" dog!\\\\\\\";\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 9
                        col_stop: 14
                        path: compiler-test
                        content: "    let part2 = \" dog!\";"
                  type_:
                    Array:
                      - Char
                      - - value: "5"
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 32
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 18
                                  col_stop: 19
                                  path: compiler-test
                                  content: "    let part2 = \" dog!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 100
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 19
                                  col_stop: 20
                                  path: compiler-test
                                  content: "    let part2 = \" dog!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 111
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 20
                                  col_stop: 21
                                  path: compiler-test
                                  content: "    let part2 = \" dog!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 103
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 21
                                  col_stop: 22
                                  path: compiler-test
                                  content: "    let part2 = \" dog!\";"
                        - Expression:
                            Value:
                              Char:
                                character:
                                  Scalar: 33
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 22
                                  col_stop: 23
                                  path: compiler-test
                                  content: "    let part2 = \" dog!\";"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 17
                        col_stop: 24
                        path: compiler-test
                        content: "    let part2 = \" dog!\";"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 24
                    path: compiler-test
                    content: "    let part2 = \" dog!\";"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"concat\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let concat: [char; 9] = [...part1, ...part2];\\\"}\"}"
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 9
                        col_stop: 15
                        path: compiler-test
                        content: "    let concat: [char; 9] = [...part1, ...part2];"
                  type_:
                    Array:
                      - Char
                      - - value: "9"
                  value:
                    ArrayInline:
                      elements:
                        - Spread:
                            Identifier: "{\"name\":\"part1\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":33,\\\"col_stop\\\":38,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let concat: [char; 9] = [...part1, ...part2];\\\"}\"}"
                        - Spread:
                            Identifier: "{\"name\":\"part2\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":43,\\\"col_stop\\\":48,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let concat: [char; 9] = [...part1, ...part2];\\\"}\"}"
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 29
                        col_stop: 49
                        path: compiler-test
                        content: "    let concat: [char; 9] = [...part1, ...part2];"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 49
                    path: compiler-test
                    content: "    let concat: [char; 9] = [...part1, ...part2];"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let x = false;\\\"}\"}"
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let x = false;"
                  type_: Boolean
                  value:
                    Value:
                      Boolean:
                        - "false"
                        - line_start: 8
                          line_stop: 8
                          col_start: 13
                          col_stop: 18
                          path: compiler-test
                          content: "    let x = false;"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    let x = false;"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    x = \\\\\\\"test1\\\\\\\" == \\\\\\\"test2\\\\\\\";\\\"}\"}"
                    accesses: []
                    span:
                      line_start: 9
                      line_stop: 9
                      col_start: 5
                      col_stop: 6
                      path: compiler-test
                      content: "    x = \"test1\" == \"test2\";"
                  value:
                    Binary:
                      left:
                        ArrayInline:
                          elements:
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 116
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 10
                                      col_stop: 11
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 101
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 11
                                      col_stop: 12
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 115
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 12
                                      col_stop: 13
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 116
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 13
                                      col_stop: 14
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 49
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 14
                                      col_stop: 15
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                          span:
                            line_start: 9
                            line_stop: 9
                            col_start: 9
                            col_stop: 16
                            path: compiler-test
                            content: "    x = \"test1\" == \"test2\";"
                      right:
                        ArrayInline:
                          elements:
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 116
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 21
                                      col_stop: 22
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 101
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 22
                                      col_stop: 23
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 115
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 23
                                      col_stop: 24
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 116
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 24
                                      col_stop: 25
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                            - Expression:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 50
                                    span:
                                      line_start: 9
                                      line_stop: 9
                                      col_start: 25
                                      col_stop: 26
                                      path: compiler-test
                                      content: "    x = \"test1\" == \"test2\";"
                          span:
                            line_start: 9
                            line_stop: 9
                            col_start: 20
                            col_stop: 27
                            path: compiler-test
                            content: "    x = \"test1\" == \"test2\";"
                      op: Eq
                      span:
                        line_start: 9
                        line_stop: 9
                        col_start: 9
                        col_stop: 27
                        path: compiler-test
                        content: "    x = \"test1\" == \"test2\";"
                  span:
                    line_start: 9
                    line_stop: 9
                    col_start: 5
                    col_stop: 27
                    path: compiler-test
                    content: "    x = \"test1\" == \"test2\";"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Binary:
                              left:
                                Binary:
                                  left:
                                    Identifier: "{\"name\":\"hello\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return hello == s1 && \\\\\\\"nope\\\\\\\" != s2 && \\\\\\\"es\\\\\\\" == s2[1..3] && concat == \\\\\\\"Good dog!\\\\\\\";\\\"}\"}"
                                  right:
                                    Identifier: "{\"name\":\"s1\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":21,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return hello == s1 && \\\\\\\"nope\\\\\\\" != s2 && \\\\\\\"es\\\\\\\" == s2[1..3] && concat == \\\\\\\"Good dog!\\\\\\\";\\\"}\"}"
                                  op: Eq
                                  span:
                                    line_start: 10
                                    line_stop: 10
                                    col_start: 12
                                    col_stop: 23
                                    path: compiler-test
                                    content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                              right:
                                Binary:
                                  left:
                                    ArrayInline:
                                      elements:
                                        - Expression:
                                            Value:
                                              Char:
                                                character:
                                                  Scalar: 110
                                                span:
                                                  line_start: 10
                                                  line_stop: 10
                                                  col_start: 28
                                                  col_stop: 29
                                                  path: compiler-test
                                                  content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                        - Expression:
                                            Value:
                                              Char:
                                                character:
                                                  Scalar: 111
                                                span:
                                                  line_start: 10
                                                  line_stop: 10
                                                  col_start: 29
                                                  col_stop: 30
                                                  path: compiler-test
                                                  content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                        - Expression:
                                            Value:
                                              Char:
                                                character:
                                                  Scalar: 112
                                                span:
                                                  line_start: 10
                                                  line_stop: 10
                                                  col_start: 30
                                                  col_stop: 31
                                                  path: compiler-test
                                                  content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                        - Expression:
                                            Value:
                                              Char:
                                                character:
                                                  Scalar: 101
                                                span:
                                                  line_start: 10
                                                  line_stop: 10
                                                  col_start: 31
                                                  col_stop: 32
                                                  path: compiler-test
                                                  content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                      span:
                                        line_start: 10
                                        line_stop: 10
                                        col_start: 27
                                        col_stop: 33
                                        path: compiler-test
                                        content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                  right:
                                    Identifier: "{\"name\":\"s2\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":37,\\\"col_stop\\\":39,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return hello == s1 && \\\\\\\"nope\\\\\\\" != s2 && \\\\\\\"es\\\\\\\" == s2[1..3] && concat == \\\\\\\"Good dog!\\\\\\\";\\\"}\"}"
                                  op: Ne
                                  span:
                                    line_start: 10
                                    line_stop: 10
                                    col_start: 27
                                    col_stop: 39
                                    path: compiler-test
                                    content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                              op: And
                              span:
                                line_start: 10
                                line_stop: 10
                                col_start: 12
                                col_stop: 39
                                path: compiler-test
                                content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                          right:
                            Binary:
                              left:
                                ArrayInline:
                                  elements:
                                    - Expression:
                                        Value:
                                          Char:
                                            character:
                                              Scalar: 101
                                            span:
                                              line_start: 10
                                              line_stop: 10
                                              col_start: 44
                                              col_stop: 45
                                              path: compiler-test
                                              content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                    - Expression:
                                        Value:
                                          Char:
                                            character:
                                              Scalar: 115
                                            span:
                                              line_start: 10
                                              line_stop: 10
                                              col_start: 45
                                              col_stop: 46
                                              path: compiler-test
                                              content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                  span:
                                    line_start: 10
                                    line_stop: 10
                                    col_start: 43
                                    col_stop: 47
                                    path: compiler-test
                                    content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                              right:
                                ArrayRangeAccess:
                                  array:
                                    Identifier: "{\"name\":\"s2\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":51,\\\"col_stop\\\":53,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return hello == s1 && \\\\\\\"nope\\\\\\\" != s2 && \\\\\\\"es\\\\\\\" == s2[1..3] && concat == \\\\\\\"Good dog!\\\\\\\";\\\"}\"}"
                                  left:
                                    Value:
                                      Integer:
                                        - U32
                                        - "1"
                                        - line_start: 10
                                          line_stop: 10
                                          col_start: 54
                                          col_stop: 55
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                  right:
                                    Value:
                                      Integer:
                                        - U32
                                        - "3"
                                        - line_start: 10
                                          line_stop: 10
                                          col_start: 57
                                          col_stop: 58
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                  span:
                                    line_start: 10
                                    line_stop: 10
                                    col_start: 51
                                    col_stop: 59
                                    path: compiler-test
                                    content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                              op: Eq
                              span:
                                line_start: 10
                                line_stop: 10
                                col_start: 43
                                col_stop: 59
                                path: compiler-test
                                content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                          op: And
                          span:
                            line_start: 10
                            line_stop: 10
                            col_start: 12
                            col_stop: 59
                            path: compiler-test
                            content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                      right:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"concat\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":63,\\\"col_stop\\\":69,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return hello == s1 && \\\\\\\"nope\\\\\\\" != s2 && \\\\\\\"es\\\\\\\" == s2[1..3] && concat == \\\\\\\"Good dog!\\\\\\\";\\\"}\"}"
                          right:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 71
                                        span:
                                          line_start: 10
                                          line_stop: 10
                                          col_start: 74
                                          col_stop: 75
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 111
                                        span:
                                          line_start: 10
                                          line_stop: 10
                                          col_start: 75
                                          col_stop: 76
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 111
                                        span:
                                          line_start: 10
                                          line_stop: 10
                                          col_start: 76
                                          col_stop: 77
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 100
                                        span:
                                          line_start: 10
                                          line_stop: 10
                                          col_start: 77
                                          col_stop: 78
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 32
                                        span:
                                          line_start: 10
                                          line_stop: 10
                                          col_start: 78
                                          col_stop: 79
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 100
                                        span:
                                          line_start: 10
                                          line_stop: 10
                                          col_start: 79
                                          col_stop: 80
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 111
                                        span:
                                          line_start: 10
                                          line_stop: 10
                                          col_start: 80
                                          col_stop: 81
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 103
                                        span:
                                          line_start: 10
                                          line_stop: 10
                                          col_start: 81
                                          col_stop: 82
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 33
                                        span:
                                          line_start: 10
                                          line_stop: 10
                                          col_start: 82
                                          col_stop: 83
                                          path: compiler-test
                                          content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                              span:
                                line_start: 10
                                line_stop: 10
                                col_start: 73
                                col_stop: 84
                                path: compiler-test
                                content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                          op: Eq
                          span:
                            line_start: 10
                            line_stop: 10
                            col_start: 63
                            col_stop: 84
                            path: compiler-test
                            content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                      op: And
                      span:
                        line_start: 10
                        line_stop: 10
                        col_start: 12
                        col_stop: 84
                        path: compiler-test
                        content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
                  span:
                    line_start: 10
                    line_stop: 10
                    col_start: 5
                    col_stop: 84
                    path: compiler-test
                    content: "    return hello == s1 && \"nope\" != s2 && \"es\" == s2[1..3] && concat == \"Good dog!\";"
            span:
              line_start: 3
              line_stop: 11
              col_start: 54
              col_stop: 2
              path: compiler-test
              content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 11
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(s1: [char; 13], s2: [char; 4]) -> bool {\n...\n}\n\n\n\n\n\n"
