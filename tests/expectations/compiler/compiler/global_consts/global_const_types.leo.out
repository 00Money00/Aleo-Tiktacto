---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 95
      num_constraints: 95
      at: 8db8901199024f620eff3a2a9d95e74862d07f8413a6fef789347f012de915ce
      bt: 134fe0b804695f759f665fe6754e85dc3556cb7c4fd7fca0e78ed2f55d048873
      ct: 8770257f9e15fb2972e7ca01e77f3d4d0303033d75d9e990b7065a3096ce9cfb
    output:
      - input_file: globals.in
        output:
          registers:
            r0:
              type: bool
              value: "false"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"width\",\"span\":\"{\\\"line_start\\\":17,\\\"line_stop\\\":17,\\\"col_start\\\":5,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    width: u32,\\\"}\"}"
                - IntegerType: U32
            - CircuitVariable:
                - "{\"name\":\"height\",\"span\":\"{\\\"line_start\\\":18,\\\"line_stop\\\":18,\\\"col_start\\\":5,\\\"col_stop\\\":11,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    height: u32,\\\"}\"}"
                - IntegerType: U32
      global_consts:
        basic:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"basic\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":7,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const basic: u32 = 8;\\\"}\"}"
              span:
                line_start: 3
                line_stop: 3
                col_start: 7
                col_stop: 12
                path: compiler-test
                content: "const basic: u32 = 8;"
          type_:
            IntegerType: U32
          value:
            Value:
              Implicit:
                - "8"
                - line_start: 3
                  line_stop: 3
                  col_start: 20
                  col_stop: 21
                  path: compiler-test
                  content: "const basic: u32 = 8;"
          span:
            line_start: 3
            line_stop: 3
            col_start: 1
            col_stop: 21
            path: compiler-test
            content: "const basic: u32 = 8;"
        array:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"array\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":7,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const array: [u8; (3, 2)] = [[0u8; 2]; 3];\\\"}\"}"
              span:
                line_start: 4
                line_stop: 4
                col_start: 7
                col_stop: 12
                path: compiler-test
                content: "const array: [u8; (3, 2)] = [[0u8; 2]; 3];"
          type_:
            Array:
              - IntegerType: U8
              - - value: "3"
                - value: "2"
          value:
            ArrayInit:
              element:
                ArrayInit:
                  element:
                    Value:
                      Integer:
                        - U8
                        - "0"
                        - line_start: 4
                          line_stop: 4
                          col_start: 31
                          col_stop: 34
                          path: compiler-test
                          content: "const array: [u8; (3, 2)] = [[0u8; 2]; 3];"
                  dimensions:
                    - value: "2"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 30
                    col_stop: 38
                    path: compiler-test
                    content: "const array: [u8; (3, 2)] = [[0u8; 2]; 3];"
              dimensions:
                - value: "3"
              span:
                line_start: 4
                line_stop: 4
                col_start: 29
                col_stop: 42
                path: compiler-test
                content: "const array: [u8; (3, 2)] = [[0u8; 2]; 3];"
          span:
            line_start: 4
            line_stop: 4
            col_start: 1
            col_stop: 42
            path: compiler-test
            content: "const array: [u8; (3, 2)] = [[0u8; 2]; 3];"
        tuple:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"tuple\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":7,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const tuple = (1u32, 2u32);\\\"}\"}"
              span:
                line_start: 5
                line_stop: 5
                col_start: 7
                col_stop: 12
                path: compiler-test
                content: "const tuple = (1u32, 2u32);"
          type_: ~
          value:
            TupleInit:
              elements:
                - Value:
                    Integer:
                      - U32
                      - "1"
                      - line_start: 5
                        line_stop: 5
                        col_start: 16
                        col_stop: 20
                        path: compiler-test
                        content: "const tuple = (1u32, 2u32);"
                - Value:
                    Integer:
                      - U32
                      - "2"
                      - line_start: 5
                        line_stop: 5
                        col_start: 22
                        col_stop: 26
                        path: compiler-test
                        content: "const tuple = (1u32, 2u32);"
              span:
                line_start: 5
                line_stop: 5
                col_start: 15
                col_stop: 27
                path: compiler-test
                content: "const tuple = (1u32, 2u32);"
          span:
            line_start: 5
            line_stop: 5
            col_start: 1
            col_stop: 27
            path: compiler-test
            content: "const tuple = (1u32, 2u32);"
        "a,b":
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":8,\\\"col_stop\\\":9,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const (a, b) = (1u32, 2u32);\\\"}\"}"
              span:
                line_start: 6
                line_stop: 6
                col_start: 8
                col_stop: 9
                path: compiler-test
                content: "const (a, b) = (1u32, 2u32);"
            - mutable: false
              identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const (a, b) = (1u32, 2u32);\\\"}\"}"
              span:
                line_start: 6
                line_stop: 6
                col_start: 11
                col_stop: 12
                path: compiler-test
                content: "const (a, b) = (1u32, 2u32);"
          type_: ~
          value:
            TupleInit:
              elements:
                - Value:
                    Integer:
                      - U32
                      - "1"
                      - line_start: 6
                        line_stop: 6
                        col_start: 17
                        col_stop: 21
                        path: compiler-test
                        content: "const (a, b) = (1u32, 2u32);"
                - Value:
                    Integer:
                      - U32
                      - "2"
                      - line_start: 6
                        line_stop: 6
                        col_start: 23
                        col_stop: 27
                        path: compiler-test
                        content: "const (a, b) = (1u32, 2u32);"
              span:
                line_start: 6
                line_stop: 6
                col_start: 16
                col_stop: 28
                path: compiler-test
                content: "const (a, b) = (1u32, 2u32);"
          span:
            line_start: 6
            line_stop: 6
            col_start: 1
            col_stop: 28
            path: compiler-test
            content: "const (a, b) = (1u32, 2u32);"
        simple_group:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"simple_group\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":7,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const simple_group: group = 1group;\\\"}\"}"
              span:
                line_start: 7
                line_stop: 7
                col_start: 7
                col_stop: 19
                path: compiler-test
                content: "const simple_group: group = 1group;"
          type_: Group
          value:
            Value:
              Group:
                Single:
                  - "1"
                  - line_start: 7
                    line_stop: 7
                    col_start: 29
                    col_stop: 35
                    path: compiler-test
                    content: "const simple_group: group = 1group;"
          span:
            line_start: 7
            line_stop: 7
            col_start: 1
            col_stop: 35
            path: compiler-test
            content: "const simple_group: group = 1group;"
        complex_group:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"complex_group\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":7,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const complex_group = (_, 1)group;\\\"}\"}"
              span:
                line_start: 8
                line_stop: 8
                col_start: 7
                col_stop: 20
                path: compiler-test
                content: "const complex_group = (_, 1)group;"
          type_: ~
          value:
            Value:
              Group:
                Tuple:
                  x: Inferred
                  y:
                    Number:
                      - "1"
                      - line_start: 8
                        line_stop: 8
                        col_start: 27
                        col_stop: 28
                        path: compiler-test
                        content: "const complex_group = (_, 1)group;"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 24
                    col_stop: 34
                    path: compiler-test
                    content: "const complex_group = (_, 1)group;"
          span:
            line_start: 8
            line_stop: 8
            col_start: 1
            col_stop: 34
            path: compiler-test
            content: "const complex_group = (_, 1)group;"
        field_test:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"field_test\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":7,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const field_test: field = 2;\\\"}\"}"
              span:
                line_start: 9
                line_stop: 9
                col_start: 7
                col_stop: 17
                path: compiler-test
                content: "const field_test: field = 2;"
          type_: Field
          value:
            Value:
              Implicit:
                - "2"
                - line_start: 9
                  line_stop: 9
                  col_start: 27
                  col_stop: 28
                  path: compiler-test
                  content: "const field_test: field = 2;"
          span:
            line_start: 9
            line_stop: 9
            col_start: 1
            col_stop: 28
            path: compiler-test
            content: "const field_test: field = 2;"
        use_another_const:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"use_another_const\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":7,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const use_another_const = basic + 1;\\\"}\"}"
              span:
                line_start: 10
                line_stop: 10
                col_start: 7
                col_stop: 24
                path: compiler-test
                content: const use_another_const = basic + 1;
          type_: ~
          value:
            Binary:
              left:
                Identifier: "{\"name\":\"basic\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":27,\\\"col_stop\\\":32,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const use_another_const = basic + 1;\\\"}\"}"
              right:
                Value:
                  Implicit:
                    - "1"
                    - line_start: 10
                      line_stop: 10
                      col_start: 35
                      col_stop: 36
                      path: compiler-test
                      content: const use_another_const = basic + 1;
              op: Add
              span:
                line_start: 10
                line_stop: 10
                col_start: 27
                col_stop: 36
                path: compiler-test
                content: const use_another_const = basic + 1;
          span:
            line_start: 10
            line_stop: 10
            col_start: 1
            col_stop: 36
            path: compiler-test
            content: const use_another_const = basic + 1;
        foo:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"foo\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":7,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const foo = Foo { width: 10, height: 20 };\\\"}\"}"
              span:
                line_start: 11
                line_stop: 11
                col_start: 7
                col_stop: 10
                path: compiler-test
                content: "const foo = Foo { width: 10, height: 20 };"
          type_: ~
          value:
            CircuitInit:
              name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":13,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const foo = Foo { width: 10, height: 20 };\\\"}\"}"
              members:
                - identifier: "{\"name\":\"width\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":19,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const foo = Foo { width: 10, height: 20 };\\\"}\"}"
                  expression:
                    Value:
                      Implicit:
                        - "10"
                        - line_start: 11
                          line_stop: 11
                          col_start: 26
                          col_stop: 28
                          path: compiler-test
                          content: "const foo = Foo { width: 10, height: 20 };"
                - identifier: "{\"name\":\"height\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":30,\\\"col_stop\\\":36,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const foo = Foo { width: 10, height: 20 };\\\"}\"}"
                  expression:
                    Value:
                      Implicit:
                        - "20"
                        - line_start: 11
                          line_stop: 11
                          col_start: 38
                          col_stop: 40
                          path: compiler-test
                          content: "const foo = Foo { width: 10, height: 20 };"
              span:
                line_start: 11
                line_stop: 11
                col_start: 13
                col_stop: 42
                path: compiler-test
                content: "const foo = Foo { width: 10, height: 20 };"
          span:
            line_start: 11
            line_stop: 11
            col_start: 1
            col_stop: 42
            path: compiler-test
            content: "const foo = Foo { width: 10, height: 20 };"
        uno:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"uno\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":7,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const uno = uno();\\\"}\"}"
              span:
                line_start: 12
                line_stop: 12
                col_start: 7
                col_stop: 10
                path: compiler-test
                content: const uno = uno();
          type_: ~
          value:
            Call:
              function:
                Identifier: "{\"name\":\"uno\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":13,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const uno = uno();\\\"}\"}"
              arguments: []
              span:
                line_start: 12
                line_stop: 12
                col_start: 13
                col_stop: 18
                path: compiler-test
                content: const uno = uno();
          span:
            line_start: 12
            line_stop: 12
            col_start: 1
            col_stop: 18
            path: compiler-test
            content: const uno = uno();
        character:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":7,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const character = 'a';\\\"}\"}"
              span:
                line_start: 13
                line_stop: 13
                col_start: 7
                col_stop: 16
                path: compiler-test
                content: "const character = 'a';"
          type_: ~
          value:
            Value:
              Char:
                character:
                  Scalar: 97
                span:
                  line_start: 13
                  line_stop: 13
                  col_start: 19
                  col_stop: 22
                  path: compiler-test
                  content: "const character = 'a';"
          span:
            line_start: 13
            line_stop: 13
            col_start: 1
            col_stop: 22
            path: compiler-test
            content: "const character = 'a';"
        hello:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"hello\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":7,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const hello = \\\\\\\"Hello, World!\\\\\\\";\\\"}\"}"
              span:
                line_start: 14
                line_stop: 14
                col_start: 7
                col_stop: 12
                path: compiler-test
                content: "const hello = \"Hello, World!\";"
          type_: ~
          value:
            Value:
              String:
                - - Scalar: 72
                  - Scalar: 101
                  - Scalar: 108
                  - Scalar: 108
                  - Scalar: 111
                  - Scalar: 44
                  - Scalar: 32
                  - Scalar: 87
                  - Scalar: 111
                  - Scalar: 114
                  - Scalar: 108
                  - Scalar: 100
                  - Scalar: 33
                - line_start: 14
                  line_stop: 14
                  col_start: 15
                  col_stop: 30
                  path: compiler-test
                  content: "const hello = \"Hello, World!\";"
          span:
            line_start: 14
            line_stop: 14
            col_start: 1
            col_stop: 30
            path: compiler-test
            content: "const hello = \"Hello, World!\";"
      functions:
        "{\"name\":\"uno\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":10,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function uno() -> u32 {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"uno\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":10,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function uno() -> u32 {\\\"}\"}"
          input: []
          output:
            IntegerType: U32
          block:
            statements:
              - Return:
                  expression:
                    Value:
                      Integer:
                        - U32
                        - "1"
                        - line_start: 22
                          line_stop: 22
                          col_start: 12
                          col_stop: 16
                          path: compiler-test
                          content: "    return 1u32;"
                  span:
                    line_start: 22
                    line_stop: 22
                    col_start: 5
                    col_stop: 16
                    path: compiler-test
                    content: "    return 1u32;"
            span:
              line_start: 21
              line_stop: 23
              col_start: 23
              col_stop: 2
              path: compiler-test
              content: "function uno() -> u32 {\n...\n}"
          span:
            line_start: 21
            line_stop: 23
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function uno() -> u32 {\n...\n}"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":25,\\\"line_stop\\\":25,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":25,\\\"line_stop\\\":25,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":25,\\\"line_stop\\\":25,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 25
                  line_stop: 25
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: u32) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":26,\\\"line_stop\\\":26,\\\"col_start\\\":10,\\\"col_stop\\\":11,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let (x, y) = (1u32, 2u32);\\\"}\"}"
                      span:
                        line_start: 26
                        line_stop: 26
                        col_start: 10
                        col_stop: 11
                        path: compiler-test
                        content: "    let (x, y) = (1u32, 2u32);"
                    - mutable: true
                      identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":26,\\\"line_stop\\\":26,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let (x, y) = (1u32, 2u32);\\\"}\"}"
                      span:
                        line_start: 26
                        line_stop: 26
                        col_start: 13
                        col_stop: 14
                        path: compiler-test
                        content: "    let (x, y) = (1u32, 2u32);"
                  type_: ~
                  value:
                    TupleInit:
                      elements:
                        - Value:
                            Integer:
                              - U32
                              - "1"
                              - line_start: 26
                                line_stop: 26
                                col_start: 19
                                col_stop: 23
                                path: compiler-test
                                content: "    let (x, y) = (1u32, 2u32);"
                        - Value:
                            Integer:
                              - U32
                              - "2"
                              - line_start: 26
                                line_stop: 26
                                col_start: 25
                                col_stop: 29
                                path: compiler-test
                                content: "    let (x, y) = (1u32, 2u32);"
                      span:
                        line_start: 26
                        line_stop: 26
                        col_start: 18
                        col_stop: 30
                        path: compiler-test
                        content: "    let (x, y) = (1u32, 2u32);"
                  span:
                    line_start: 26
                    line_stop: 26
                    col_start: 5
                    col_stop: 30
                    path: compiler-test
                    content: "    let (x, y) = (1u32, 2u32);"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Binary:
                              left:
                                Binary:
                                  left:
                                    Binary:
                                      left:
                                        Binary:
                                          left:
                                            Binary:
                                              left:
                                                Binary:
                                                  left:
                                                    Binary:
                                                      left:
                                                        Binary:
                                                          left:
                                                            Binary:
                                                              left:
                                                                Binary:
                                                                  left:
                                                                    Binary:
                                                                      left:
                                                                        Binary:
                                                                          left:
                                                                            Binary:
                                                                              left:
                                                                                Binary:
                                                                                  left:
                                                                                    Binary:
                                                                                      left:
                                                                                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":28,\\\"line_stop\\\":28,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == basic\\\"}\"}"
                                                                                      right:
                                                                                        Identifier: "{\"name\":\"basic\",\"span\":\"{\\\"line_start\\\":28,\\\"line_stop\\\":28,\\\"col_start\\\":17,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == basic\\\"}\"}"
                                                                                      op: Eq
                                                                                      span:
                                                                                        line_start: 28
                                                                                        line_stop: 28
                                                                                        col_start: 12
                                                                                        col_stop: 22
                                                                                        path: compiler-test
                                                                                        content: "    return a == basic"
                                                                                  right:
                                                                                    Binary:
                                                                                      left:
                                                                                        Identifier: "{\"name\":\"basic\",\"span\":\"{\\\"line_start\\\":29,\\\"line_stop\\\":29,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && basic == 8u32\\\"}\"}"
                                                                                      right:
                                                                                        Value:
                                                                                          Integer:
                                                                                            - U32
                                                                                            - "8"
                                                                                            - line_start: 29
                                                                                              line_stop: 29
                                                                                              col_start: 21
                                                                                              col_stop: 25
                                                                                              path: compiler-test
                                                                                              content: "        && basic == 8u32"
                                                                                      op: Eq
                                                                                      span:
                                                                                        line_start: 29
                                                                                        line_stop: 29
                                                                                        col_start: 12
                                                                                        col_stop: 25
                                                                                        path: compiler-test
                                                                                        content: "        && basic == 8u32"
                                                                                  op: And
                                                                                  span:
                                                                                    line_start: 28
                                                                                    line_stop: 29
                                                                                    col_start: 12
                                                                                    col_stop: 25
                                                                                    path: compiler-test
                                                                                    content: "    return a == basic\n        && basic == 8u32"
                                                                              right:
                                                                                Binary:
                                                                                  left:
                                                                                    ArrayAccess:
                                                                                      array:
                                                                                        ArrayAccess:
                                                                                          array:
                                                                                            Identifier: "{\"name\":\"array\",\"span\":\"{\\\"line_start\\\":30,\\\"line_stop\\\":30,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && array[0][0] == 0 // arrays\\\"}\"}"
                                                                                          index:
                                                                                            Value:
                                                                                              Implicit:
                                                                                                - "0"
                                                                                                - line_start: 30
                                                                                                  line_stop: 30
                                                                                                  col_start: 18
                                                                                                  col_stop: 19
                                                                                                  path: compiler-test
                                                                                                  content: "        && array[0][0] == 0 // arrays"
                                                                                          span:
                                                                                            line_start: 30
                                                                                            line_stop: 30
                                                                                            col_start: 12
                                                                                            col_stop: 20
                                                                                            path: compiler-test
                                                                                            content: "        && array[0][0] == 0 // arrays"
                                                                                      index:
                                                                                        Value:
                                                                                          Implicit:
                                                                                            - "0"
                                                                                            - line_start: 30
                                                                                              line_stop: 30
                                                                                              col_start: 21
                                                                                              col_stop: 22
                                                                                              path: compiler-test
                                                                                              content: "        && array[0][0] == 0 // arrays"
                                                                                      span:
                                                                                        line_start: 30
                                                                                        line_stop: 30
                                                                                        col_start: 12
                                                                                        col_stop: 23
                                                                                        path: compiler-test
                                                                                        content: "        && array[0][0] == 0 // arrays"
                                                                                  right:
                                                                                    Value:
                                                                                      Implicit:
                                                                                        - "0"
                                                                                        - line_start: 30
                                                                                          line_stop: 30
                                                                                          col_start: 27
                                                                                          col_stop: 28
                                                                                          path: compiler-test
                                                                                          content: "        && array[0][0] == 0 // arrays"
                                                                                  op: Eq
                                                                                  span:
                                                                                    line_start: 30
                                                                                    line_stop: 30
                                                                                    col_start: 12
                                                                                    col_stop: 28
                                                                                    path: compiler-test
                                                                                    content: "        && array[0][0] == 0 // arrays"
                                                                              op: And
                                                                              span:
                                                                                line_start: 28
                                                                                line_stop: 30
                                                                                col_start: 12
                                                                                col_stop: 28
                                                                                path: compiler-test
                                                                                content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays"
                                                                          right:
                                                                            Binary:
                                                                              left:
                                                                                ArrayAccess:
                                                                                  array:
                                                                                    ArrayAccess:
                                                                                      array:
                                                                                        Identifier: "{\"name\":\"array\",\"span\":\"{\\\"line_start\\\":31,\\\"line_stop\\\":31,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && array[2][1] == 0\\\"}\"}"
                                                                                      index:
                                                                                        Value:
                                                                                          Implicit:
                                                                                            - "2"
                                                                                            - line_start: 31
                                                                                              line_stop: 31
                                                                                              col_start: 18
                                                                                              col_stop: 19
                                                                                              path: compiler-test
                                                                                              content: "        && array[2][1] == 0"
                                                                                      span:
                                                                                        line_start: 31
                                                                                        line_stop: 31
                                                                                        col_start: 12
                                                                                        col_stop: 20
                                                                                        path: compiler-test
                                                                                        content: "        && array[2][1] == 0"
                                                                                  index:
                                                                                    Value:
                                                                                      Implicit:
                                                                                        - "1"
                                                                                        - line_start: 31
                                                                                          line_stop: 31
                                                                                          col_start: 21
                                                                                          col_stop: 22
                                                                                          path: compiler-test
                                                                                          content: "        && array[2][1] == 0"
                                                                                  span:
                                                                                    line_start: 31
                                                                                    line_stop: 31
                                                                                    col_start: 12
                                                                                    col_stop: 23
                                                                                    path: compiler-test
                                                                                    content: "        && array[2][1] == 0"
                                                                              right:
                                                                                Value:
                                                                                  Implicit:
                                                                                    - "0"
                                                                                    - line_start: 31
                                                                                      line_stop: 31
                                                                                      col_start: 27
                                                                                      col_stop: 28
                                                                                      path: compiler-test
                                                                                      content: "        && array[2][1] == 0"
                                                                              op: Eq
                                                                              span:
                                                                                line_start: 31
                                                                                line_stop: 31
                                                                                col_start: 12
                                                                                col_stop: 28
                                                                                path: compiler-test
                                                                                content: "        && array[2][1] == 0"
                                                                          op: And
                                                                          span:
                                                                            line_start: 28
                                                                            line_stop: 31
                                                                            col_start: 12
                                                                            col_stop: 28
                                                                            path: compiler-test
                                                                            content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0"
                                                                      right:
                                                                        Binary:
                                                                          left:
                                                                            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":32,\\\"line_stop\\\":32,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && x == 1u32 // tuple test\\\"}\"}"
                                                                          right:
                                                                            Value:
                                                                              Integer:
                                                                                - U32
                                                                                - "1"
                                                                                - line_start: 32
                                                                                  line_stop: 32
                                                                                  col_start: 17
                                                                                  col_stop: 21
                                                                                  path: compiler-test
                                                                                  content: "        && x == 1u32 // tuple test"
                                                                          op: Eq
                                                                          span:
                                                                            line_start: 32
                                                                            line_stop: 32
                                                                            col_start: 12
                                                                            col_stop: 21
                                                                            path: compiler-test
                                                                            content: "        && x == 1u32 // tuple test"
                                                                      op: And
                                                                      span:
                                                                        line_start: 28
                                                                        line_stop: 32
                                                                        col_start: 12
                                                                        col_stop: 21
                                                                        path: compiler-test
                                                                        content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test"
                                                                  right:
                                                                    Binary:
                                                                      left:
                                                                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":33,\\\"line_stop\\\":33,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && y == 2u32 \\\"}\"}"
                                                                      right:
                                                                        Value:
                                                                          Integer:
                                                                            - U32
                                                                            - "2"
                                                                            - line_start: 33
                                                                              line_stop: 33
                                                                              col_start: 17
                                                                              col_stop: 21
                                                                              path: compiler-test
                                                                              content: "        && y == 2u32 "
                                                                      op: Eq
                                                                      span:
                                                                        line_start: 33
                                                                        line_stop: 33
                                                                        col_start: 12
                                                                        col_stop: 21
                                                                        path: compiler-test
                                                                        content: "        && y == 2u32 "
                                                                  op: And
                                                                  span:
                                                                    line_start: 28
                                                                    line_stop: 33
                                                                    col_start: 12
                                                                    col_stop: 21
                                                                    path: compiler-test
                                                                    content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 "
                                                              right:
                                                                Binary:
                                                                  left:
                                                                    Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":34,\\\"line_stop\\\":34,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && a == 1u32 // tuple extraction test\\\"}\"}"
                                                                  right:
                                                                    Value:
                                                                      Integer:
                                                                        - U32
                                                                        - "1"
                                                                        - line_start: 34
                                                                          line_stop: 34
                                                                          col_start: 17
                                                                          col_stop: 21
                                                                          path: compiler-test
                                                                          content: "        && a == 1u32 // tuple extraction test"
                                                                  op: Eq
                                                                  span:
                                                                    line_start: 34
                                                                    line_stop: 34
                                                                    col_start: 12
                                                                    col_stop: 21
                                                                    path: compiler-test
                                                                    content: "        && a == 1u32 // tuple extraction test"
                                                              op: And
                                                              span:
                                                                line_start: 28
                                                                line_stop: 34
                                                                col_start: 12
                                                                col_stop: 21
                                                                path: compiler-test
                                                                content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test"
                                                          right:
                                                            Binary:
                                                              left:
                                                                Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":35,\\\"line_stop\\\":35,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && b == 2u32\\\"}\"}"
                                                              right:
                                                                Value:
                                                                  Integer:
                                                                    - U32
                                                                    - "2"
                                                                    - line_start: 35
                                                                      line_stop: 35
                                                                      col_start: 17
                                                                      col_stop: 21
                                                                      path: compiler-test
                                                                      content: "        && b == 2u32"
                                                              op: Eq
                                                              span:
                                                                line_start: 35
                                                                line_stop: 35
                                                                col_start: 12
                                                                col_stop: 21
                                                                path: compiler-test
                                                                content: "        && b == 2u32"
                                                          op: And
                                                          span:
                                                            line_start: 28
                                                            line_stop: 35
                                                            col_start: 12
                                                            col_stop: 21
                                                            path: compiler-test
                                                            content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32"
                                                      right:
                                                        Binary:
                                                          left:
                                                            Identifier: "{\"name\":\"simple_group\",\"span\":\"{\\\"line_start\\\":36,\\\"line_stop\\\":36,\\\"col_start\\\":12,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && simple_group == 1group // group test\\\"}\"}"
                                                          right:
                                                            Value:
                                                              Group:
                                                                Single:
                                                                  - "1"
                                                                  - line_start: 36
                                                                    line_stop: 36
                                                                    col_start: 28
                                                                    col_stop: 34
                                                                    path: compiler-test
                                                                    content: "        && simple_group == 1group // group test"
                                                          op: Eq
                                                          span:
                                                            line_start: 36
                                                            line_stop: 36
                                                            col_start: 12
                                                            col_stop: 34
                                                            path: compiler-test
                                                            content: "        && simple_group == 1group // group test"
                                                      op: And
                                                      span:
                                                        line_start: 28
                                                        line_stop: 36
                                                        col_start: 12
                                                        col_stop: 34
                                                        path: compiler-test
                                                        content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test"
                                                  right:
                                                    Binary:
                                                      left:
                                                        Identifier: "{\"name\":\"complex_group\",\"span\":\"{\\\"line_start\\\":37,\\\"line_stop\\\":37,\\\"col_start\\\":12,\\\"col_stop\\\":25,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && complex_group == (_, 1)group\\\"}\"}"
                                                      right:
                                                        Value:
                                                          Group:
                                                            Tuple:
                                                              x: Inferred
                                                              y:
                                                                Number:
                                                                  - "1"
                                                                  - line_start: 37
                                                                    line_stop: 37
                                                                    col_start: 33
                                                                    col_stop: 34
                                                                    path: compiler-test
                                                                    content: "        && complex_group == (_, 1)group"
                                                              span:
                                                                line_start: 37
                                                                line_stop: 37
                                                                col_start: 30
                                                                col_stop: 40
                                                                path: compiler-test
                                                                content: "        && complex_group == (_, 1)group"
                                                      op: Eq
                                                      span:
                                                        line_start: 37
                                                        line_stop: 37
                                                        col_start: 12
                                                        col_stop: 40
                                                        path: compiler-test
                                                        content: "        && complex_group == (_, 1)group"
                                                  op: And
                                                  span:
                                                    line_start: 28
                                                    line_stop: 37
                                                    col_start: 12
                                                    col_stop: 40
                                                    path: compiler-test
                                                    content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group"
                                              right:
                                                Binary:
                                                  left:
                                                    Identifier: "{\"name\":\"field_test\",\"span\":\"{\\\"line_start\\\":38,\\\"line_stop\\\":38,\\\"col_start\\\":12,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && field_test == 2field // field test\\\"}\"}"
                                                  right:
                                                    Value:
                                                      Field:
                                                        - "2"
                                                        - line_start: 38
                                                          line_stop: 38
                                                          col_start: 26
                                                          col_stop: 32
                                                          path: compiler-test
                                                          content: "        && field_test == 2field // field test"
                                                  op: Eq
                                                  span:
                                                    line_start: 38
                                                    line_stop: 38
                                                    col_start: 12
                                                    col_stop: 32
                                                    path: compiler-test
                                                    content: "        && field_test == 2field // field test"
                                              op: And
                                              span:
                                                line_start: 28
                                                line_stop: 38
                                                col_start: 12
                                                col_stop: 32
                                                path: compiler-test
                                                content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test"
                                          right:
                                            Binary:
                                              left:
                                                Identifier: "{\"name\":\"use_another_const\",\"span\":\"{\\\"line_start\\\":39,\\\"line_stop\\\":39,\\\"col_start\\\":12,\\\"col_stop\\\":29,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && use_another_const == 9u32 // use another const test\\\"}\"}"
                                              right:
                                                Value:
                                                  Integer:
                                                    - U32
                                                    - "9"
                                                    - line_start: 39
                                                      line_stop: 39
                                                      col_start: 33
                                                      col_stop: 37
                                                      path: compiler-test
                                                      content: "        && use_another_const == 9u32 // use another const test"
                                              op: Eq
                                              span:
                                                line_start: 39
                                                line_stop: 39
                                                col_start: 12
                                                col_stop: 37
                                                path: compiler-test
                                                content: "        && use_another_const == 9u32 // use another const test"
                                          op: And
                                          span:
                                            line_start: 28
                                            line_stop: 39
                                            col_start: 12
                                            col_stop: 37
                                            path: compiler-test
                                            content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test"
                                      right:
                                        Binary:
                                          left:
                                            CircuitMemberAccess:
                                              circuit:
                                                Identifier: "{\"name\":\"foo\",\"span\":\"{\\\"line_start\\\":40,\\\"line_stop\\\":40,\\\"col_start\\\":12,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && foo.width == 10u32 // circuit test\\\"}\"}"
                                              name: "{\"name\":\"width\",\"span\":\"{\\\"line_start\\\":40,\\\"line_stop\\\":40,\\\"col_start\\\":16,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && foo.width == 10u32 // circuit test\\\"}\"}"
                                              span:
                                                line_start: 40
                                                line_stop: 40
                                                col_start: 12
                                                col_stop: 21
                                                path: compiler-test
                                                content: "        && foo.width == 10u32 // circuit test"
                                          right:
                                            Value:
                                              Integer:
                                                - U32
                                                - "10"
                                                - line_start: 40
                                                  line_stop: 40
                                                  col_start: 25
                                                  col_stop: 30
                                                  path: compiler-test
                                                  content: "        && foo.width == 10u32 // circuit test"
                                          op: Eq
                                          span:
                                            line_start: 40
                                            line_stop: 40
                                            col_start: 12
                                            col_stop: 30
                                            path: compiler-test
                                            content: "        && foo.width == 10u32 // circuit test"
                                      op: And
                                      span:
                                        line_start: 28
                                        line_stop: 40
                                        col_start: 12
                                        col_stop: 30
                                        path: compiler-test
                                        content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test\n        && foo.width == 10u32 // circuit test"
                                  right:
                                    Binary:
                                      left:
                                        CircuitMemberAccess:
                                          circuit:
                                            Identifier: "{\"name\":\"foo\",\"span\":\"{\\\"line_start\\\":41,\\\"line_stop\\\":41,\\\"col_start\\\":12,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && foo.height == 20u32\\\"}\"}"
                                          name: "{\"name\":\"height\",\"span\":\"{\\\"line_start\\\":41,\\\"line_stop\\\":41,\\\"col_start\\\":16,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && foo.height == 20u32\\\"}\"}"
                                          span:
                                            line_start: 41
                                            line_stop: 41
                                            col_start: 12
                                            col_stop: 22
                                            path: compiler-test
                                            content: "        && foo.height == 20u32"
                                      right:
                                        Value:
                                          Integer:
                                            - U32
                                            - "20"
                                            - line_start: 41
                                              line_stop: 41
                                              col_start: 26
                                              col_stop: 31
                                              path: compiler-test
                                              content: "        && foo.height == 20u32"
                                      op: Eq
                                      span:
                                        line_start: 41
                                        line_stop: 41
                                        col_start: 12
                                        col_stop: 31
                                        path: compiler-test
                                        content: "        && foo.height == 20u32"
                                  op: And
                                  span:
                                    line_start: 28
                                    line_stop: 41
                                    col_start: 12
                                    col_stop: 31
                                    path: compiler-test
                                    content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test\n        && foo.width == 10u32 // circuit test\n        && foo.height == 20u32"
                              right:
                                Binary:
                                  left:
                                    Identifier: "{\"name\":\"uno\",\"span\":\"{\\\"line_start\\\":42,\\\"line_stop\\\":42,\\\"col_start\\\":12,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && uno == 1u32 // function test\\\"}\"}"
                                  right:
                                    Value:
                                      Integer:
                                        - U32
                                        - "1"
                                        - line_start: 42
                                          line_stop: 42
                                          col_start: 19
                                          col_stop: 23
                                          path: compiler-test
                                          content: "        && uno == 1u32 // function test"
                                  op: Eq
                                  span:
                                    line_start: 42
                                    line_stop: 42
                                    col_start: 12
                                    col_stop: 23
                                    path: compiler-test
                                    content: "        && uno == 1u32 // function test"
                              op: And
                              span:
                                line_start: 28
                                line_stop: 42
                                col_start: 12
                                col_stop: 23
                                path: compiler-test
                                content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test\n        && foo.width == 10u32 // circuit test\n        && foo.height == 20u32\n        && uno == 1u32 // function test"
                          right:
                            Binary:
                              left:
                                Identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":43,\\\"line_stop\\\":43,\\\"col_start\\\":12,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && character == 'a' // char test\\\"}\"}"
                              right:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 97
                                    span:
                                      line_start: 43
                                      line_stop: 43
                                      col_start: 25
                                      col_stop: 28
                                      path: compiler-test
                                      content: "        && character == 'a' // char test"
                              op: Eq
                              span:
                                line_start: 43
                                line_stop: 43
                                col_start: 12
                                col_stop: 28
                                path: compiler-test
                                content: "        && character == 'a' // char test"
                          op: And
                          span:
                            line_start: 28
                            line_stop: 43
                            col_start: 12
                            col_stop: 28
                            path: compiler-test
                            content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test\n        && foo.width == 10u32 // circuit test\n        && foo.height == 20u32\n        && uno == 1u32 // function test\n        && character == 'a' // char test"
                      right:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"hello\",\"span\":\"{\\\"line_start\\\":44,\\\"line_stop\\\":44,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && hello == \\\\\\\"Hello, World!\\\\\\\";\\\"}\"}"
                          right:
                            Value:
                              String:
                                - - Scalar: 72
                                  - Scalar: 101
                                  - Scalar: 108
                                  - Scalar: 108
                                  - Scalar: 111
                                  - Scalar: 44
                                  - Scalar: 32
                                  - Scalar: 87
                                  - Scalar: 111
                                  - Scalar: 114
                                  - Scalar: 108
                                  - Scalar: 100
                                  - Scalar: 33
                                - line_start: 44
                                  line_stop: 44
                                  col_start: 21
                                  col_stop: 36
                                  path: compiler-test
                                  content: "        && hello == \"Hello, World!\";"
                          op: Eq
                          span:
                            line_start: 44
                            line_stop: 44
                            col_start: 12
                            col_stop: 36
                            path: compiler-test
                            content: "        && hello == \"Hello, World!\";"
                      op: And
                      span:
                        line_start: 28
                        line_stop: 44
                        col_start: 12
                        col_stop: 36
                        path: compiler-test
                        content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test\n        && foo.width == 10u32 // circuit test\n        && foo.height == 20u32\n        && uno == 1u32 // function test\n        && character == 'a' // char test\n        && hello == \"Hello, World!\";"
                  span:
                    line_start: 28
                    line_stop: 44
                    col_start: 5
                    col_stop: 36
                    path: compiler-test
                    content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test\n        && foo.width == 10u32 // circuit test\n        && foo.height == 20u32\n        && uno == 1u32 // function test\n        && character == 'a' // char test\n        && hello == \"Hello, World!\";"
            span:
              line_start: 25
              line_stop: 45
              col_start: 31
              col_stop: 2
              path: compiler-test
              content: "function main(a: u32) -> bool {\n...\n}"
          span:
            line_start: 25
            line_stop: 45
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: u32) -> bool {\n...\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"width\",\"span\":\"{\\\"line_start\\\":17,\\\"line_stop\\\":17,\\\"col_start\\\":5,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    width: u32,\\\"}\"}"
                - IntegerType: U32
            - CircuitVariable:
                - "{\"name\":\"height\",\"span\":\"{\\\"line_start\\\":18,\\\"line_stop\\\":18,\\\"col_start\\\":5,\\\"col_stop\\\":11,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    height: u32,\\\"}\"}"
                - IntegerType: U32
      global_consts:
        basic:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"basic\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":7,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const basic: u32 = 8;\\\"}\"}"
              span:
                line_start: 3
                line_stop: 3
                col_start: 7
                col_stop: 12
                path: compiler-test
                content: "const basic: u32 = 8;"
          type_:
            IntegerType: U32
          value:
            Value:
              Implicit:
                - "8"
                - line_start: 3
                  line_stop: 3
                  col_start: 20
                  col_stop: 21
                  path: compiler-test
                  content: "const basic: u32 = 8;"
          span:
            line_start: 3
            line_stop: 3
            col_start: 1
            col_stop: 21
            path: compiler-test
            content: "const basic: u32 = 8;"
        array:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"array\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":7,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const array: [u8; (3, 2)] = [[0u8; 2]; 3];\\\"}\"}"
              span:
                line_start: 4
                line_stop: 4
                col_start: 7
                col_stop: 12
                path: compiler-test
                content: "const array: [u8; (3, 2)] = [[0u8; 2]; 3];"
          type_:
            Array:
              - Array:
                  - IntegerType: U8
                  - - value: "2"
              - - value: "3"
          value:
            ArrayInit:
              element:
                ArrayInit:
                  element:
                    Value:
                      Integer:
                        - U8
                        - "0"
                        - line_start: 4
                          line_stop: 4
                          col_start: 31
                          col_stop: 34
                          path: compiler-test
                          content: "const array: [u8; (3, 2)] = [[0u8; 2]; 3];"
                  dimensions:
                    - value: "2"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 30
                    col_stop: 38
                    path: compiler-test
                    content: "const array: [u8; (3, 2)] = [[0u8; 2]; 3];"
              dimensions:
                - value: "3"
              span:
                line_start: 4
                line_stop: 4
                col_start: 29
                col_stop: 42
                path: compiler-test
                content: "const array: [u8; (3, 2)] = [[0u8; 2]; 3];"
          span:
            line_start: 4
            line_stop: 4
            col_start: 1
            col_stop: 42
            path: compiler-test
            content: "const array: [u8; (3, 2)] = [[0u8; 2]; 3];"
        tuple:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"tuple\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":7,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const tuple = (1u32, 2u32);\\\"}\"}"
              span:
                line_start: 5
                line_stop: 5
                col_start: 7
                col_stop: 12
                path: compiler-test
                content: "const tuple = (1u32, 2u32);"
          type_: ~
          value:
            TupleInit:
              elements:
                - Value:
                    Integer:
                      - U32
                      - "1"
                      - line_start: 5
                        line_stop: 5
                        col_start: 16
                        col_stop: 20
                        path: compiler-test
                        content: "const tuple = (1u32, 2u32);"
                - Value:
                    Integer:
                      - U32
                      - "2"
                      - line_start: 5
                        line_stop: 5
                        col_start: 22
                        col_stop: 26
                        path: compiler-test
                        content: "const tuple = (1u32, 2u32);"
              span:
                line_start: 5
                line_stop: 5
                col_start: 15
                col_stop: 27
                path: compiler-test
                content: "const tuple = (1u32, 2u32);"
          span:
            line_start: 5
            line_stop: 5
            col_start: 1
            col_stop: 27
            path: compiler-test
            content: "const tuple = (1u32, 2u32);"
        "a,b":
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":8,\\\"col_stop\\\":9,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const (a, b) = (1u32, 2u32);\\\"}\"}"
              span:
                line_start: 6
                line_stop: 6
                col_start: 8
                col_stop: 9
                path: compiler-test
                content: "const (a, b) = (1u32, 2u32);"
            - mutable: false
              identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const (a, b) = (1u32, 2u32);\\\"}\"}"
              span:
                line_start: 6
                line_stop: 6
                col_start: 11
                col_stop: 12
                path: compiler-test
                content: "const (a, b) = (1u32, 2u32);"
          type_: ~
          value:
            TupleInit:
              elements:
                - Value:
                    Integer:
                      - U32
                      - "1"
                      - line_start: 6
                        line_stop: 6
                        col_start: 17
                        col_stop: 21
                        path: compiler-test
                        content: "const (a, b) = (1u32, 2u32);"
                - Value:
                    Integer:
                      - U32
                      - "2"
                      - line_start: 6
                        line_stop: 6
                        col_start: 23
                        col_stop: 27
                        path: compiler-test
                        content: "const (a, b) = (1u32, 2u32);"
              span:
                line_start: 6
                line_stop: 6
                col_start: 16
                col_stop: 28
                path: compiler-test
                content: "const (a, b) = (1u32, 2u32);"
          span:
            line_start: 6
            line_stop: 6
            col_start: 1
            col_stop: 28
            path: compiler-test
            content: "const (a, b) = (1u32, 2u32);"
        simple_group:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"simple_group\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":7,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const simple_group: group = 1group;\\\"}\"}"
              span:
                line_start: 7
                line_stop: 7
                col_start: 7
                col_stop: 19
                path: compiler-test
                content: "const simple_group: group = 1group;"
          type_: Group
          value:
            Value:
              Group:
                Single:
                  - "1"
                  - line_start: 7
                    line_stop: 7
                    col_start: 29
                    col_stop: 35
                    path: compiler-test
                    content: "const simple_group: group = 1group;"
          span:
            line_start: 7
            line_stop: 7
            col_start: 1
            col_stop: 35
            path: compiler-test
            content: "const simple_group: group = 1group;"
        complex_group:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"complex_group\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":7,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const complex_group = (_, 1)group;\\\"}\"}"
              span:
                line_start: 8
                line_stop: 8
                col_start: 7
                col_stop: 20
                path: compiler-test
                content: "const complex_group = (_, 1)group;"
          type_: ~
          value:
            Value:
              Group:
                Tuple:
                  x: Inferred
                  y:
                    Number:
                      - "1"
                      - line_start: 8
                        line_stop: 8
                        col_start: 27
                        col_stop: 28
                        path: compiler-test
                        content: "const complex_group = (_, 1)group;"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 24
                    col_stop: 34
                    path: compiler-test
                    content: "const complex_group = (_, 1)group;"
          span:
            line_start: 8
            line_stop: 8
            col_start: 1
            col_stop: 34
            path: compiler-test
            content: "const complex_group = (_, 1)group;"
        field_test:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"field_test\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":7,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const field_test: field = 2;\\\"}\"}"
              span:
                line_start: 9
                line_stop: 9
                col_start: 7
                col_stop: 17
                path: compiler-test
                content: "const field_test: field = 2;"
          type_: Field
          value:
            Value:
              Implicit:
                - "2"
                - line_start: 9
                  line_stop: 9
                  col_start: 27
                  col_stop: 28
                  path: compiler-test
                  content: "const field_test: field = 2;"
          span:
            line_start: 9
            line_stop: 9
            col_start: 1
            col_stop: 28
            path: compiler-test
            content: "const field_test: field = 2;"
        use_another_const:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"use_another_const\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":7,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const use_another_const = basic + 1;\\\"}\"}"
              span:
                line_start: 10
                line_stop: 10
                col_start: 7
                col_stop: 24
                path: compiler-test
                content: const use_another_const = basic + 1;
          type_: ~
          value:
            Binary:
              left:
                Identifier: "{\"name\":\"basic\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":27,\\\"col_stop\\\":32,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const use_another_const = basic + 1;\\\"}\"}"
              right:
                Value:
                  Implicit:
                    - "1"
                    - line_start: 10
                      line_stop: 10
                      col_start: 35
                      col_stop: 36
                      path: compiler-test
                      content: const use_another_const = basic + 1;
              op: Add
              span:
                line_start: 10
                line_stop: 10
                col_start: 27
                col_stop: 36
                path: compiler-test
                content: const use_another_const = basic + 1;
          span:
            line_start: 10
            line_stop: 10
            col_start: 1
            col_stop: 36
            path: compiler-test
            content: const use_another_const = basic + 1;
        foo:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"foo\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":7,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const foo = Foo { width: 10, height: 20 };\\\"}\"}"
              span:
                line_start: 11
                line_stop: 11
                col_start: 7
                col_stop: 10
                path: compiler-test
                content: "const foo = Foo { width: 10, height: 20 };"
          type_: ~
          value:
            CircuitInit:
              name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":13,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const foo = Foo { width: 10, height: 20 };\\\"}\"}"
              members:
                - identifier: "{\"name\":\"width\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":19,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const foo = Foo { width: 10, height: 20 };\\\"}\"}"
                  expression:
                    Value:
                      Implicit:
                        - "10"
                        - line_start: 11
                          line_stop: 11
                          col_start: 26
                          col_stop: 28
                          path: compiler-test
                          content: "const foo = Foo { width: 10, height: 20 };"
                - identifier: "{\"name\":\"height\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":30,\\\"col_stop\\\":36,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const foo = Foo { width: 10, height: 20 };\\\"}\"}"
                  expression:
                    Value:
                      Implicit:
                        - "20"
                        - line_start: 11
                          line_stop: 11
                          col_start: 38
                          col_stop: 40
                          path: compiler-test
                          content: "const foo = Foo { width: 10, height: 20 };"
              span:
                line_start: 11
                line_stop: 11
                col_start: 13
                col_stop: 42
                path: compiler-test
                content: "const foo = Foo { width: 10, height: 20 };"
          span:
            line_start: 11
            line_stop: 11
            col_start: 1
            col_stop: 42
            path: compiler-test
            content: "const foo = Foo { width: 10, height: 20 };"
        uno:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"uno\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":7,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const uno = uno();\\\"}\"}"
              span:
                line_start: 12
                line_stop: 12
                col_start: 7
                col_stop: 10
                path: compiler-test
                content: const uno = uno();
          type_: ~
          value:
            Call:
              function:
                Identifier: "{\"name\":\"uno\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":13,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const uno = uno();\\\"}\"}"
              arguments: []
              span:
                line_start: 12
                line_stop: 12
                col_start: 13
                col_stop: 18
                path: compiler-test
                content: const uno = uno();
          span:
            line_start: 12
            line_stop: 12
            col_start: 1
            col_stop: 18
            path: compiler-test
            content: const uno = uno();
        character:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":7,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const character = 'a';\\\"}\"}"
              span:
                line_start: 13
                line_stop: 13
                col_start: 7
                col_stop: 16
                path: compiler-test
                content: "const character = 'a';"
          type_: ~
          value:
            Value:
              Char:
                character:
                  Scalar: 97
                span:
                  line_start: 13
                  line_stop: 13
                  col_start: 19
                  col_stop: 22
                  path: compiler-test
                  content: "const character = 'a';"
          span:
            line_start: 13
            line_stop: 13
            col_start: 1
            col_stop: 22
            path: compiler-test
            content: "const character = 'a';"
        hello:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"hello\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":7,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const hello = \\\\\\\"Hello, World!\\\\\\\";\\\"}\"}"
              span:
                line_start: 14
                line_stop: 14
                col_start: 7
                col_stop: 12
                path: compiler-test
                content: "const hello = \"Hello, World!\";"
          type_: ~
          value:
            ArrayInline:
              elements:
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 72
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 16
                          col_stop: 17
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 101
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 17
                          col_stop: 18
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 108
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 18
                          col_stop: 19
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 108
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 19
                          col_stop: 20
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 111
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 20
                          col_stop: 21
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 44
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 21
                          col_stop: 22
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 32
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 22
                          col_stop: 23
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 87
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 23
                          col_stop: 24
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 111
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 24
                          col_stop: 25
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 114
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 25
                          col_stop: 26
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 108
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 26
                          col_stop: 27
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 100
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 27
                          col_stop: 28
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 33
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 28
                          col_stop: 29
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
              span:
                line_start: 14
                line_stop: 14
                col_start: 15
                col_stop: 30
                path: compiler-test
                content: "const hello = \"Hello, World!\";"
          span:
            line_start: 14
            line_stop: 14
            col_start: 1
            col_stop: 30
            path: compiler-test
            content: "const hello = \"Hello, World!\";"
      functions:
        "{\"name\":\"uno\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":10,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function uno() -> u32 {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"uno\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":10,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function uno() -> u32 {\\\"}\"}"
          input: []
          output:
            IntegerType: U32
          block:
            statements:
              - Return:
                  expression:
                    Value:
                      Integer:
                        - U32
                        - "1"
                        - line_start: 22
                          line_stop: 22
                          col_start: 12
                          col_stop: 16
                          path: compiler-test
                          content: "    return 1u32;"
                  span:
                    line_start: 22
                    line_stop: 22
                    col_start: 5
                    col_stop: 16
                    path: compiler-test
                    content: "    return 1u32;"
            span:
              line_start: 21
              line_stop: 23
              col_start: 23
              col_stop: 2
              path: compiler-test
              content: "function uno() -> u32 {\n...\n}"
          span:
            line_start: 21
            line_stop: 23
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function uno() -> u32 {\n...\n}"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":25,\\\"line_stop\\\":25,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":25,\\\"line_stop\\\":25,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":25,\\\"line_stop\\\":25,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 25
                  line_stop: 25
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: u32) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":26,\\\"line_stop\\\":26,\\\"col_start\\\":10,\\\"col_stop\\\":11,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let (x, y) = (1u32, 2u32);\\\"}\"}"
                      span:
                        line_start: 26
                        line_stop: 26
                        col_start: 10
                        col_stop: 11
                        path: compiler-test
                        content: "    let (x, y) = (1u32, 2u32);"
                    - mutable: true
                      identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":26,\\\"line_stop\\\":26,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let (x, y) = (1u32, 2u32);\\\"}\"}"
                      span:
                        line_start: 26
                        line_stop: 26
                        col_start: 13
                        col_stop: 14
                        path: compiler-test
                        content: "    let (x, y) = (1u32, 2u32);"
                  type_: ~
                  value:
                    TupleInit:
                      elements:
                        - Value:
                            Integer:
                              - U32
                              - "1"
                              - line_start: 26
                                line_stop: 26
                                col_start: 19
                                col_stop: 23
                                path: compiler-test
                                content: "    let (x, y) = (1u32, 2u32);"
                        - Value:
                            Integer:
                              - U32
                              - "2"
                              - line_start: 26
                                line_stop: 26
                                col_start: 25
                                col_stop: 29
                                path: compiler-test
                                content: "    let (x, y) = (1u32, 2u32);"
                      span:
                        line_start: 26
                        line_stop: 26
                        col_start: 18
                        col_stop: 30
                        path: compiler-test
                        content: "    let (x, y) = (1u32, 2u32);"
                  span:
                    line_start: 26
                    line_stop: 26
                    col_start: 5
                    col_stop: 30
                    path: compiler-test
                    content: "    let (x, y) = (1u32, 2u32);"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Binary:
                              left:
                                Binary:
                                  left:
                                    Binary:
                                      left:
                                        Binary:
                                          left:
                                            Binary:
                                              left:
                                                Binary:
                                                  left:
                                                    Binary:
                                                      left:
                                                        Binary:
                                                          left:
                                                            Binary:
                                                              left:
                                                                Binary:
                                                                  left:
                                                                    Binary:
                                                                      left:
                                                                        Binary:
                                                                          left:
                                                                            Binary:
                                                                              left:
                                                                                Binary:
                                                                                  left:
                                                                                    Binary:
                                                                                      left:
                                                                                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":28,\\\"line_stop\\\":28,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == basic\\\"}\"}"
                                                                                      right:
                                                                                        Identifier: "{\"name\":\"basic\",\"span\":\"{\\\"line_start\\\":28,\\\"line_stop\\\":28,\\\"col_start\\\":17,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == basic\\\"}\"}"
                                                                                      op: Eq
                                                                                      span:
                                                                                        line_start: 28
                                                                                        line_stop: 28
                                                                                        col_start: 12
                                                                                        col_stop: 22
                                                                                        path: compiler-test
                                                                                        content: "    return a == basic"
                                                                                  right:
                                                                                    Binary:
                                                                                      left:
                                                                                        Identifier: "{\"name\":\"basic\",\"span\":\"{\\\"line_start\\\":29,\\\"line_stop\\\":29,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && basic == 8u32\\\"}\"}"
                                                                                      right:
                                                                                        Value:
                                                                                          Integer:
                                                                                            - U32
                                                                                            - "8"
                                                                                            - line_start: 29
                                                                                              line_stop: 29
                                                                                              col_start: 21
                                                                                              col_stop: 25
                                                                                              path: compiler-test
                                                                                              content: "        && basic == 8u32"
                                                                                      op: Eq
                                                                                      span:
                                                                                        line_start: 29
                                                                                        line_stop: 29
                                                                                        col_start: 12
                                                                                        col_stop: 25
                                                                                        path: compiler-test
                                                                                        content: "        && basic == 8u32"
                                                                                  op: And
                                                                                  span:
                                                                                    line_start: 28
                                                                                    line_stop: 29
                                                                                    col_start: 12
                                                                                    col_stop: 25
                                                                                    path: compiler-test
                                                                                    content: "    return a == basic\n        && basic == 8u32"
                                                                              right:
                                                                                Binary:
                                                                                  left:
                                                                                    ArrayAccess:
                                                                                      array:
                                                                                        ArrayAccess:
                                                                                          array:
                                                                                            Identifier: "{\"name\":\"array\",\"span\":\"{\\\"line_start\\\":30,\\\"line_stop\\\":30,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && array[0][0] == 0 // arrays\\\"}\"}"
                                                                                          index:
                                                                                            Value:
                                                                                              Implicit:
                                                                                                - "0"
                                                                                                - line_start: 30
                                                                                                  line_stop: 30
                                                                                                  col_start: 18
                                                                                                  col_stop: 19
                                                                                                  path: compiler-test
                                                                                                  content: "        && array[0][0] == 0 // arrays"
                                                                                          span:
                                                                                            line_start: 30
                                                                                            line_stop: 30
                                                                                            col_start: 12
                                                                                            col_stop: 20
                                                                                            path: compiler-test
                                                                                            content: "        && array[0][0] == 0 // arrays"
                                                                                      index:
                                                                                        Value:
                                                                                          Implicit:
                                                                                            - "0"
                                                                                            - line_start: 30
                                                                                              line_stop: 30
                                                                                              col_start: 21
                                                                                              col_stop: 22
                                                                                              path: compiler-test
                                                                                              content: "        && array[0][0] == 0 // arrays"
                                                                                      span:
                                                                                        line_start: 30
                                                                                        line_stop: 30
                                                                                        col_start: 12
                                                                                        col_stop: 23
                                                                                        path: compiler-test
                                                                                        content: "        && array[0][0] == 0 // arrays"
                                                                                  right:
                                                                                    Value:
                                                                                      Implicit:
                                                                                        - "0"
                                                                                        - line_start: 30
                                                                                          line_stop: 30
                                                                                          col_start: 27
                                                                                          col_stop: 28
                                                                                          path: compiler-test
                                                                                          content: "        && array[0][0] == 0 // arrays"
                                                                                  op: Eq
                                                                                  span:
                                                                                    line_start: 30
                                                                                    line_stop: 30
                                                                                    col_start: 12
                                                                                    col_stop: 28
                                                                                    path: compiler-test
                                                                                    content: "        && array[0][0] == 0 // arrays"
                                                                              op: And
                                                                              span:
                                                                                line_start: 28
                                                                                line_stop: 30
                                                                                col_start: 12
                                                                                col_stop: 28
                                                                                path: compiler-test
                                                                                content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays"
                                                                          right:
                                                                            Binary:
                                                                              left:
                                                                                ArrayAccess:
                                                                                  array:
                                                                                    ArrayAccess:
                                                                                      array:
                                                                                        Identifier: "{\"name\":\"array\",\"span\":\"{\\\"line_start\\\":31,\\\"line_stop\\\":31,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && array[2][1] == 0\\\"}\"}"
                                                                                      index:
                                                                                        Value:
                                                                                          Implicit:
                                                                                            - "2"
                                                                                            - line_start: 31
                                                                                              line_stop: 31
                                                                                              col_start: 18
                                                                                              col_stop: 19
                                                                                              path: compiler-test
                                                                                              content: "        && array[2][1] == 0"
                                                                                      span:
                                                                                        line_start: 31
                                                                                        line_stop: 31
                                                                                        col_start: 12
                                                                                        col_stop: 20
                                                                                        path: compiler-test
                                                                                        content: "        && array[2][1] == 0"
                                                                                  index:
                                                                                    Value:
                                                                                      Implicit:
                                                                                        - "1"
                                                                                        - line_start: 31
                                                                                          line_stop: 31
                                                                                          col_start: 21
                                                                                          col_stop: 22
                                                                                          path: compiler-test
                                                                                          content: "        && array[2][1] == 0"
                                                                                  span:
                                                                                    line_start: 31
                                                                                    line_stop: 31
                                                                                    col_start: 12
                                                                                    col_stop: 23
                                                                                    path: compiler-test
                                                                                    content: "        && array[2][1] == 0"
                                                                              right:
                                                                                Value:
                                                                                  Implicit:
                                                                                    - "0"
                                                                                    - line_start: 31
                                                                                      line_stop: 31
                                                                                      col_start: 27
                                                                                      col_stop: 28
                                                                                      path: compiler-test
                                                                                      content: "        && array[2][1] == 0"
                                                                              op: Eq
                                                                              span:
                                                                                line_start: 31
                                                                                line_stop: 31
                                                                                col_start: 12
                                                                                col_stop: 28
                                                                                path: compiler-test
                                                                                content: "        && array[2][1] == 0"
                                                                          op: And
                                                                          span:
                                                                            line_start: 28
                                                                            line_stop: 31
                                                                            col_start: 12
                                                                            col_stop: 28
                                                                            path: compiler-test
                                                                            content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0"
                                                                      right:
                                                                        Binary:
                                                                          left:
                                                                            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":32,\\\"line_stop\\\":32,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && x == 1u32 // tuple test\\\"}\"}"
                                                                          right:
                                                                            Value:
                                                                              Integer:
                                                                                - U32
                                                                                - "1"
                                                                                - line_start: 32
                                                                                  line_stop: 32
                                                                                  col_start: 17
                                                                                  col_stop: 21
                                                                                  path: compiler-test
                                                                                  content: "        && x == 1u32 // tuple test"
                                                                          op: Eq
                                                                          span:
                                                                            line_start: 32
                                                                            line_stop: 32
                                                                            col_start: 12
                                                                            col_stop: 21
                                                                            path: compiler-test
                                                                            content: "        && x == 1u32 // tuple test"
                                                                      op: And
                                                                      span:
                                                                        line_start: 28
                                                                        line_stop: 32
                                                                        col_start: 12
                                                                        col_stop: 21
                                                                        path: compiler-test
                                                                        content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test"
                                                                  right:
                                                                    Binary:
                                                                      left:
                                                                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":33,\\\"line_stop\\\":33,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && y == 2u32 \\\"}\"}"
                                                                      right:
                                                                        Value:
                                                                          Integer:
                                                                            - U32
                                                                            - "2"
                                                                            - line_start: 33
                                                                              line_stop: 33
                                                                              col_start: 17
                                                                              col_stop: 21
                                                                              path: compiler-test
                                                                              content: "        && y == 2u32 "
                                                                      op: Eq
                                                                      span:
                                                                        line_start: 33
                                                                        line_stop: 33
                                                                        col_start: 12
                                                                        col_stop: 21
                                                                        path: compiler-test
                                                                        content: "        && y == 2u32 "
                                                                  op: And
                                                                  span:
                                                                    line_start: 28
                                                                    line_stop: 33
                                                                    col_start: 12
                                                                    col_stop: 21
                                                                    path: compiler-test
                                                                    content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 "
                                                              right:
                                                                Binary:
                                                                  left:
                                                                    Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":34,\\\"line_stop\\\":34,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && a == 1u32 // tuple extraction test\\\"}\"}"
                                                                  right:
                                                                    Value:
                                                                      Integer:
                                                                        - U32
                                                                        - "1"
                                                                        - line_start: 34
                                                                          line_stop: 34
                                                                          col_start: 17
                                                                          col_stop: 21
                                                                          path: compiler-test
                                                                          content: "        && a == 1u32 // tuple extraction test"
                                                                  op: Eq
                                                                  span:
                                                                    line_start: 34
                                                                    line_stop: 34
                                                                    col_start: 12
                                                                    col_stop: 21
                                                                    path: compiler-test
                                                                    content: "        && a == 1u32 // tuple extraction test"
                                                              op: And
                                                              span:
                                                                line_start: 28
                                                                line_stop: 34
                                                                col_start: 12
                                                                col_stop: 21
                                                                path: compiler-test
                                                                content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test"
                                                          right:
                                                            Binary:
                                                              left:
                                                                Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":35,\\\"line_stop\\\":35,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && b == 2u32\\\"}\"}"
                                                              right:
                                                                Value:
                                                                  Integer:
                                                                    - U32
                                                                    - "2"
                                                                    - line_start: 35
                                                                      line_stop: 35
                                                                      col_start: 17
                                                                      col_stop: 21
                                                                      path: compiler-test
                                                                      content: "        && b == 2u32"
                                                              op: Eq
                                                              span:
                                                                line_start: 35
                                                                line_stop: 35
                                                                col_start: 12
                                                                col_stop: 21
                                                                path: compiler-test
                                                                content: "        && b == 2u32"
                                                          op: And
                                                          span:
                                                            line_start: 28
                                                            line_stop: 35
                                                            col_start: 12
                                                            col_stop: 21
                                                            path: compiler-test
                                                            content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32"
                                                      right:
                                                        Binary:
                                                          left:
                                                            Identifier: "{\"name\":\"simple_group\",\"span\":\"{\\\"line_start\\\":36,\\\"line_stop\\\":36,\\\"col_start\\\":12,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && simple_group == 1group // group test\\\"}\"}"
                                                          right:
                                                            Value:
                                                              Group:
                                                                Single:
                                                                  - "1"
                                                                  - line_start: 36
                                                                    line_stop: 36
                                                                    col_start: 28
                                                                    col_stop: 34
                                                                    path: compiler-test
                                                                    content: "        && simple_group == 1group // group test"
                                                          op: Eq
                                                          span:
                                                            line_start: 36
                                                            line_stop: 36
                                                            col_start: 12
                                                            col_stop: 34
                                                            path: compiler-test
                                                            content: "        && simple_group == 1group // group test"
                                                      op: And
                                                      span:
                                                        line_start: 28
                                                        line_stop: 36
                                                        col_start: 12
                                                        col_stop: 34
                                                        path: compiler-test
                                                        content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test"
                                                  right:
                                                    Binary:
                                                      left:
                                                        Identifier: "{\"name\":\"complex_group\",\"span\":\"{\\\"line_start\\\":37,\\\"line_stop\\\":37,\\\"col_start\\\":12,\\\"col_stop\\\":25,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && complex_group == (_, 1)group\\\"}\"}"
                                                      right:
                                                        Value:
                                                          Group:
                                                            Tuple:
                                                              x: Inferred
                                                              y:
                                                                Number:
                                                                  - "1"
                                                                  - line_start: 37
                                                                    line_stop: 37
                                                                    col_start: 33
                                                                    col_stop: 34
                                                                    path: compiler-test
                                                                    content: "        && complex_group == (_, 1)group"
                                                              span:
                                                                line_start: 37
                                                                line_stop: 37
                                                                col_start: 30
                                                                col_stop: 40
                                                                path: compiler-test
                                                                content: "        && complex_group == (_, 1)group"
                                                      op: Eq
                                                      span:
                                                        line_start: 37
                                                        line_stop: 37
                                                        col_start: 12
                                                        col_stop: 40
                                                        path: compiler-test
                                                        content: "        && complex_group == (_, 1)group"
                                                  op: And
                                                  span:
                                                    line_start: 28
                                                    line_stop: 37
                                                    col_start: 12
                                                    col_stop: 40
                                                    path: compiler-test
                                                    content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group"
                                              right:
                                                Binary:
                                                  left:
                                                    Identifier: "{\"name\":\"field_test\",\"span\":\"{\\\"line_start\\\":38,\\\"line_stop\\\":38,\\\"col_start\\\":12,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && field_test == 2field // field test\\\"}\"}"
                                                  right:
                                                    Value:
                                                      Field:
                                                        - "2"
                                                        - line_start: 38
                                                          line_stop: 38
                                                          col_start: 26
                                                          col_stop: 32
                                                          path: compiler-test
                                                          content: "        && field_test == 2field // field test"
                                                  op: Eq
                                                  span:
                                                    line_start: 38
                                                    line_stop: 38
                                                    col_start: 12
                                                    col_stop: 32
                                                    path: compiler-test
                                                    content: "        && field_test == 2field // field test"
                                              op: And
                                              span:
                                                line_start: 28
                                                line_stop: 38
                                                col_start: 12
                                                col_stop: 32
                                                path: compiler-test
                                                content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test"
                                          right:
                                            Binary:
                                              left:
                                                Identifier: "{\"name\":\"use_another_const\",\"span\":\"{\\\"line_start\\\":39,\\\"line_stop\\\":39,\\\"col_start\\\":12,\\\"col_stop\\\":29,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && use_another_const == 9u32 // use another const test\\\"}\"}"
                                              right:
                                                Value:
                                                  Integer:
                                                    - U32
                                                    - "9"
                                                    - line_start: 39
                                                      line_stop: 39
                                                      col_start: 33
                                                      col_stop: 37
                                                      path: compiler-test
                                                      content: "        && use_another_const == 9u32 // use another const test"
                                              op: Eq
                                              span:
                                                line_start: 39
                                                line_stop: 39
                                                col_start: 12
                                                col_stop: 37
                                                path: compiler-test
                                                content: "        && use_another_const == 9u32 // use another const test"
                                          op: And
                                          span:
                                            line_start: 28
                                            line_stop: 39
                                            col_start: 12
                                            col_stop: 37
                                            path: compiler-test
                                            content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test"
                                      right:
                                        Binary:
                                          left:
                                            CircuitMemberAccess:
                                              circuit:
                                                Identifier: "{\"name\":\"foo\",\"span\":\"{\\\"line_start\\\":40,\\\"line_stop\\\":40,\\\"col_start\\\":12,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && foo.width == 10u32 // circuit test\\\"}\"}"
                                              name: "{\"name\":\"width\",\"span\":\"{\\\"line_start\\\":40,\\\"line_stop\\\":40,\\\"col_start\\\":16,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && foo.width == 10u32 // circuit test\\\"}\"}"
                                              span:
                                                line_start: 40
                                                line_stop: 40
                                                col_start: 12
                                                col_stop: 21
                                                path: compiler-test
                                                content: "        && foo.width == 10u32 // circuit test"
                                          right:
                                            Value:
                                              Integer:
                                                - U32
                                                - "10"
                                                - line_start: 40
                                                  line_stop: 40
                                                  col_start: 25
                                                  col_stop: 30
                                                  path: compiler-test
                                                  content: "        && foo.width == 10u32 // circuit test"
                                          op: Eq
                                          span:
                                            line_start: 40
                                            line_stop: 40
                                            col_start: 12
                                            col_stop: 30
                                            path: compiler-test
                                            content: "        && foo.width == 10u32 // circuit test"
                                      op: And
                                      span:
                                        line_start: 28
                                        line_stop: 40
                                        col_start: 12
                                        col_stop: 30
                                        path: compiler-test
                                        content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test\n        && foo.width == 10u32 // circuit test"
                                  right:
                                    Binary:
                                      left:
                                        CircuitMemberAccess:
                                          circuit:
                                            Identifier: "{\"name\":\"foo\",\"span\":\"{\\\"line_start\\\":41,\\\"line_stop\\\":41,\\\"col_start\\\":12,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && foo.height == 20u32\\\"}\"}"
                                          name: "{\"name\":\"height\",\"span\":\"{\\\"line_start\\\":41,\\\"line_stop\\\":41,\\\"col_start\\\":16,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && foo.height == 20u32\\\"}\"}"
                                          span:
                                            line_start: 41
                                            line_stop: 41
                                            col_start: 12
                                            col_stop: 22
                                            path: compiler-test
                                            content: "        && foo.height == 20u32"
                                      right:
                                        Value:
                                          Integer:
                                            - U32
                                            - "20"
                                            - line_start: 41
                                              line_stop: 41
                                              col_start: 26
                                              col_stop: 31
                                              path: compiler-test
                                              content: "        && foo.height == 20u32"
                                      op: Eq
                                      span:
                                        line_start: 41
                                        line_stop: 41
                                        col_start: 12
                                        col_stop: 31
                                        path: compiler-test
                                        content: "        && foo.height == 20u32"
                                  op: And
                                  span:
                                    line_start: 28
                                    line_stop: 41
                                    col_start: 12
                                    col_stop: 31
                                    path: compiler-test
                                    content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test\n        && foo.width == 10u32 // circuit test\n        && foo.height == 20u32"
                              right:
                                Binary:
                                  left:
                                    Identifier: "{\"name\":\"uno\",\"span\":\"{\\\"line_start\\\":42,\\\"line_stop\\\":42,\\\"col_start\\\":12,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && uno == 1u32 // function test\\\"}\"}"
                                  right:
                                    Value:
                                      Integer:
                                        - U32
                                        - "1"
                                        - line_start: 42
                                          line_stop: 42
                                          col_start: 19
                                          col_stop: 23
                                          path: compiler-test
                                          content: "        && uno == 1u32 // function test"
                                  op: Eq
                                  span:
                                    line_start: 42
                                    line_stop: 42
                                    col_start: 12
                                    col_stop: 23
                                    path: compiler-test
                                    content: "        && uno == 1u32 // function test"
                              op: And
                              span:
                                line_start: 28
                                line_stop: 42
                                col_start: 12
                                col_stop: 23
                                path: compiler-test
                                content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test\n        && foo.width == 10u32 // circuit test\n        && foo.height == 20u32\n        && uno == 1u32 // function test"
                          right:
                            Binary:
                              left:
                                Identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":43,\\\"line_stop\\\":43,\\\"col_start\\\":12,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && character == 'a' // char test\\\"}\"}"
                              right:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 97
                                    span:
                                      line_start: 43
                                      line_stop: 43
                                      col_start: 25
                                      col_stop: 28
                                      path: compiler-test
                                      content: "        && character == 'a' // char test"
                              op: Eq
                              span:
                                line_start: 43
                                line_stop: 43
                                col_start: 12
                                col_stop: 28
                                path: compiler-test
                                content: "        && character == 'a' // char test"
                          op: And
                          span:
                            line_start: 28
                            line_stop: 43
                            col_start: 12
                            col_stop: 28
                            path: compiler-test
                            content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test\n        && foo.width == 10u32 // circuit test\n        && foo.height == 20u32\n        && uno == 1u32 // function test\n        && character == 'a' // char test"
                      right:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"hello\",\"span\":\"{\\\"line_start\\\":44,\\\"line_stop\\\":44,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && hello == \\\\\\\"Hello, World!\\\\\\\";\\\"}\"}"
                          right:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 72
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 22
                                          col_stop: 23
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 101
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 23
                                          col_stop: 24
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 108
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 24
                                          col_stop: 25
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 108
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 25
                                          col_stop: 26
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 111
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 26
                                          col_stop: 27
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 44
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 27
                                          col_stop: 28
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 32
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 28
                                          col_stop: 29
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 87
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 29
                                          col_stop: 30
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 111
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 30
                                          col_stop: 31
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 114
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 31
                                          col_stop: 32
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 108
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 32
                                          col_stop: 33
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 100
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 33
                                          col_stop: 34
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 33
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 34
                                          col_stop: 35
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                              span:
                                line_start: 44
                                line_stop: 44
                                col_start: 21
                                col_stop: 36
                                path: compiler-test
                                content: "        && hello == \"Hello, World!\";"
                          op: Eq
                          span:
                            line_start: 44
                            line_stop: 44
                            col_start: 12
                            col_stop: 36
                            path: compiler-test
                            content: "        && hello == \"Hello, World!\";"
                      op: And
                      span:
                        line_start: 28
                        line_stop: 44
                        col_start: 12
                        col_stop: 36
                        path: compiler-test
                        content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test\n        && foo.width == 10u32 // circuit test\n        && foo.height == 20u32\n        && uno == 1u32 // function test\n        && character == 'a' // char test\n        && hello == \"Hello, World!\";"
                  span:
                    line_start: 28
                    line_stop: 44
                    col_start: 5
                    col_stop: 36
                    path: compiler-test
                    content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test\n        && foo.width == 10u32 // circuit test\n        && foo.height == 20u32\n        && uno == 1u32 // function test\n        && character == 'a' // char test\n        && hello == \"Hello, World!\";"
            span:
              line_start: 25
              line_stop: 45
              col_start: 31
              col_stop: 2
              path: compiler-test
              content: "function main(a: u32) -> bool {\n...\n}"
          span:
            line_start: 25
            line_stop: 45
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: u32) -> bool {\n...\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"width\",\"span\":\"{\\\"line_start\\\":17,\\\"line_stop\\\":17,\\\"col_start\\\":5,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    width: u32,\\\"}\"}"
                - IntegerType: U32
            - CircuitVariable:
                - "{\"name\":\"height\",\"span\":\"{\\\"line_start\\\":18,\\\"line_stop\\\":18,\\\"col_start\\\":5,\\\"col_stop\\\":11,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    height: u32,\\\"}\"}"
                - IntegerType: U32
      global_consts:
        basic:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"basic\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":7,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const basic: u32 = 8;\\\"}\"}"
              span:
                line_start: 3
                line_stop: 3
                col_start: 7
                col_stop: 12
                path: compiler-test
                content: "const basic: u32 = 8;"
          type_:
            IntegerType: U32
          value:
            Value:
              Integer:
                - U32
                - "8"
                - line_start: 3
                  line_stop: 3
                  col_start: 20
                  col_stop: 21
                  path: compiler-test
                  content: "const basic: u32 = 8;"
          span:
            line_start: 3
            line_stop: 3
            col_start: 1
            col_stop: 21
            path: compiler-test
            content: "const basic: u32 = 8;"
        array:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"array\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":7,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const array: [u8; (3, 2)] = [[0u8; 2]; 3];\\\"}\"}"
              span:
                line_start: 4
                line_stop: 4
                col_start: 7
                col_stop: 12
                path: compiler-test
                content: "const array: [u8; (3, 2)] = [[0u8; 2]; 3];"
          type_:
            Array:
              - Array:
                  - IntegerType: U8
                  - - value: "2"
              - - value: "3"
          value:
            ArrayInit:
              element:
                ArrayInit:
                  element:
                    Value:
                      Integer:
                        - U8
                        - "0"
                        - line_start: 4
                          line_stop: 4
                          col_start: 31
                          col_stop: 34
                          path: compiler-test
                          content: "const array: [u8; (3, 2)] = [[0u8; 2]; 3];"
                  dimensions:
                    - value: "2"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 30
                    col_stop: 38
                    path: compiler-test
                    content: "const array: [u8; (3, 2)] = [[0u8; 2]; 3];"
              dimensions:
                - value: "3"
              span:
                line_start: 4
                line_stop: 4
                col_start: 29
                col_stop: 42
                path: compiler-test
                content: "const array: [u8; (3, 2)] = [[0u8; 2]; 3];"
          span:
            line_start: 4
            line_stop: 4
            col_start: 1
            col_stop: 42
            path: compiler-test
            content: "const array: [u8; (3, 2)] = [[0u8; 2]; 3];"
        tuple:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"tuple\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":7,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const tuple = (1u32, 2u32);\\\"}\"}"
              span:
                line_start: 5
                line_stop: 5
                col_start: 7
                col_stop: 12
                path: compiler-test
                content: "const tuple = (1u32, 2u32);"
          type_:
            Tuple:
              - IntegerType: U32
              - IntegerType: U32
          value:
            TupleInit:
              elements:
                - Value:
                    Integer:
                      - U32
                      - "1"
                      - line_start: 5
                        line_stop: 5
                        col_start: 16
                        col_stop: 20
                        path: compiler-test
                        content: "const tuple = (1u32, 2u32);"
                - Value:
                    Integer:
                      - U32
                      - "2"
                      - line_start: 5
                        line_stop: 5
                        col_start: 22
                        col_stop: 26
                        path: compiler-test
                        content: "const tuple = (1u32, 2u32);"
              span:
                line_start: 5
                line_stop: 5
                col_start: 15
                col_stop: 27
                path: compiler-test
                content: "const tuple = (1u32, 2u32);"
          span:
            line_start: 5
            line_stop: 5
            col_start: 1
            col_stop: 27
            path: compiler-test
            content: "const tuple = (1u32, 2u32);"
        "a,b":
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":8,\\\"col_stop\\\":9,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const (a, b) = (1u32, 2u32);\\\"}\"}"
              span:
                line_start: 6
                line_stop: 6
                col_start: 8
                col_stop: 9
                path: compiler-test
                content: "const (a, b) = (1u32, 2u32);"
            - mutable: false
              identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const (a, b) = (1u32, 2u32);\\\"}\"}"
              span:
                line_start: 6
                line_stop: 6
                col_start: 11
                col_stop: 12
                path: compiler-test
                content: "const (a, b) = (1u32, 2u32);"
          type_:
            Tuple:
              - IntegerType: U32
              - IntegerType: U32
          value:
            TupleInit:
              elements:
                - Value:
                    Integer:
                      - U32
                      - "1"
                      - line_start: 6
                        line_stop: 6
                        col_start: 17
                        col_stop: 21
                        path: compiler-test
                        content: "const (a, b) = (1u32, 2u32);"
                - Value:
                    Integer:
                      - U32
                      - "2"
                      - line_start: 6
                        line_stop: 6
                        col_start: 23
                        col_stop: 27
                        path: compiler-test
                        content: "const (a, b) = (1u32, 2u32);"
              span:
                line_start: 6
                line_stop: 6
                col_start: 16
                col_stop: 28
                path: compiler-test
                content: "const (a, b) = (1u32, 2u32);"
          span:
            line_start: 6
            line_stop: 6
            col_start: 1
            col_stop: 28
            path: compiler-test
            content: "const (a, b) = (1u32, 2u32);"
        simple_group:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"simple_group\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":7,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const simple_group: group = 1group;\\\"}\"}"
              span:
                line_start: 7
                line_stop: 7
                col_start: 7
                col_stop: 19
                path: compiler-test
                content: "const simple_group: group = 1group;"
          type_: Group
          value:
            Value:
              Group:
                Single:
                  - "1"
                  - line_start: 7
                    line_stop: 7
                    col_start: 29
                    col_stop: 35
                    path: compiler-test
                    content: "const simple_group: group = 1group;"
          span:
            line_start: 7
            line_stop: 7
            col_start: 1
            col_stop: 35
            path: compiler-test
            content: "const simple_group: group = 1group;"
        complex_group:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"complex_group\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":7,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const complex_group = (_, 1)group;\\\"}\"}"
              span:
                line_start: 8
                line_stop: 8
                col_start: 7
                col_stop: 20
                path: compiler-test
                content: "const complex_group = (_, 1)group;"
          type_: Group
          value:
            Value:
              Group:
                Tuple:
                  x: Inferred
                  y:
                    Number:
                      - "1"
                      - line_start: 8
                        line_stop: 8
                        col_start: 27
                        col_stop: 28
                        path: compiler-test
                        content: "const complex_group = (_, 1)group;"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 24
                    col_stop: 34
                    path: compiler-test
                    content: "const complex_group = (_, 1)group;"
          span:
            line_start: 8
            line_stop: 8
            col_start: 1
            col_stop: 34
            path: compiler-test
            content: "const complex_group = (_, 1)group;"
        field_test:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"field_test\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":7,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const field_test: field = 2;\\\"}\"}"
              span:
                line_start: 9
                line_stop: 9
                col_start: 7
                col_stop: 17
                path: compiler-test
                content: "const field_test: field = 2;"
          type_: Field
          value:
            Value:
              Field:
                - "2"
                - line_start: 9
                  line_stop: 9
                  col_start: 27
                  col_stop: 28
                  path: compiler-test
                  content: "const field_test: field = 2;"
          span:
            line_start: 9
            line_stop: 9
            col_start: 1
            col_stop: 28
            path: compiler-test
            content: "const field_test: field = 2;"
        use_another_const:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"use_another_const\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":7,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const use_another_const = basic + 1;\\\"}\"}"
              span:
                line_start: 10
                line_stop: 10
                col_start: 7
                col_stop: 24
                path: compiler-test
                content: const use_another_const = basic + 1;
          type_:
            IntegerType: U32
          value:
            Binary:
              left:
                Identifier: "{\"name\":\"basic\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":27,\\\"col_stop\\\":32,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const use_another_const = basic + 1;\\\"}\"}"
              right:
                Value:
                  Integer:
                    - U32
                    - "1"
                    - line_start: 10
                      line_stop: 10
                      col_start: 35
                      col_stop: 36
                      path: compiler-test
                      content: const use_another_const = basic + 1;
              op: Add
              span:
                line_start: 10
                line_stop: 10
                col_start: 27
                col_stop: 36
                path: compiler-test
                content: const use_another_const = basic + 1;
          span:
            line_start: 10
            line_stop: 10
            col_start: 1
            col_stop: 36
            path: compiler-test
            content: const use_another_const = basic + 1;
        foo:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"foo\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":7,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const foo = Foo { width: 10, height: 20 };\\\"}\"}"
              span:
                line_start: 11
                line_stop: 11
                col_start: 7
                col_stop: 10
                path: compiler-test
                content: "const foo = Foo { width: 10, height: 20 };"
          type_:
            Circuit: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
          value:
            CircuitInit:
              name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":13,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const foo = Foo { width: 10, height: 20 };\\\"}\"}"
              members:
                - identifier: "{\"name\":\"width\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":19,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const foo = Foo { width: 10, height: 20 };\\\"}\"}"
                  expression:
                    Value:
                      Integer:
                        - U32
                        - "10"
                        - line_start: 11
                          line_stop: 11
                          col_start: 26
                          col_stop: 28
                          path: compiler-test
                          content: "const foo = Foo { width: 10, height: 20 };"
                - identifier: "{\"name\":\"height\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":30,\\\"col_stop\\\":36,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const foo = Foo { width: 10, height: 20 };\\\"}\"}"
                  expression:
                    Value:
                      Integer:
                        - U32
                        - "20"
                        - line_start: 11
                          line_stop: 11
                          col_start: 38
                          col_stop: 40
                          path: compiler-test
                          content: "const foo = Foo { width: 10, height: 20 };"
              span:
                line_start: 11
                line_stop: 11
                col_start: 13
                col_stop: 42
                path: compiler-test
                content: "const foo = Foo { width: 10, height: 20 };"
          span:
            line_start: 11
            line_stop: 11
            col_start: 1
            col_stop: 42
            path: compiler-test
            content: "const foo = Foo { width: 10, height: 20 };"
        uno:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"uno\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":7,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const uno = uno();\\\"}\"}"
              span:
                line_start: 12
                line_stop: 12
                col_start: 7
                col_stop: 10
                path: compiler-test
                content: const uno = uno();
          type_:
            IntegerType: U32
          value:
            Call:
              function:
                Identifier: "{\"name\":\"uno\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":13,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const uno = uno();\\\"}\"}"
              arguments: []
              span:
                line_start: 12
                line_stop: 12
                col_start: 13
                col_stop: 18
                path: compiler-test
                content: const uno = uno();
          span:
            line_start: 12
            line_stop: 12
            col_start: 1
            col_stop: 18
            path: compiler-test
            content: const uno = uno();
        character:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":7,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const character = 'a';\\\"}\"}"
              span:
                line_start: 13
                line_stop: 13
                col_start: 7
                col_stop: 16
                path: compiler-test
                content: "const character = 'a';"
          type_: Char
          value:
            Value:
              Char:
                character:
                  Scalar: 97
                span:
                  line_start: 13
                  line_stop: 13
                  col_start: 19
                  col_stop: 22
                  path: compiler-test
                  content: "const character = 'a';"
          span:
            line_start: 13
            line_stop: 13
            col_start: 1
            col_stop: 22
            path: compiler-test
            content: "const character = 'a';"
        hello:
          declaration_type: Const
          variable_names:
            - mutable: false
              identifier: "{\"name\":\"hello\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":7,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"const hello = \\\\\\\"Hello, World!\\\\\\\";\\\"}\"}"
              span:
                line_start: 14
                line_stop: 14
                col_start: 7
                col_stop: 12
                path: compiler-test
                content: "const hello = \"Hello, World!\";"
          type_:
            Array:
              - Char
              - - value: "13"
          value:
            ArrayInline:
              elements:
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 72
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 16
                          col_stop: 17
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 101
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 17
                          col_stop: 18
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 108
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 18
                          col_stop: 19
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 108
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 19
                          col_stop: 20
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 111
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 20
                          col_stop: 21
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 44
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 21
                          col_stop: 22
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 32
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 22
                          col_stop: 23
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 87
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 23
                          col_stop: 24
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 111
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 24
                          col_stop: 25
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 114
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 25
                          col_stop: 26
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 108
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 26
                          col_stop: 27
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 100
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 27
                          col_stop: 28
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
                - Expression:
                    Value:
                      Char:
                        character:
                          Scalar: 33
                        span:
                          line_start: 14
                          line_stop: 14
                          col_start: 28
                          col_stop: 29
                          path: compiler-test
                          content: "const hello = \"Hello, World!\";"
              span:
                line_start: 14
                line_stop: 14
                col_start: 15
                col_stop: 30
                path: compiler-test
                content: "const hello = \"Hello, World!\";"
          span:
            line_start: 14
            line_stop: 14
            col_start: 1
            col_stop: 30
            path: compiler-test
            content: "const hello = \"Hello, World!\";"
      functions:
        "{\"name\":\"uno\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":10,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function uno() -> u32 {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"uno\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":10,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function uno() -> u32 {\\\"}\"}"
          input: []
          output:
            IntegerType: U32
          block:
            statements:
              - Return:
                  expression:
                    Value:
                      Integer:
                        - U32
                        - "1"
                        - line_start: 22
                          line_stop: 22
                          col_start: 12
                          col_stop: 16
                          path: compiler-test
                          content: "    return 1u32;"
                  span:
                    line_start: 22
                    line_stop: 22
                    col_start: 5
                    col_stop: 16
                    path: compiler-test
                    content: "    return 1u32;"
            span:
              line_start: 21
              line_stop: 23
              col_start: 23
              col_stop: 2
              path: compiler-test
              content: "function uno() -> u32 {\n...\n}"
          span:
            line_start: 21
            line_stop: 23
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function uno() -> u32 {\n...\n}"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":25,\\\"line_stop\\\":25,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":25,\\\"line_stop\\\":25,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":25,\\\"line_stop\\\":25,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 25
                  line_stop: 25
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: u32) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":26,\\\"line_stop\\\":26,\\\"col_start\\\":10,\\\"col_stop\\\":11,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let (x, y) = (1u32, 2u32);\\\"}\"}"
                      span:
                        line_start: 26
                        line_stop: 26
                        col_start: 10
                        col_stop: 11
                        path: compiler-test
                        content: "    let (x, y) = (1u32, 2u32);"
                    - mutable: true
                      identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":26,\\\"line_stop\\\":26,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let (x, y) = (1u32, 2u32);\\\"}\"}"
                      span:
                        line_start: 26
                        line_stop: 26
                        col_start: 13
                        col_stop: 14
                        path: compiler-test
                        content: "    let (x, y) = (1u32, 2u32);"
                  type_:
                    Tuple:
                      - IntegerType: U32
                      - IntegerType: U32
                  value:
                    TupleInit:
                      elements:
                        - Value:
                            Integer:
                              - U32
                              - "1"
                              - line_start: 26
                                line_stop: 26
                                col_start: 19
                                col_stop: 23
                                path: compiler-test
                                content: "    let (x, y) = (1u32, 2u32);"
                        - Value:
                            Integer:
                              - U32
                              - "2"
                              - line_start: 26
                                line_stop: 26
                                col_start: 25
                                col_stop: 29
                                path: compiler-test
                                content: "    let (x, y) = (1u32, 2u32);"
                      span:
                        line_start: 26
                        line_stop: 26
                        col_start: 18
                        col_stop: 30
                        path: compiler-test
                        content: "    let (x, y) = (1u32, 2u32);"
                  span:
                    line_start: 26
                    line_stop: 26
                    col_start: 5
                    col_stop: 30
                    path: compiler-test
                    content: "    let (x, y) = (1u32, 2u32);"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Binary:
                              left:
                                Binary:
                                  left:
                                    Binary:
                                      left:
                                        Binary:
                                          left:
                                            Binary:
                                              left:
                                                Binary:
                                                  left:
                                                    Binary:
                                                      left:
                                                        Binary:
                                                          left:
                                                            Binary:
                                                              left:
                                                                Binary:
                                                                  left:
                                                                    Binary:
                                                                      left:
                                                                        Binary:
                                                                          left:
                                                                            Binary:
                                                                              left:
                                                                                Binary:
                                                                                  left:
                                                                                    Binary:
                                                                                      left:
                                                                                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":28,\\\"line_stop\\\":28,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == basic\\\"}\"}"
                                                                                      right:
                                                                                        Identifier: "{\"name\":\"basic\",\"span\":\"{\\\"line_start\\\":28,\\\"line_stop\\\":28,\\\"col_start\\\":17,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == basic\\\"}\"}"
                                                                                      op: Eq
                                                                                      span:
                                                                                        line_start: 28
                                                                                        line_stop: 28
                                                                                        col_start: 12
                                                                                        col_stop: 22
                                                                                        path: compiler-test
                                                                                        content: "    return a == basic"
                                                                                  right:
                                                                                    Binary:
                                                                                      left:
                                                                                        Identifier: "{\"name\":\"basic\",\"span\":\"{\\\"line_start\\\":29,\\\"line_stop\\\":29,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && basic == 8u32\\\"}\"}"
                                                                                      right:
                                                                                        Value:
                                                                                          Integer:
                                                                                            - U32
                                                                                            - "8"
                                                                                            - line_start: 29
                                                                                              line_stop: 29
                                                                                              col_start: 21
                                                                                              col_stop: 25
                                                                                              path: compiler-test
                                                                                              content: "        && basic == 8u32"
                                                                                      op: Eq
                                                                                      span:
                                                                                        line_start: 29
                                                                                        line_stop: 29
                                                                                        col_start: 12
                                                                                        col_stop: 25
                                                                                        path: compiler-test
                                                                                        content: "        && basic == 8u32"
                                                                                  op: And
                                                                                  span:
                                                                                    line_start: 28
                                                                                    line_stop: 29
                                                                                    col_start: 12
                                                                                    col_stop: 25
                                                                                    path: compiler-test
                                                                                    content: "    return a == basic\n        && basic == 8u32"
                                                                              right:
                                                                                Binary:
                                                                                  left:
                                                                                    ArrayAccess:
                                                                                      array:
                                                                                        ArrayAccess:
                                                                                          array:
                                                                                            Identifier: "{\"name\":\"array\",\"span\":\"{\\\"line_start\\\":30,\\\"line_stop\\\":30,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && array[0][0] == 0 // arrays\\\"}\"}"
                                                                                          index:
                                                                                            Value:
                                                                                              Integer:
                                                                                                - U32
                                                                                                - "0"
                                                                                                - line_start: 30
                                                                                                  line_stop: 30
                                                                                                  col_start: 18
                                                                                                  col_stop: 19
                                                                                                  path: compiler-test
                                                                                                  content: "        && array[0][0] == 0 // arrays"
                                                                                          span:
                                                                                            line_start: 30
                                                                                            line_stop: 30
                                                                                            col_start: 12
                                                                                            col_stop: 20
                                                                                            path: compiler-test
                                                                                            content: "        && array[0][0] == 0 // arrays"
                                                                                      index:
                                                                                        Value:
                                                                                          Integer:
                                                                                            - U32
                                                                                            - "0"
                                                                                            - line_start: 30
                                                                                              line_stop: 30
                                                                                              col_start: 21
                                                                                              col_stop: 22
                                                                                              path: compiler-test
                                                                                              content: "        && array[0][0] == 0 // arrays"
                                                                                      span:
                                                                                        line_start: 30
                                                                                        line_stop: 30
                                                                                        col_start: 12
                                                                                        col_stop: 23
                                                                                        path: compiler-test
                                                                                        content: "        && array[0][0] == 0 // arrays"
                                                                                  right:
                                                                                    Value:
                                                                                      Integer:
                                                                                        - U8
                                                                                        - "0"
                                                                                        - line_start: 30
                                                                                          line_stop: 30
                                                                                          col_start: 27
                                                                                          col_stop: 28
                                                                                          path: compiler-test
                                                                                          content: "        && array[0][0] == 0 // arrays"
                                                                                  op: Eq
                                                                                  span:
                                                                                    line_start: 30
                                                                                    line_stop: 30
                                                                                    col_start: 12
                                                                                    col_stop: 28
                                                                                    path: compiler-test
                                                                                    content: "        && array[0][0] == 0 // arrays"
                                                                              op: And
                                                                              span:
                                                                                line_start: 28
                                                                                line_stop: 30
                                                                                col_start: 12
                                                                                col_stop: 28
                                                                                path: compiler-test
                                                                                content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays"
                                                                          right:
                                                                            Binary:
                                                                              left:
                                                                                ArrayAccess:
                                                                                  array:
                                                                                    ArrayAccess:
                                                                                      array:
                                                                                        Identifier: "{\"name\":\"array\",\"span\":\"{\\\"line_start\\\":31,\\\"line_stop\\\":31,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && array[2][1] == 0\\\"}\"}"
                                                                                      index:
                                                                                        Value:
                                                                                          Integer:
                                                                                            - U32
                                                                                            - "2"
                                                                                            - line_start: 31
                                                                                              line_stop: 31
                                                                                              col_start: 18
                                                                                              col_stop: 19
                                                                                              path: compiler-test
                                                                                              content: "        && array[2][1] == 0"
                                                                                      span:
                                                                                        line_start: 31
                                                                                        line_stop: 31
                                                                                        col_start: 12
                                                                                        col_stop: 20
                                                                                        path: compiler-test
                                                                                        content: "        && array[2][1] == 0"
                                                                                  index:
                                                                                    Value:
                                                                                      Integer:
                                                                                        - U32
                                                                                        - "1"
                                                                                        - line_start: 31
                                                                                          line_stop: 31
                                                                                          col_start: 21
                                                                                          col_stop: 22
                                                                                          path: compiler-test
                                                                                          content: "        && array[2][1] == 0"
                                                                                  span:
                                                                                    line_start: 31
                                                                                    line_stop: 31
                                                                                    col_start: 12
                                                                                    col_stop: 23
                                                                                    path: compiler-test
                                                                                    content: "        && array[2][1] == 0"
                                                                              right:
                                                                                Value:
                                                                                  Integer:
                                                                                    - U8
                                                                                    - "0"
                                                                                    - line_start: 31
                                                                                      line_stop: 31
                                                                                      col_start: 27
                                                                                      col_stop: 28
                                                                                      path: compiler-test
                                                                                      content: "        && array[2][1] == 0"
                                                                              op: Eq
                                                                              span:
                                                                                line_start: 31
                                                                                line_stop: 31
                                                                                col_start: 12
                                                                                col_stop: 28
                                                                                path: compiler-test
                                                                                content: "        && array[2][1] == 0"
                                                                          op: And
                                                                          span:
                                                                            line_start: 28
                                                                            line_stop: 31
                                                                            col_start: 12
                                                                            col_stop: 28
                                                                            path: compiler-test
                                                                            content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0"
                                                                      right:
                                                                        Binary:
                                                                          left:
                                                                            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":32,\\\"line_stop\\\":32,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && x == 1u32 // tuple test\\\"}\"}"
                                                                          right:
                                                                            Value:
                                                                              Integer:
                                                                                - U32
                                                                                - "1"
                                                                                - line_start: 32
                                                                                  line_stop: 32
                                                                                  col_start: 17
                                                                                  col_stop: 21
                                                                                  path: compiler-test
                                                                                  content: "        && x == 1u32 // tuple test"
                                                                          op: Eq
                                                                          span:
                                                                            line_start: 32
                                                                            line_stop: 32
                                                                            col_start: 12
                                                                            col_stop: 21
                                                                            path: compiler-test
                                                                            content: "        && x == 1u32 // tuple test"
                                                                      op: And
                                                                      span:
                                                                        line_start: 28
                                                                        line_stop: 32
                                                                        col_start: 12
                                                                        col_stop: 21
                                                                        path: compiler-test
                                                                        content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test"
                                                                  right:
                                                                    Binary:
                                                                      left:
                                                                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":33,\\\"line_stop\\\":33,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && y == 2u32 \\\"}\"}"
                                                                      right:
                                                                        Value:
                                                                          Integer:
                                                                            - U32
                                                                            - "2"
                                                                            - line_start: 33
                                                                              line_stop: 33
                                                                              col_start: 17
                                                                              col_stop: 21
                                                                              path: compiler-test
                                                                              content: "        && y == 2u32 "
                                                                      op: Eq
                                                                      span:
                                                                        line_start: 33
                                                                        line_stop: 33
                                                                        col_start: 12
                                                                        col_stop: 21
                                                                        path: compiler-test
                                                                        content: "        && y == 2u32 "
                                                                  op: And
                                                                  span:
                                                                    line_start: 28
                                                                    line_stop: 33
                                                                    col_start: 12
                                                                    col_stop: 21
                                                                    path: compiler-test
                                                                    content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 "
                                                              right:
                                                                Binary:
                                                                  left:
                                                                    Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":34,\\\"line_stop\\\":34,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && a == 1u32 // tuple extraction test\\\"}\"}"
                                                                  right:
                                                                    Value:
                                                                      Integer:
                                                                        - U32
                                                                        - "1"
                                                                        - line_start: 34
                                                                          line_stop: 34
                                                                          col_start: 17
                                                                          col_stop: 21
                                                                          path: compiler-test
                                                                          content: "        && a == 1u32 // tuple extraction test"
                                                                  op: Eq
                                                                  span:
                                                                    line_start: 34
                                                                    line_stop: 34
                                                                    col_start: 12
                                                                    col_stop: 21
                                                                    path: compiler-test
                                                                    content: "        && a == 1u32 // tuple extraction test"
                                                              op: And
                                                              span:
                                                                line_start: 28
                                                                line_stop: 34
                                                                col_start: 12
                                                                col_stop: 21
                                                                path: compiler-test
                                                                content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test"
                                                          right:
                                                            Binary:
                                                              left:
                                                                Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":35,\\\"line_stop\\\":35,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && b == 2u32\\\"}\"}"
                                                              right:
                                                                Value:
                                                                  Integer:
                                                                    - U32
                                                                    - "2"
                                                                    - line_start: 35
                                                                      line_stop: 35
                                                                      col_start: 17
                                                                      col_stop: 21
                                                                      path: compiler-test
                                                                      content: "        && b == 2u32"
                                                              op: Eq
                                                              span:
                                                                line_start: 35
                                                                line_stop: 35
                                                                col_start: 12
                                                                col_stop: 21
                                                                path: compiler-test
                                                                content: "        && b == 2u32"
                                                          op: And
                                                          span:
                                                            line_start: 28
                                                            line_stop: 35
                                                            col_start: 12
                                                            col_stop: 21
                                                            path: compiler-test
                                                            content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32"
                                                      right:
                                                        Binary:
                                                          left:
                                                            Identifier: "{\"name\":\"simple_group\",\"span\":\"{\\\"line_start\\\":36,\\\"line_stop\\\":36,\\\"col_start\\\":12,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && simple_group == 1group // group test\\\"}\"}"
                                                          right:
                                                            Value:
                                                              Group:
                                                                Single:
                                                                  - "1"
                                                                  - line_start: 36
                                                                    line_stop: 36
                                                                    col_start: 28
                                                                    col_stop: 34
                                                                    path: compiler-test
                                                                    content: "        && simple_group == 1group // group test"
                                                          op: Eq
                                                          span:
                                                            line_start: 36
                                                            line_stop: 36
                                                            col_start: 12
                                                            col_stop: 34
                                                            path: compiler-test
                                                            content: "        && simple_group == 1group // group test"
                                                      op: And
                                                      span:
                                                        line_start: 28
                                                        line_stop: 36
                                                        col_start: 12
                                                        col_stop: 34
                                                        path: compiler-test
                                                        content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test"
                                                  right:
                                                    Binary:
                                                      left:
                                                        Identifier: "{\"name\":\"complex_group\",\"span\":\"{\\\"line_start\\\":37,\\\"line_stop\\\":37,\\\"col_start\\\":12,\\\"col_stop\\\":25,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && complex_group == (_, 1)group\\\"}\"}"
                                                      right:
                                                        Value:
                                                          Group:
                                                            Tuple:
                                                              x: Inferred
                                                              y:
                                                                Number:
                                                                  - "1"
                                                                  - line_start: 37
                                                                    line_stop: 37
                                                                    col_start: 33
                                                                    col_stop: 34
                                                                    path: compiler-test
                                                                    content: "        && complex_group == (_, 1)group"
                                                              span:
                                                                line_start: 37
                                                                line_stop: 37
                                                                col_start: 30
                                                                col_stop: 40
                                                                path: compiler-test
                                                                content: "        && complex_group == (_, 1)group"
                                                      op: Eq
                                                      span:
                                                        line_start: 37
                                                        line_stop: 37
                                                        col_start: 12
                                                        col_stop: 40
                                                        path: compiler-test
                                                        content: "        && complex_group == (_, 1)group"
                                                  op: And
                                                  span:
                                                    line_start: 28
                                                    line_stop: 37
                                                    col_start: 12
                                                    col_stop: 40
                                                    path: compiler-test
                                                    content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group"
                                              right:
                                                Binary:
                                                  left:
                                                    Identifier: "{\"name\":\"field_test\",\"span\":\"{\\\"line_start\\\":38,\\\"line_stop\\\":38,\\\"col_start\\\":12,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && field_test == 2field // field test\\\"}\"}"
                                                  right:
                                                    Value:
                                                      Field:
                                                        - "2"
                                                        - line_start: 38
                                                          line_stop: 38
                                                          col_start: 26
                                                          col_stop: 32
                                                          path: compiler-test
                                                          content: "        && field_test == 2field // field test"
                                                  op: Eq
                                                  span:
                                                    line_start: 38
                                                    line_stop: 38
                                                    col_start: 12
                                                    col_stop: 32
                                                    path: compiler-test
                                                    content: "        && field_test == 2field // field test"
                                              op: And
                                              span:
                                                line_start: 28
                                                line_stop: 38
                                                col_start: 12
                                                col_stop: 32
                                                path: compiler-test
                                                content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test"
                                          right:
                                            Binary:
                                              left:
                                                Identifier: "{\"name\":\"use_another_const\",\"span\":\"{\\\"line_start\\\":39,\\\"line_stop\\\":39,\\\"col_start\\\":12,\\\"col_stop\\\":29,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && use_another_const == 9u32 // use another const test\\\"}\"}"
                                              right:
                                                Value:
                                                  Integer:
                                                    - U32
                                                    - "9"
                                                    - line_start: 39
                                                      line_stop: 39
                                                      col_start: 33
                                                      col_stop: 37
                                                      path: compiler-test
                                                      content: "        && use_another_const == 9u32 // use another const test"
                                              op: Eq
                                              span:
                                                line_start: 39
                                                line_stop: 39
                                                col_start: 12
                                                col_stop: 37
                                                path: compiler-test
                                                content: "        && use_another_const == 9u32 // use another const test"
                                          op: And
                                          span:
                                            line_start: 28
                                            line_stop: 39
                                            col_start: 12
                                            col_stop: 37
                                            path: compiler-test
                                            content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test"
                                      right:
                                        Binary:
                                          left:
                                            CircuitMemberAccess:
                                              circuit:
                                                Identifier: "{\"name\":\"foo\",\"span\":\"{\\\"line_start\\\":40,\\\"line_stop\\\":40,\\\"col_start\\\":12,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && foo.width == 10u32 // circuit test\\\"}\"}"
                                              name: "{\"name\":\"width\",\"span\":\"{\\\"line_start\\\":40,\\\"line_stop\\\":40,\\\"col_start\\\":16,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && foo.width == 10u32 // circuit test\\\"}\"}"
                                              span:
                                                line_start: 40
                                                line_stop: 40
                                                col_start: 12
                                                col_stop: 21
                                                path: compiler-test
                                                content: "        && foo.width == 10u32 // circuit test"
                                          right:
                                            Value:
                                              Integer:
                                                - U32
                                                - "10"
                                                - line_start: 40
                                                  line_stop: 40
                                                  col_start: 25
                                                  col_stop: 30
                                                  path: compiler-test
                                                  content: "        && foo.width == 10u32 // circuit test"
                                          op: Eq
                                          span:
                                            line_start: 40
                                            line_stop: 40
                                            col_start: 12
                                            col_stop: 30
                                            path: compiler-test
                                            content: "        && foo.width == 10u32 // circuit test"
                                      op: And
                                      span:
                                        line_start: 28
                                        line_stop: 40
                                        col_start: 12
                                        col_stop: 30
                                        path: compiler-test
                                        content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test\n        && foo.width == 10u32 // circuit test"
                                  right:
                                    Binary:
                                      left:
                                        CircuitMemberAccess:
                                          circuit:
                                            Identifier: "{\"name\":\"foo\",\"span\":\"{\\\"line_start\\\":41,\\\"line_stop\\\":41,\\\"col_start\\\":12,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && foo.height == 20u32\\\"}\"}"
                                          name: "{\"name\":\"height\",\"span\":\"{\\\"line_start\\\":41,\\\"line_stop\\\":41,\\\"col_start\\\":16,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && foo.height == 20u32\\\"}\"}"
                                          span:
                                            line_start: 41
                                            line_stop: 41
                                            col_start: 12
                                            col_stop: 22
                                            path: compiler-test
                                            content: "        && foo.height == 20u32"
                                      right:
                                        Value:
                                          Integer:
                                            - U32
                                            - "20"
                                            - line_start: 41
                                              line_stop: 41
                                              col_start: 26
                                              col_stop: 31
                                              path: compiler-test
                                              content: "        && foo.height == 20u32"
                                      op: Eq
                                      span:
                                        line_start: 41
                                        line_stop: 41
                                        col_start: 12
                                        col_stop: 31
                                        path: compiler-test
                                        content: "        && foo.height == 20u32"
                                  op: And
                                  span:
                                    line_start: 28
                                    line_stop: 41
                                    col_start: 12
                                    col_stop: 31
                                    path: compiler-test
                                    content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test\n        && foo.width == 10u32 // circuit test\n        && foo.height == 20u32"
                              right:
                                Binary:
                                  left:
                                    Identifier: "{\"name\":\"uno\",\"span\":\"{\\\"line_start\\\":42,\\\"line_stop\\\":42,\\\"col_start\\\":12,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && uno == 1u32 // function test\\\"}\"}"
                                  right:
                                    Value:
                                      Integer:
                                        - U32
                                        - "1"
                                        - line_start: 42
                                          line_stop: 42
                                          col_start: 19
                                          col_stop: 23
                                          path: compiler-test
                                          content: "        && uno == 1u32 // function test"
                                  op: Eq
                                  span:
                                    line_start: 42
                                    line_stop: 42
                                    col_start: 12
                                    col_stop: 23
                                    path: compiler-test
                                    content: "        && uno == 1u32 // function test"
                              op: And
                              span:
                                line_start: 28
                                line_stop: 42
                                col_start: 12
                                col_stop: 23
                                path: compiler-test
                                content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test\n        && foo.width == 10u32 // circuit test\n        && foo.height == 20u32\n        && uno == 1u32 // function test"
                          right:
                            Binary:
                              left:
                                Identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":43,\\\"line_stop\\\":43,\\\"col_start\\\":12,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && character == 'a' // char test\\\"}\"}"
                              right:
                                Value:
                                  Char:
                                    character:
                                      Scalar: 97
                                    span:
                                      line_start: 43
                                      line_stop: 43
                                      col_start: 25
                                      col_stop: 28
                                      path: compiler-test
                                      content: "        && character == 'a' // char test"
                              op: Eq
                              span:
                                line_start: 43
                                line_stop: 43
                                col_start: 12
                                col_stop: 28
                                path: compiler-test
                                content: "        && character == 'a' // char test"
                          op: And
                          span:
                            line_start: 28
                            line_stop: 43
                            col_start: 12
                            col_stop: 28
                            path: compiler-test
                            content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test\n        && foo.width == 10u32 // circuit test\n        && foo.height == 20u32\n        && uno == 1u32 // function test\n        && character == 'a' // char test"
                      right:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"hello\",\"span\":\"{\\\"line_start\\\":44,\\\"line_stop\\\":44,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && hello == \\\\\\\"Hello, World!\\\\\\\";\\\"}\"}"
                          right:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 72
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 22
                                          col_stop: 23
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 101
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 23
                                          col_stop: 24
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 108
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 24
                                          col_stop: 25
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 108
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 25
                                          col_stop: 26
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 111
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 26
                                          col_stop: 27
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 44
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 27
                                          col_stop: 28
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 32
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 28
                                          col_stop: 29
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 87
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 29
                                          col_stop: 30
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 111
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 30
                                          col_stop: 31
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 114
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 31
                                          col_stop: 32
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 108
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 32
                                          col_stop: 33
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 100
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 33
                                          col_stop: 34
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                                - Expression:
                                    Value:
                                      Char:
                                        character:
                                          Scalar: 33
                                        span:
                                          line_start: 44
                                          line_stop: 44
                                          col_start: 34
                                          col_stop: 35
                                          path: compiler-test
                                          content: "        && hello == \"Hello, World!\";"
                              span:
                                line_start: 44
                                line_stop: 44
                                col_start: 21
                                col_stop: 36
                                path: compiler-test
                                content: "        && hello == \"Hello, World!\";"
                          op: Eq
                          span:
                            line_start: 44
                            line_stop: 44
                            col_start: 12
                            col_stop: 36
                            path: compiler-test
                            content: "        && hello == \"Hello, World!\";"
                      op: And
                      span:
                        line_start: 28
                        line_stop: 44
                        col_start: 12
                        col_stop: 36
                        path: compiler-test
                        content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test\n        && foo.width == 10u32 // circuit test\n        && foo.height == 20u32\n        && uno == 1u32 // function test\n        && character == 'a' // char test\n        && hello == \"Hello, World!\";"
                  span:
                    line_start: 28
                    line_stop: 44
                    col_start: 5
                    col_stop: 36
                    path: compiler-test
                    content: "    return a == basic\n        && basic == 8u32\n        && array[0][0] == 0 // arrays\n        && array[2][1] == 0\n        && x == 1u32 // tuple test\n        && y == 2u32 \n        && a == 1u32 // tuple extraction test\n        && b == 2u32\n        && simple_group == 1group // group test\n        && complex_group == (_, 1)group\n        && field_test == 2field // field test\n        && use_another_const == 9u32 // use another const test\n        && foo.width == 10u32 // circuit test\n        && foo.height == 20u32\n        && uno == 1u32 // function test\n        && character == 'a' // char test\n        && hello == \"Hello, World!\";"
            span:
              line_start: 25
              line_stop: 45
              col_start: 31
              col_stop: 2
              path: compiler-test
              content: "function main(a: u32) -> bool {\n...\n}"
          span:
            line_start: 25
            line_stop: 45
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: u32) -> bool {\n...\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
