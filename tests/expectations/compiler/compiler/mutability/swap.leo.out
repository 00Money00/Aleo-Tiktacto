---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 127
      num_constraints: 127
      at: e89e71bb78cba20472e8ebfaeb36e6a9564861cf2b14846eb695a5937149dbfb
      bt: 16d04f802c27d778734e07a0126cae3f096bc4e2e0b4362fe5687a338f1dece5
      ct: acfbc6fdb7a3696d43be3cd62939a9731cb8b11c215564c52b3c67343cbda41f
    output:
      - input_file: input/dummy.in
        output:
          registers:
            r0:
              type: bool
              value: "false"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"swap\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"swap\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - IntegerType: U32
                    - - value: "2"
                span:
                  line_start: 4
                  line_stop: 4
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {"
            - Variable:
                identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":34,\\\"col_stop\\\":35,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\\\"}\"}"
                const_: true
                mutable: false
                type_:
                  IntegerType: U32
                span:
                  line_start: 4
                  line_stop: 4
                  col_start: 34
                  col_stop: 35
                  path: compiler-test
                  content: "function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {"
            - Variable:
                identifier: "{\"name\":\"j\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":48,\\\"col_stop\\\":49,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\\\"}\"}"
                const_: true
                mutable: false
                type_:
                  IntegerType: U32
                span:
                  line_start: 4
                  line_stop: 4
                  col_start: 48
                  col_stop: 49
                  path: compiler-test
                  content: "function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {"
          output:
            Array:
              - IntegerType: U32
              - - value: "2"
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"t\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let t = a[i];\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let t = a[i];"
                  type_: ~
                  value:
                    ArrayAccess:
                      array:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let t = a[i];\\\"}\"}"
                      index:
                        Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let t = a[i];\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 13
                        col_stop: 17
                        path: compiler-test
                        content: "    let t = a[i];"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 17
                    path: compiler-test
                    content: "    let t = a[i];"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i] = a[j];\\\"}\"}"
                    accesses:
                      - ArrayIndex:
                          Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i] = a[j];\\\"}\"}"
                    span:
                      line_start: 6
                      line_stop: 6
                      col_start: 5
                      col_stop: 9
                      path: compiler-test
                      content: "    a[i] = a[j];"
                  value:
                    ArrayAccess:
                      array:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i] = a[j];\\\"}\"}"
                      index:
                        Identifier: "{\"name\":\"j\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i] = a[j];\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 12
                        col_stop: 16
                        path: compiler-test
                        content: "    a[i] = a[j];"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 16
                    path: compiler-test
                    content: "    a[i] = a[j];"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[j] = t;\\\"}\"}"
                    accesses:
                      - ArrayIndex:
                          Identifier: "{\"name\":\"j\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[j] = t;\\\"}\"}"
                    span:
                      line_start: 7
                      line_stop: 7
                      col_start: 5
                      col_stop: 9
                      path: compiler-test
                      content: "    a[j] = t;"
                  value:
                    Identifier: "{\"name\":\"t\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[j] = t;\\\"}\"}"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 13
                    path: compiler-test
                    content: "    a[j] = t;"
              - Return:
                  expression:
                    Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a;\\\"}\"}"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 13
                    path: compiler-test
                    content: "    return a;"
            span:
              line_start: 4
              line_stop: 9
              col_start: 68
              col_stop: 2
              path: compiler-test
              content: "function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\n...\n}"
          span:
            line_start: 4
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\n...\n}\n\n\n"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(arr: [u32; 2]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(arr: [u32; 2]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"arr\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":15,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(arr: [u32; 2]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - IntegerType: U32
                    - - value: "2"
                span:
                  line_start: 11
                  line_stop: 11
                  col_start: 15
                  col_stop: 18
                  path: compiler-test
                  content: "function main(arr: [u32; 2]) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"expected\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":11,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const expected: [u32; 2] = [1, 0];\\\"}\"}"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 11
                        col_stop: 19
                        path: compiler-test
                        content: "    const expected: [u32; 2] = [1, 0];"
                  type_:
                    Array:
                      - IntegerType: U32
                      - - value: "2"
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            Value:
                              Implicit:
                                - "1"
                                - line_start: 12
                                  line_stop: 12
                                  col_start: 33
                                  col_stop: 34
                                  path: compiler-test
                                  content: "    const expected: [u32; 2] = [1, 0];"
                        - Expression:
                            Value:
                              Implicit:
                                - "0"
                                - line_start: 12
                                  line_stop: 12
                                  col_start: 36
                                  col_stop: 37
                                  path: compiler-test
                                  content: "    const expected: [u32; 2] = [1, 0];"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 32
                        col_stop: 38
                        path: compiler-test
                        content: "    const expected: [u32; 2] = [1, 0];"
                  span:
                    line_start: 12
                    line_stop: 12
                    col_start: 5
                    col_stop: 38
                    path: compiler-test
                    content: "    const expected: [u32; 2] = [1, 0];"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"actual\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":9,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let actual = swap(arr, 0, 1);\\\"}\"}"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 9
                        col_stop: 15
                        path: compiler-test
                        content: "    let actual = swap(arr, 0, 1);"
                  type_: ~
                  value:
                    Call:
                      function:
                        Identifier: "{\"name\":\"swap\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":18,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let actual = swap(arr, 0, 1);\\\"}\"}"
                      arguments:
                        - Identifier: "{\"name\":\"arr\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":23,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let actual = swap(arr, 0, 1);\\\"}\"}"
                        - Value:
                            Implicit:
                              - "0"
                              - line_start: 13
                                line_stop: 13
                                col_start: 28
                                col_stop: 29
                                path: compiler-test
                                content: "    let actual = swap(arr, 0, 1);"
                        - Value:
                            Implicit:
                              - "1"
                              - line_start: 13
                                line_stop: 13
                                col_start: 31
                                col_stop: 32
                                path: compiler-test
                                content: "    let actual = swap(arr, 0, 1);"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 18
                        col_stop: 33
                        path: compiler-test
                        content: "    let actual = swap(arr, 0, 1);"
                  span:
                    line_start: 13
                    line_stop: 13
                    col_start: 5
                    col_stop: 33
                    path: compiler-test
                    content: "    let actual = swap(arr, 0, 1);"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            ArrayAccess:
                              array:
                                Identifier: "{\"name\":\"expected\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":12,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return expected[0] == actual[0] && expected[1] == actual[1];\\\"}\"}"
                              index:
                                Value:
                                  Implicit:
                                    - "0"
                                    - line_start: 16
                                      line_stop: 16
                                      col_start: 21
                                      col_stop: 22
                                      path: compiler-test
                                      content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                              span:
                                line_start: 16
                                line_stop: 16
                                col_start: 12
                                col_stop: 23
                                path: compiler-test
                                content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                          right:
                            ArrayAccess:
                              array:
                                Identifier: "{\"name\":\"actual\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":27,\\\"col_stop\\\":33,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return expected[0] == actual[0] && expected[1] == actual[1];\\\"}\"}"
                              index:
                                Value:
                                  Implicit:
                                    - "0"
                                    - line_start: 16
                                      line_stop: 16
                                      col_start: 34
                                      col_stop: 35
                                      path: compiler-test
                                      content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                              span:
                                line_start: 16
                                line_stop: 16
                                col_start: 27
                                col_stop: 36
                                path: compiler-test
                                content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                          op: Eq
                          span:
                            line_start: 16
                            line_stop: 16
                            col_start: 12
                            col_stop: 36
                            path: compiler-test
                            content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                      right:
                        Binary:
                          left:
                            ArrayAccess:
                              array:
                                Identifier: "{\"name\":\"expected\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":40,\\\"col_stop\\\":48,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return expected[0] == actual[0] && expected[1] == actual[1];\\\"}\"}"
                              index:
                                Value:
                                  Implicit:
                                    - "1"
                                    - line_start: 16
                                      line_stop: 16
                                      col_start: 49
                                      col_stop: 50
                                      path: compiler-test
                                      content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                              span:
                                line_start: 16
                                line_stop: 16
                                col_start: 40
                                col_stop: 51
                                path: compiler-test
                                content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                          right:
                            ArrayAccess:
                              array:
                                Identifier: "{\"name\":\"actual\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":55,\\\"col_stop\\\":61,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return expected[0] == actual[0] && expected[1] == actual[1];\\\"}\"}"
                              index:
                                Value:
                                  Implicit:
                                    - "1"
                                    - line_start: 16
                                      line_stop: 16
                                      col_start: 62
                                      col_stop: 63
                                      path: compiler-test
                                      content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                              span:
                                line_start: 16
                                line_stop: 16
                                col_start: 55
                                col_stop: 64
                                path: compiler-test
                                content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                          op: Eq
                          span:
                            line_start: 16
                            line_stop: 16
                            col_start: 40
                            col_stop: 64
                            path: compiler-test
                            content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                      op: And
                      span:
                        line_start: 16
                        line_stop: 16
                        col_start: 12
                        col_stop: 64
                        path: compiler-test
                        content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                  span:
                    line_start: 16
                    line_stop: 16
                    col_start: 5
                    col_stop: 64
                    path: compiler-test
                    content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
            span:
              line_start: 11
              line_stop: 17
              col_start: 38
              col_stop: 2
              path: compiler-test
              content: "function main(arr: [u32; 2]) -> bool {\n...\n}"
          span:
            line_start: 11
            line_stop: 17
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(arr: [u32; 2]) -> bool {\n...\n}\n\n\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"swap\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"swap\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - IntegerType: U32
                    - - value: "2"
                span:
                  line_start: 4
                  line_stop: 4
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {"
            - Variable:
                identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":34,\\\"col_stop\\\":35,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\\\"}\"}"
                const_: true
                mutable: false
                type_:
                  IntegerType: U32
                span:
                  line_start: 4
                  line_stop: 4
                  col_start: 34
                  col_stop: 35
                  path: compiler-test
                  content: "function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {"
            - Variable:
                identifier: "{\"name\":\"j\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":48,\\\"col_stop\\\":49,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\\\"}\"}"
                const_: true
                mutable: false
                type_:
                  IntegerType: U32
                span:
                  line_start: 4
                  line_stop: 4
                  col_start: 48
                  col_stop: 49
                  path: compiler-test
                  content: "function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {"
          output:
            Array:
              - IntegerType: U32
              - - value: "2"
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"t\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let t = a[i];\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let t = a[i];"
                  type_: ~
                  value:
                    ArrayAccess:
                      array:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let t = a[i];\\\"}\"}"
                      index:
                        Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let t = a[i];\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 13
                        col_stop: 17
                        path: compiler-test
                        content: "    let t = a[i];"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 17
                    path: compiler-test
                    content: "    let t = a[i];"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i] = a[j];\\\"}\"}"
                    accesses:
                      - ArrayIndex:
                          Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i] = a[j];\\\"}\"}"
                    span:
                      line_start: 6
                      line_stop: 6
                      col_start: 5
                      col_stop: 9
                      path: compiler-test
                      content: "    a[i] = a[j];"
                  value:
                    ArrayAccess:
                      array:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i] = a[j];\\\"}\"}"
                      index:
                        Identifier: "{\"name\":\"j\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i] = a[j];\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 12
                        col_stop: 16
                        path: compiler-test
                        content: "    a[i] = a[j];"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 16
                    path: compiler-test
                    content: "    a[i] = a[j];"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[j] = t;\\\"}\"}"
                    accesses:
                      - ArrayIndex:
                          Identifier: "{\"name\":\"j\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[j] = t;\\\"}\"}"
                    span:
                      line_start: 7
                      line_stop: 7
                      col_start: 5
                      col_stop: 9
                      path: compiler-test
                      content: "    a[j] = t;"
                  value:
                    Identifier: "{\"name\":\"t\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[j] = t;\\\"}\"}"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 13
                    path: compiler-test
                    content: "    a[j] = t;"
              - Return:
                  expression:
                    Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a;\\\"}\"}"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 13
                    path: compiler-test
                    content: "    return a;"
            span:
              line_start: 4
              line_stop: 9
              col_start: 68
              col_stop: 2
              path: compiler-test
              content: "function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\n...\n}"
          span:
            line_start: 4
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\n...\n}\n\n\n"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(arr: [u32; 2]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(arr: [u32; 2]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"arr\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":15,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(arr: [u32; 2]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - IntegerType: U32
                    - - value: "2"
                span:
                  line_start: 11
                  line_stop: 11
                  col_start: 15
                  col_stop: 18
                  path: compiler-test
                  content: "function main(arr: [u32; 2]) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"expected\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":11,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const expected: [u32; 2] = [1, 0];\\\"}\"}"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 11
                        col_stop: 19
                        path: compiler-test
                        content: "    const expected: [u32; 2] = [1, 0];"
                  type_:
                    Array:
                      - IntegerType: U32
                      - - value: "2"
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            Value:
                              Implicit:
                                - "1"
                                - line_start: 12
                                  line_stop: 12
                                  col_start: 33
                                  col_stop: 34
                                  path: compiler-test
                                  content: "    const expected: [u32; 2] = [1, 0];"
                        - Expression:
                            Value:
                              Implicit:
                                - "0"
                                - line_start: 12
                                  line_stop: 12
                                  col_start: 36
                                  col_stop: 37
                                  path: compiler-test
                                  content: "    const expected: [u32; 2] = [1, 0];"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 32
                        col_stop: 38
                        path: compiler-test
                        content: "    const expected: [u32; 2] = [1, 0];"
                  span:
                    line_start: 12
                    line_stop: 12
                    col_start: 5
                    col_stop: 38
                    path: compiler-test
                    content: "    const expected: [u32; 2] = [1, 0];"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"actual\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":9,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let actual = swap(arr, 0, 1);\\\"}\"}"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 9
                        col_stop: 15
                        path: compiler-test
                        content: "    let actual = swap(arr, 0, 1);"
                  type_: ~
                  value:
                    Call:
                      function:
                        Identifier: "{\"name\":\"swap\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":18,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let actual = swap(arr, 0, 1);\\\"}\"}"
                      arguments:
                        - Identifier: "{\"name\":\"arr\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":23,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let actual = swap(arr, 0, 1);\\\"}\"}"
                        - Value:
                            Implicit:
                              - "0"
                              - line_start: 13
                                line_stop: 13
                                col_start: 28
                                col_stop: 29
                                path: compiler-test
                                content: "    let actual = swap(arr, 0, 1);"
                        - Value:
                            Implicit:
                              - "1"
                              - line_start: 13
                                line_stop: 13
                                col_start: 31
                                col_stop: 32
                                path: compiler-test
                                content: "    let actual = swap(arr, 0, 1);"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 18
                        col_stop: 33
                        path: compiler-test
                        content: "    let actual = swap(arr, 0, 1);"
                  span:
                    line_start: 13
                    line_stop: 13
                    col_start: 5
                    col_stop: 33
                    path: compiler-test
                    content: "    let actual = swap(arr, 0, 1);"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            ArrayAccess:
                              array:
                                Identifier: "{\"name\":\"expected\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":12,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return expected[0] == actual[0] && expected[1] == actual[1];\\\"}\"}"
                              index:
                                Value:
                                  Implicit:
                                    - "0"
                                    - line_start: 16
                                      line_stop: 16
                                      col_start: 21
                                      col_stop: 22
                                      path: compiler-test
                                      content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                              span:
                                line_start: 16
                                line_stop: 16
                                col_start: 12
                                col_stop: 23
                                path: compiler-test
                                content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                          right:
                            ArrayAccess:
                              array:
                                Identifier: "{\"name\":\"actual\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":27,\\\"col_stop\\\":33,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return expected[0] == actual[0] && expected[1] == actual[1];\\\"}\"}"
                              index:
                                Value:
                                  Implicit:
                                    - "0"
                                    - line_start: 16
                                      line_stop: 16
                                      col_start: 34
                                      col_stop: 35
                                      path: compiler-test
                                      content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                              span:
                                line_start: 16
                                line_stop: 16
                                col_start: 27
                                col_stop: 36
                                path: compiler-test
                                content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                          op: Eq
                          span:
                            line_start: 16
                            line_stop: 16
                            col_start: 12
                            col_stop: 36
                            path: compiler-test
                            content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                      right:
                        Binary:
                          left:
                            ArrayAccess:
                              array:
                                Identifier: "{\"name\":\"expected\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":40,\\\"col_stop\\\":48,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return expected[0] == actual[0] && expected[1] == actual[1];\\\"}\"}"
                              index:
                                Value:
                                  Implicit:
                                    - "1"
                                    - line_start: 16
                                      line_stop: 16
                                      col_start: 49
                                      col_stop: 50
                                      path: compiler-test
                                      content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                              span:
                                line_start: 16
                                line_stop: 16
                                col_start: 40
                                col_stop: 51
                                path: compiler-test
                                content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                          right:
                            ArrayAccess:
                              array:
                                Identifier: "{\"name\":\"actual\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":55,\\\"col_stop\\\":61,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return expected[0] == actual[0] && expected[1] == actual[1];\\\"}\"}"
                              index:
                                Value:
                                  Implicit:
                                    - "1"
                                    - line_start: 16
                                      line_stop: 16
                                      col_start: 62
                                      col_stop: 63
                                      path: compiler-test
                                      content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                              span:
                                line_start: 16
                                line_stop: 16
                                col_start: 55
                                col_stop: 64
                                path: compiler-test
                                content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                          op: Eq
                          span:
                            line_start: 16
                            line_stop: 16
                            col_start: 40
                            col_stop: 64
                            path: compiler-test
                            content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                      op: And
                      span:
                        line_start: 16
                        line_stop: 16
                        col_start: 12
                        col_stop: 64
                        path: compiler-test
                        content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                  span:
                    line_start: 16
                    line_stop: 16
                    col_start: 5
                    col_stop: 64
                    path: compiler-test
                    content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
            span:
              line_start: 11
              line_stop: 17
              col_start: 38
              col_stop: 2
              path: compiler-test
              content: "function main(arr: [u32; 2]) -> bool {\n...\n}"
          span:
            line_start: 11
            line_stop: 17
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(arr: [u32; 2]) -> bool {\n...\n}\n\n\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"swap\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"swap\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - IntegerType: U32
                    - - value: "2"
                span:
                  line_start: 4
                  line_stop: 4
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {"
            - Variable:
                identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":34,\\\"col_stop\\\":35,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\\\"}\"}"
                const_: true
                mutable: false
                type_:
                  IntegerType: U32
                span:
                  line_start: 4
                  line_stop: 4
                  col_start: 34
                  col_stop: 35
                  path: compiler-test
                  content: "function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {"
            - Variable:
                identifier: "{\"name\":\"j\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":48,\\\"col_stop\\\":49,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\\\"}\"}"
                const_: true
                mutable: false
                type_:
                  IntegerType: U32
                span:
                  line_start: 4
                  line_stop: 4
                  col_start: 48
                  col_stop: 49
                  path: compiler-test
                  content: "function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {"
          output:
            Array:
              - IntegerType: U32
              - - value: "2"
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"t\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let t = a[i];\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let t = a[i];"
                  type_:
                    IntegerType: U32
                  value:
                    ArrayAccess:
                      array:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let t = a[i];\\\"}\"}"
                      index:
                        Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let t = a[i];\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 13
                        col_stop: 17
                        path: compiler-test
                        content: "    let t = a[i];"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 17
                    path: compiler-test
                    content: "    let t = a[i];"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i] = a[j];\\\"}\"}"
                    accesses:
                      - ArrayIndex:
                          Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i] = a[j];\\\"}\"}"
                    span:
                      line_start: 6
                      line_stop: 6
                      col_start: 5
                      col_stop: 9
                      path: compiler-test
                      content: "    a[i] = a[j];"
                  value:
                    ArrayAccess:
                      array:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i] = a[j];\\\"}\"}"
                      index:
                        Identifier: "{\"name\":\"j\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i] = a[j];\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 12
                        col_stop: 16
                        path: compiler-test
                        content: "    a[i] = a[j];"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 16
                    path: compiler-test
                    content: "    a[i] = a[j];"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[j] = t;\\\"}\"}"
                    accesses:
                      - ArrayIndex:
                          Identifier: "{\"name\":\"j\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[j] = t;\\\"}\"}"
                    span:
                      line_start: 7
                      line_stop: 7
                      col_start: 5
                      col_stop: 9
                      path: compiler-test
                      content: "    a[j] = t;"
                  value:
                    Identifier: "{\"name\":\"t\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[j] = t;\\\"}\"}"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 13
                    path: compiler-test
                    content: "    a[j] = t;"
              - Return:
                  expression:
                    Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a;\\\"}\"}"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 13
                    path: compiler-test
                    content: "    return a;"
            span:
              line_start: 4
              line_stop: 9
              col_start: 68
              col_stop: 2
              path: compiler-test
              content: "function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\n...\n}"
          span:
            line_start: 4
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function swap(a: [u32; 2], const i: u32, const j: u32) -> [u32; 2] {\n...\n}\n\n\n"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(arr: [u32; 2]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(arr: [u32; 2]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"arr\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":15,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(arr: [u32; 2]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - IntegerType: U32
                    - - value: "2"
                span:
                  line_start: 11
                  line_stop: 11
                  col_start: 15
                  col_stop: 18
                  path: compiler-test
                  content: "function main(arr: [u32; 2]) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"expected\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":11,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const expected: [u32; 2] = [1, 0];\\\"}\"}"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 11
                        col_stop: 19
                        path: compiler-test
                        content: "    const expected: [u32; 2] = [1, 0];"
                  type_:
                    Array:
                      - IntegerType: U32
                      - - value: "2"
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            Value:
                              Integer:
                                - U32
                                - "1"
                                - line_start: 12
                                  line_stop: 12
                                  col_start: 33
                                  col_stop: 34
                                  path: compiler-test
                                  content: "    const expected: [u32; 2] = [1, 0];"
                        - Expression:
                            Value:
                              Integer:
                                - U32
                                - "0"
                                - line_start: 12
                                  line_stop: 12
                                  col_start: 36
                                  col_stop: 37
                                  path: compiler-test
                                  content: "    const expected: [u32; 2] = [1, 0];"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 32
                        col_stop: 38
                        path: compiler-test
                        content: "    const expected: [u32; 2] = [1, 0];"
                  span:
                    line_start: 12
                    line_stop: 12
                    col_start: 5
                    col_stop: 38
                    path: compiler-test
                    content: "    const expected: [u32; 2] = [1, 0];"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"actual\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":9,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let actual = swap(arr, 0, 1);\\\"}\"}"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 9
                        col_stop: 15
                        path: compiler-test
                        content: "    let actual = swap(arr, 0, 1);"
                  type_:
                    Array:
                      - IntegerType: U32
                      - - value: "2"
                  value:
                    Call:
                      function:
                        Identifier: "{\"name\":\"swap\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":18,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let actual = swap(arr, 0, 1);\\\"}\"}"
                      arguments:
                        - Identifier: "{\"name\":\"arr\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":23,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let actual = swap(arr, 0, 1);\\\"}\"}"
                        - Value:
                            Integer:
                              - U32
                              - "0"
                              - line_start: 13
                                line_stop: 13
                                col_start: 28
                                col_stop: 29
                                path: compiler-test
                                content: "    let actual = swap(arr, 0, 1);"
                        - Value:
                            Integer:
                              - U32
                              - "1"
                              - line_start: 13
                                line_stop: 13
                                col_start: 31
                                col_stop: 32
                                path: compiler-test
                                content: "    let actual = swap(arr, 0, 1);"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 18
                        col_stop: 33
                        path: compiler-test
                        content: "    let actual = swap(arr, 0, 1);"
                  span:
                    line_start: 13
                    line_stop: 13
                    col_start: 5
                    col_stop: 33
                    path: compiler-test
                    content: "    let actual = swap(arr, 0, 1);"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            ArrayAccess:
                              array:
                                Identifier: "{\"name\":\"expected\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":12,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return expected[0] == actual[0] && expected[1] == actual[1];\\\"}\"}"
                              index:
                                Value:
                                  Integer:
                                    - U32
                                    - "0"
                                    - line_start: 16
                                      line_stop: 16
                                      col_start: 21
                                      col_stop: 22
                                      path: compiler-test
                                      content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                              span:
                                line_start: 16
                                line_stop: 16
                                col_start: 12
                                col_stop: 23
                                path: compiler-test
                                content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                          right:
                            ArrayAccess:
                              array:
                                Identifier: "{\"name\":\"actual\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":27,\\\"col_stop\\\":33,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return expected[0] == actual[0] && expected[1] == actual[1];\\\"}\"}"
                              index:
                                Value:
                                  Integer:
                                    - U32
                                    - "0"
                                    - line_start: 16
                                      line_stop: 16
                                      col_start: 34
                                      col_stop: 35
                                      path: compiler-test
                                      content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                              span:
                                line_start: 16
                                line_stop: 16
                                col_start: 27
                                col_stop: 36
                                path: compiler-test
                                content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                          op: Eq
                          span:
                            line_start: 16
                            line_stop: 16
                            col_start: 12
                            col_stop: 36
                            path: compiler-test
                            content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                      right:
                        Binary:
                          left:
                            ArrayAccess:
                              array:
                                Identifier: "{\"name\":\"expected\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":40,\\\"col_stop\\\":48,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return expected[0] == actual[0] && expected[1] == actual[1];\\\"}\"}"
                              index:
                                Value:
                                  Integer:
                                    - U32
                                    - "1"
                                    - line_start: 16
                                      line_stop: 16
                                      col_start: 49
                                      col_stop: 50
                                      path: compiler-test
                                      content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                              span:
                                line_start: 16
                                line_stop: 16
                                col_start: 40
                                col_stop: 51
                                path: compiler-test
                                content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                          right:
                            ArrayAccess:
                              array:
                                Identifier: "{\"name\":\"actual\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":55,\\\"col_stop\\\":61,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return expected[0] == actual[0] && expected[1] == actual[1];\\\"}\"}"
                              index:
                                Value:
                                  Integer:
                                    - U32
                                    - "1"
                                    - line_start: 16
                                      line_stop: 16
                                      col_start: 62
                                      col_stop: 63
                                      path: compiler-test
                                      content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                              span:
                                line_start: 16
                                line_stop: 16
                                col_start: 55
                                col_stop: 64
                                path: compiler-test
                                content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                          op: Eq
                          span:
                            line_start: 16
                            line_stop: 16
                            col_start: 40
                            col_stop: 64
                            path: compiler-test
                            content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                      op: And
                      span:
                        line_start: 16
                        line_stop: 16
                        col_start: 12
                        col_stop: 64
                        path: compiler-test
                        content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
                  span:
                    line_start: 16
                    line_stop: 16
                    col_start: 5
                    col_stop: 64
                    path: compiler-test
                    content: "    return expected[0] == actual[0] && expected[1] == actual[1];"
            span:
              line_start: 11
              line_stop: 17
              col_start: 38
              col_stop: 2
              path: compiler-test
              content: "function main(arr: [u32; 2]) -> bool {\n...\n}"
          span:
            line_start: 11
            line_stop: 17
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(arr: [u32; 2]) -> bool {\n...\n}\n\n\n\n"
