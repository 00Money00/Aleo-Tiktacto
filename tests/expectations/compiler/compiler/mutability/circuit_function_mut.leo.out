---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 1
      num_constraints: 1
      at: 042610d0fd1fe6d6ac112138f8755752f44c7d2a00f1b5960574d6da5cda393f
      bt: e97756698880ab7555a959a5fb5c6b4e15bd64612aa677adbfe2d0bd91f0a83c
      ct: cf1cbb66a638b4860a516671fb74850e6ccf787fe6c4c8d29e9c04efe880bd05
    output:
      - input_file: input/dummy.in
        output:
          registers:
            r0:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    x: u32\\\"}\"}"
                - IntegerType: U32
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"foo\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":14,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function foo(mut self) {\\\"}\"}"
                input:
                  - MutSelfKeyword: "{\"name\":\"mut self\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":18,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function foo(mut self) {\\\"}\"}"
                output: ~
                block:
                  statements:
                    - Assign:
                        operation: Assign
                        assignee:
                          identifier: "{\"name\":\"self\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        self.x = 10;\\\"}\"}"
                          accesses:
                            - Member: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        self.x = 10;\\\"}\"}"
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 9
                            col_stop: 15
                            path: compiler-test
                            content: "        self.x = 10;"
                        value:
                          Value:
                            Implicit:
                              - "10"
                              - line_start: 7
                                line_stop: 7
                                col_start: 18
                                col_stop: 20
                                path: compiler-test
                                content: "        self.x = 10;"
                        span:
                          line_start: 7
                          line_stop: 7
                          col_start: 9
                          col_stop: 20
                          path: compiler-test
                          content: "        self.x = 10;"
                  span:
                    line_start: 6
                    line_stop: 8
                    col_start: 28
                    col_stop: 6
                    path: compiler-test
                    content: "    function foo(mut self) {\n...\n    }"
                span:
                  line_start: 6
                  line_stop: 8
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function foo(mut self) {\n...\n    }"
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 12
                  line_stop: 12
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(y: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: 1 };\\\"}\"}"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let a = Foo { x: 1 };"
                  type_: ~
                  value:
                    CircuitInit:
                      name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":13,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: 1 };\\\"}\"}"
                      members:
                        - identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":19,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: 1 };\\\"}\"}"
                          expression:
                            Value:
                              Implicit:
                                - "1"
                                - line_start: 13
                                  line_stop: 13
                                  col_start: 22
                                  col_stop: 23
                                  path: compiler-test
                                  content: "    let a = Foo { x: 1 };"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 13
                        col_stop: 25
                        path: compiler-test
                        content: "    let a = Foo { x: 1 };"
                  span:
                    line_start: 13
                    line_stop: 13
                    col_start: 5
                    col_stop: 25
                    path: compiler-test
                    content: "    let a = Foo { x: 1 };"
              - Expression:
                  expression:
                    Call:
                      function:
                        CircuitMemberAccess:
                          circuit:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a.foo();\\\"}\"}"
                          name: "{\"name\":\"foo\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":7,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a.foo();\\\"}\"}"
                          span:
                            line_start: 15
                            line_stop: 15
                            col_start: 5
                            col_stop: 10
                            path: compiler-test
                            content: "    a.foo();"
                      arguments: []
                      span:
                        line_start: 15
                        line_stop: 15
                        col_start: 5
                        col_stop: 12
                        path: compiler-test
                        content: "    a.foo();"
                  span:
                    line_start: 15
                    line_stop: 15
                    col_start: 5
                    col_stop: 12
                    path: compiler-test
                    content: "    a.foo();"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            CircuitMemberAccess:
                              circuit:
                                Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":17,\\\"line_stop\\\":17,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a.x == 10u32 == y;\\\"}\"}"
                              name: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":17,\\\"line_stop\\\":17,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a.x == 10u32 == y;\\\"}\"}"
                              span:
                                line_start: 17
                                line_stop: 17
                                col_start: 12
                                col_stop: 15
                                path: compiler-test
                                content: "    return a.x == 10u32 == y;"
                          right:
                            Value:
                              Integer:
                                - U32
                                - "10"
                                - line_start: 17
                                  line_stop: 17
                                  col_start: 19
                                  col_stop: 24
                                  path: compiler-test
                                  content: "    return a.x == 10u32 == y;"
                          op: Eq
                          span:
                            line_start: 17
                            line_stop: 17
                            col_start: 12
                            col_stop: 24
                            path: compiler-test
                            content: "    return a.x == 10u32 == y;"
                      right:
                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":17,\\\"line_stop\\\":17,\\\"col_start\\\":28,\\\"col_stop\\\":29,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a.x == 10u32 == y;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 17
                        line_stop: 17
                        col_start: 12
                        col_stop: 29
                        path: compiler-test
                        content: "    return a.x == 10u32 == y;"
                  span:
                    line_start: 17
                    line_stop: 17
                    col_start: 5
                    col_stop: 29
                    path: compiler-test
                    content: "    return a.x == 10u32 == y;"
            span:
              line_start: 12
              line_stop: 18
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(y: bool) -> bool {\n...\n}"
          span:
            line_start: 12
            line_stop: 18
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(y: bool) -> bool {\n...\n}\n\n\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    x: u32\\\"}\"}"
                - IntegerType: U32
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"foo\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":14,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function foo(mut self) {\\\"}\"}"
                input:
                  - MutSelfKeyword: "{\"name\":\"mut self\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":18,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function foo(mut self) {\\\"}\"}"
                output:
                  Tuple: []
                block:
                  statements:
                    - Assign:
                        operation: Assign
                        assignee:
                          identifier: "{\"name\":\"self\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        self.x = 10;\\\"}\"}"
                          accesses:
                            - Member: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        self.x = 10;\\\"}\"}"
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 9
                            col_stop: 15
                            path: compiler-test
                            content: "        self.x = 10;"
                        value:
                          Value:
                            Implicit:
                              - "10"
                              - line_start: 7
                                line_stop: 7
                                col_start: 18
                                col_stop: 20
                                path: compiler-test
                                content: "        self.x = 10;"
                        span:
                          line_start: 7
                          line_stop: 7
                          col_start: 9
                          col_stop: 20
                          path: compiler-test
                          content: "        self.x = 10;"
                  span:
                    line_start: 6
                    line_stop: 8
                    col_start: 28
                    col_stop: 6
                    path: compiler-test
                    content: "    function foo(mut self) {\n...\n    }"
                span:
                  line_start: 6
                  line_stop: 8
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function foo(mut self) {\n...\n    }"
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 12
                  line_stop: 12
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(y: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: 1 };\\\"}\"}"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let a = Foo { x: 1 };"
                  type_: ~
                  value:
                    CircuitInit:
                      name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":13,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: 1 };\\\"}\"}"
                      members:
                        - identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":19,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: 1 };\\\"}\"}"
                          expression:
                            Value:
                              Implicit:
                                - "1"
                                - line_start: 13
                                  line_stop: 13
                                  col_start: 22
                                  col_stop: 23
                                  path: compiler-test
                                  content: "    let a = Foo { x: 1 };"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 13
                        col_stop: 25
                        path: compiler-test
                        content: "    let a = Foo { x: 1 };"
                  span:
                    line_start: 13
                    line_stop: 13
                    col_start: 5
                    col_stop: 25
                    path: compiler-test
                    content: "    let a = Foo { x: 1 };"
              - Expression:
                  expression:
                    Call:
                      function:
                        CircuitMemberAccess:
                          circuit:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a.foo();\\\"}\"}"
                          name: "{\"name\":\"foo\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":7,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a.foo();\\\"}\"}"
                          span:
                            line_start: 15
                            line_stop: 15
                            col_start: 5
                            col_stop: 10
                            path: compiler-test
                            content: "    a.foo();"
                      arguments: []
                      span:
                        line_start: 15
                        line_stop: 15
                        col_start: 5
                        col_stop: 12
                        path: compiler-test
                        content: "    a.foo();"
                  span:
                    line_start: 15
                    line_stop: 15
                    col_start: 5
                    col_stop: 12
                    path: compiler-test
                    content: "    a.foo();"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            CircuitMemberAccess:
                              circuit:
                                Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":17,\\\"line_stop\\\":17,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a.x == 10u32 == y;\\\"}\"}"
                              name: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":17,\\\"line_stop\\\":17,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a.x == 10u32 == y;\\\"}\"}"
                              span:
                                line_start: 17
                                line_stop: 17
                                col_start: 12
                                col_stop: 15
                                path: compiler-test
                                content: "    return a.x == 10u32 == y;"
                          right:
                            Value:
                              Integer:
                                - U32
                                - "10"
                                - line_start: 17
                                  line_stop: 17
                                  col_start: 19
                                  col_stop: 24
                                  path: compiler-test
                                  content: "    return a.x == 10u32 == y;"
                          op: Eq
                          span:
                            line_start: 17
                            line_stop: 17
                            col_start: 12
                            col_stop: 24
                            path: compiler-test
                            content: "    return a.x == 10u32 == y;"
                      right:
                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":17,\\\"line_stop\\\":17,\\\"col_start\\\":28,\\\"col_stop\\\":29,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a.x == 10u32 == y;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 17
                        line_stop: 17
                        col_start: 12
                        col_stop: 29
                        path: compiler-test
                        content: "    return a.x == 10u32 == y;"
                  span:
                    line_start: 17
                    line_stop: 17
                    col_start: 5
                    col_stop: 29
                    path: compiler-test
                    content: "    return a.x == 10u32 == y;"
            span:
              line_start: 12
              line_stop: 18
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(y: bool) -> bool {\n...\n}"
          span:
            line_start: 12
            line_stop: 18
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(y: bool) -> bool {\n...\n}\n\n\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    x: u32\\\"}\"}"
                - IntegerType: U32
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"foo\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":14,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function foo(mut self) {\\\"}\"}"
                input:
                  - MutSelfKeyword: "{\"name\":\"mut self\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":18,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function foo(mut self) {\\\"}\"}"
                output:
                  Tuple: []
                block:
                  statements:
                    - Assign:
                        operation: Assign
                        assignee:
                          identifier: "{\"name\":\"self\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        self.x = 10;\\\"}\"}"
                          accesses:
                            - Member: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        self.x = 10;\\\"}\"}"
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 9
                            col_stop: 15
                            path: compiler-test
                            content: "        self.x = 10;"
                        value:
                          Value:
                            Integer:
                              - U32
                              - "10"
                              - line_start: 7
                                line_stop: 7
                                col_start: 18
                                col_stop: 20
                                path: compiler-test
                                content: "        self.x = 10;"
                        span:
                          line_start: 7
                          line_stop: 7
                          col_start: 9
                          col_stop: 20
                          path: compiler-test
                          content: "        self.x = 10;"
                  span:
                    line_start: 6
                    line_stop: 8
                    col_start: 28
                    col_stop: 6
                    path: compiler-test
                    content: "    function foo(mut self) {\n...\n    }"
                span:
                  line_start: 6
                  line_stop: 8
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function foo(mut self) {\n...\n    }"
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 12
                  line_stop: 12
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(y: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: 1 };\\\"}\"}"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let a = Foo { x: 1 };"
                  type_:
                    Circuit: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
                  value:
                    CircuitInit:
                      name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":13,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: 1 };\\\"}\"}"
                      members:
                        - identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":19,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: 1 };\\\"}\"}"
                          expression:
                            Value:
                              Integer:
                                - U32
                                - "1"
                                - line_start: 13
                                  line_stop: 13
                                  col_start: 22
                                  col_stop: 23
                                  path: compiler-test
                                  content: "    let a = Foo { x: 1 };"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 13
                        col_stop: 25
                        path: compiler-test
                        content: "    let a = Foo { x: 1 };"
                  span:
                    line_start: 13
                    line_stop: 13
                    col_start: 5
                    col_stop: 25
                    path: compiler-test
                    content: "    let a = Foo { x: 1 };"
              - Expression:
                  expression:
                    Call:
                      function:
                        CircuitMemberAccess:
                          circuit:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a.foo();\\\"}\"}"
                          name: "{\"name\":\"foo\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":7,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a.foo();\\\"}\"}"
                          span:
                            line_start: 15
                            line_stop: 15
                            col_start: 5
                            col_stop: 10
                            path: compiler-test
                            content: "    a.foo();"
                      arguments: []
                      span:
                        line_start: 15
                        line_stop: 15
                        col_start: 5
                        col_stop: 12
                        path: compiler-test
                        content: "    a.foo();"
                  span:
                    line_start: 15
                    line_stop: 15
                    col_start: 5
                    col_stop: 12
                    path: compiler-test
                    content: "    a.foo();"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            CircuitMemberAccess:
                              circuit:
                                Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":17,\\\"line_stop\\\":17,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a.x == 10u32 == y;\\\"}\"}"
                              name: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":17,\\\"line_stop\\\":17,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a.x == 10u32 == y;\\\"}\"}"
                              span:
                                line_start: 17
                                line_stop: 17
                                col_start: 12
                                col_stop: 15
                                path: compiler-test
                                content: "    return a.x == 10u32 == y;"
                          right:
                            Value:
                              Integer:
                                - U32
                                - "10"
                                - line_start: 17
                                  line_stop: 17
                                  col_start: 19
                                  col_stop: 24
                                  path: compiler-test
                                  content: "    return a.x == 10u32 == y;"
                          op: Eq
                          span:
                            line_start: 17
                            line_stop: 17
                            col_start: 12
                            col_stop: 24
                            path: compiler-test
                            content: "    return a.x == 10u32 == y;"
                      right:
                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":17,\\\"line_stop\\\":17,\\\"col_start\\\":28,\\\"col_stop\\\":29,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a.x == 10u32 == y;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 17
                        line_stop: 17
                        col_start: 12
                        col_stop: 29
                        path: compiler-test
                        content: "    return a.x == 10u32 == y;"
                  span:
                    line_start: 17
                    line_stop: 17
                    col_start: 5
                    col_stop: 29
                    path: compiler-test
                    content: "    return a.x == 10u32 == y;"
            span:
              line_start: 12
              line_stop: 18
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(y: bool) -> bool {\n...\n}"
          span:
            line_start: 12
            line_stop: 18
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(y: bool) -> bool {\n...\n}\n\n\n\n"
