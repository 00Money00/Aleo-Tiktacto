---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 18
      num_constraints: 18
      at: 0af86ba5c2862fbd3f6877188bf7b64b0e1c943322d72aa1eeff86e3d4782a66
      bt: 337d485395ace679b31230eee59c92054ba721ca86d569123ddd4625d611b595
      ct: 6c0e1fd41ec8a0fa1ac6c5c845ac3158b5a6846d089b98fab88b4d9b9e41f6a8
    output:
      - input_file: input/dummy.in
        output:
          registers:
            r0:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let x = 2u8;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let x = 2u8;"
                  type_: ~
                  value:
                    Value:
                      Integer:
                        - U8
                        - "2"
                        - line_start: 4
                          line_stop: 4
                          col_start: 13
                          col_stop: 16
                          path: compiler-test
                          content: "    let x = 2u8;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 16
                    path: compiler-test
                    content: "    let x = 2u8;"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let y = x;\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let y = x;"
                  type_: ~
                  value:
                    Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let y = x;\\\"}\"}"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 14
                    path: compiler-test
                    content: "    let y = x;"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"z\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let z = y / 2u8;\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let z = y / 2u8;"
                  type_: ~
                  value:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let z = y / 2u8;\\\"}\"}"
                      right:
                        Value:
                          Integer:
                            - U8
                            - "2"
                            - line_start: 6
                              line_stop: 6
                              col_start: 17
                              col_stop: 20
                              path: compiler-test
                              content: "    let z = y / 2u8;"
                      op: Div
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 13
                        col_stop: 20
                        path: compiler-test
                        content: "    let z = y / 2u8;"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 20
                    path: compiler-test
                    content: "    let z = y / 2u8;"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"z\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return z == 1 == a;\\\"}\"}"
                          right:
                            Value:
                              Implicit:
                                - "1"
                                - line_start: 7
                                  line_stop: 7
                                  col_start: 17
                                  col_stop: 18
                                  path: compiler-test
                                  content: "    return z == 1 == a;"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 12
                            col_stop: 18
                            path: compiler-test
                            content: "    return z == 1 == a;"
                      right:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":22,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return z == 1 == a;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 12
                        col_stop: 23
                        path: compiler-test
                        content: "    return z == 1 == a;"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    return z == 1 == a;"
            span:
              line_start: 3
              line_stop: 8
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(a: bool) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 8
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: bool) -> bool {\n...\n}\n\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let x = 2u8;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let x = 2u8;"
                  type_: ~
                  value:
                    Value:
                      Integer:
                        - U8
                        - "2"
                        - line_start: 4
                          line_stop: 4
                          col_start: 13
                          col_stop: 16
                          path: compiler-test
                          content: "    let x = 2u8;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 16
                    path: compiler-test
                    content: "    let x = 2u8;"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let y = x;\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let y = x;"
                  type_: ~
                  value:
                    Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let y = x;\\\"}\"}"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 14
                    path: compiler-test
                    content: "    let y = x;"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"z\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let z = y / 2u8;\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let z = y / 2u8;"
                  type_: ~
                  value:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let z = y / 2u8;\\\"}\"}"
                      right:
                        Value:
                          Integer:
                            - U8
                            - "2"
                            - line_start: 6
                              line_stop: 6
                              col_start: 17
                              col_stop: 20
                              path: compiler-test
                              content: "    let z = y / 2u8;"
                      op: Div
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 13
                        col_stop: 20
                        path: compiler-test
                        content: "    let z = y / 2u8;"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 20
                    path: compiler-test
                    content: "    let z = y / 2u8;"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"z\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return z == 1 == a;\\\"}\"}"
                          right:
                            Value:
                              Implicit:
                                - "1"
                                - line_start: 7
                                  line_stop: 7
                                  col_start: 17
                                  col_stop: 18
                                  path: compiler-test
                                  content: "    return z == 1 == a;"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 12
                            col_stop: 18
                            path: compiler-test
                            content: "    return z == 1 == a;"
                      right:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":22,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return z == 1 == a;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 12
                        col_stop: 23
                        path: compiler-test
                        content: "    return z == 1 == a;"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    return z == 1 == a;"
            span:
              line_start: 3
              line_stop: 8
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(a: bool) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 8
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: bool) -> bool {\n...\n}\n\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let x = 2u8;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let x = 2u8;"
                  type_:
                    IntegerType: U8
                  value:
                    Value:
                      Integer:
                        - U8
                        - "2"
                        - line_start: 4
                          line_stop: 4
                          col_start: 13
                          col_stop: 16
                          path: compiler-test
                          content: "    let x = 2u8;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 16
                    path: compiler-test
                    content: "    let x = 2u8;"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let y = x;\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let y = x;"
                  type_:
                    IntegerType: U8
                  value:
                    Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let y = x;\\\"}\"}"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 14
                    path: compiler-test
                    content: "    let y = x;"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"z\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let z = y / 2u8;\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let z = y / 2u8;"
                  type_:
                    IntegerType: U8
                  value:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let z = y / 2u8;\\\"}\"}"
                      right:
                        Value:
                          Integer:
                            - U8
                            - "2"
                            - line_start: 6
                              line_stop: 6
                              col_start: 17
                              col_stop: 20
                              path: compiler-test
                              content: "    let z = y / 2u8;"
                      op: Div
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 13
                        col_stop: 20
                        path: compiler-test
                        content: "    let z = y / 2u8;"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 20
                    path: compiler-test
                    content: "    let z = y / 2u8;"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"z\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return z == 1 == a;\\\"}\"}"
                          right:
                            Value:
                              Integer:
                                - U8
                                - "1"
                                - line_start: 7
                                  line_stop: 7
                                  col_start: 17
                                  col_stop: 18
                                  path: compiler-test
                                  content: "    return z == 1 == a;"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 12
                            col_stop: 18
                            path: compiler-test
                            content: "    return z == 1 == a;"
                      right:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":22,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return z == 1 == a;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 12
                        col_stop: 23
                        path: compiler-test
                        content: "    return z == 1 == a;"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    return z == 1 == a;"
            span:
              line_start: 3
              line_stop: 8
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(a: bool) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 8
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: bool) -> bool {\n...\n}\n\n\n"
