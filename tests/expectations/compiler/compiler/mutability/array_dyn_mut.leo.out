---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 1277
      num_constraints: 1604
      at: c5d2d5bbb85d0f7ba48170fdb652aff057db6d1babf378d8a548af874e0734ff
      bt: 726f3c39d11da5bc8487b8b7228a55cb7819a47a9b674d41f9c756c6927fb55a
      ct: 7c4917152b59cb9caa30bad7d5119a3e36c40f7a783fdb8ff602dd5447573cc7
    output:
      - input_file: input/index1.in
        output:
          registers:
            r0:
              type: "[u32; 3]"
              value: "\"303\""
      - input_file: input/index2.in
        output:
          registers:
            r0:
              type: "[u32; 3]"
              value: "\"150\""
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(i: u32) -> [u32; 3] {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(i: u32) -> [u32; 3] {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(i: u32) -> [u32; 3] {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(i: u32) -> [u32; 3] {"
          output:
            Array:
              - IntegerType: U32
              - - value: "3"
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = [1u32, 2u32, 3u32];\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let a = [1u32, 2u32, 3u32];"
                  type_: ~
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            Value:
                              Integer:
                                - U32
                                - "1"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 14
                                  col_stop: 18
                                  path: compiler-test
                                  content: "    let a = [1u32, 2u32, 3u32];"
                        - Expression:
                            Value:
                              Integer:
                                - U32
                                - "2"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 20
                                  col_stop: 24
                                  path: compiler-test
                                  content: "    let a = [1u32, 2u32, 3u32];"
                        - Expression:
                            Value:
                              Integer:
                                - U32
                                - "3"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 26
                                  col_stop: 30
                                  path: compiler-test
                                  content: "    let a = [1u32, 2u32, 3u32];"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 13
                        col_stop: 31
                        path: compiler-test
                        content: "    let a = [1u32, 2u32, 3u32];"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 31
                    path: compiler-test
                    content: "    let a = [1u32, 2u32, 3u32];"
              - Assign:
                  operation: Add
                  assignee:
                    identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i - 1] += a[i];\\\"}\"}"
                    accesses:
                      - ArrayIndex:
                          Binary:
                            left:
                              Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i - 1] += a[i];\\\"}\"}"
                            right:
                              Value:
                                Implicit:
                                  - "1"
                                  - line_start: 5
                                    line_stop: 5
                                    col_start: 11
                                    col_stop: 12
                                    path: compiler-test
                                    content: "    a[i - 1] += a[i];"
                            op: Sub
                            span:
                              line_start: 5
                              line_stop: 5
                              col_start: 7
                              col_stop: 12
                              path: compiler-test
                              content: "    a[i - 1] += a[i];"
                    span:
                      line_start: 5
                      line_stop: 5
                      col_start: 5
                      col_stop: 13
                      path: compiler-test
                      content: "    a[i - 1] += a[i];"
                  value:
                    ArrayAccess:
                      array:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i - 1] += a[i];\\\"}\"}"
                      index:
                        Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":19,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i - 1] += a[i];\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 17
                        col_stop: 21
                        path: compiler-test
                        content: "    a[i - 1] += a[i];"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 21
                    path: compiler-test
                    content: "    a[i - 1] += a[i];"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i] = 0;\\\"}\"}"
                    accesses:
                      - ArrayIndex:
                          Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i] = 0;\\\"}\"}"
                    span:
                      line_start: 6
                      line_stop: 6
                      col_start: 5
                      col_stop: 9
                      path: compiler-test
                      content: "    a[i] = 0;"
                  value:
                    Value:
                      Implicit:
                        - "0"
                        - line_start: 6
                          line_stop: 6
                          col_start: 12
                          col_stop: 13
                          path: compiler-test
                          content: "    a[i] = 0;"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 13
                    path: compiler-test
                    content: "    a[i] = 0;"
              - Return:
                  expression:
                    Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a;\\\"}\"}"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 13
                    path: compiler-test
                    content: "    return a;"
            span:
              line_start: 3
              line_stop: 9
              col_start: 35
              col_stop: 2
              path: compiler-test
              content: "function main(i: u32) -> [u32; 3] {\n...\n}"
          span:
            line_start: 3
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(i: u32) -> [u32; 3] {\n...\n}\n\n\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(i: u32) -> [u32; 3] {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(i: u32) -> [u32; 3] {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(i: u32) -> [u32; 3] {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(i: u32) -> [u32; 3] {"
          output:
            Array:
              - IntegerType: U32
              - - value: "3"
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = [1u32, 2u32, 3u32];\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let a = [1u32, 2u32, 3u32];"
                  type_: ~
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            Value:
                              Integer:
                                - U32
                                - "1"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 14
                                  col_stop: 18
                                  path: compiler-test
                                  content: "    let a = [1u32, 2u32, 3u32];"
                        - Expression:
                            Value:
                              Integer:
                                - U32
                                - "2"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 20
                                  col_stop: 24
                                  path: compiler-test
                                  content: "    let a = [1u32, 2u32, 3u32];"
                        - Expression:
                            Value:
                              Integer:
                                - U32
                                - "3"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 26
                                  col_stop: 30
                                  path: compiler-test
                                  content: "    let a = [1u32, 2u32, 3u32];"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 13
                        col_stop: 31
                        path: compiler-test
                        content: "    let a = [1u32, 2u32, 3u32];"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 31
                    path: compiler-test
                    content: "    let a = [1u32, 2u32, 3u32];"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i - 1] += a[i];\\\"}\"}"
                    accesses:
                      - ArrayIndex:
                          Binary:
                            left:
                              Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i - 1] += a[i];\\\"}\"}"
                            right:
                              Value:
                                Implicit:
                                  - "1"
                                  - line_start: 5
                                    line_stop: 5
                                    col_start: 11
                                    col_stop: 12
                                    path: compiler-test
                                    content: "    a[i - 1] += a[i];"
                            op: Sub
                            span:
                              line_start: 5
                              line_stop: 5
                              col_start: 7
                              col_stop: 12
                              path: compiler-test
                              content: "    a[i - 1] += a[i];"
                    span:
                      line_start: 5
                      line_stop: 5
                      col_start: 5
                      col_stop: 13
                      path: compiler-test
                      content: "    a[i - 1] += a[i];"
                  value:
                    Binary:
                      left:
                        ArrayAccess:
                          array:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i - 1] += a[i];\\\"}\"}"
                          index:
                            Binary:
                              left:
                                Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i - 1] += a[i];\\\"}\"}"
                              right:
                                Value:
                                  Implicit:
                                    - "1"
                                    - line_start: 5
                                      line_stop: 5
                                      col_start: 11
                                      col_stop: 12
                                      path: compiler-test
                                      content: "    a[i - 1] += a[i];"
                              op: Sub
                              span:
                                line_start: 5
                                line_stop: 5
                                col_start: 7
                                col_stop: 12
                                path: compiler-test
                                content: "    a[i - 1] += a[i];"
                          span:
                            line_start: 5
                            line_stop: 5
                            col_start: 5
                            col_stop: 21
                            path: compiler-test
                            content: "    a[i - 1] += a[i];"
                      right:
                        ArrayAccess:
                          array:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i - 1] += a[i];\\\"}\"}"
                          index:
                            Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":19,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i - 1] += a[i];\\\"}\"}"
                          span:
                            line_start: 5
                            line_stop: 5
                            col_start: 17
                            col_stop: 21
                            path: compiler-test
                            content: "    a[i - 1] += a[i];"
                      op: Add
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 5
                        col_stop: 21
                        path: compiler-test
                        content: "    a[i - 1] += a[i];"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 21
                    path: compiler-test
                    content: "    a[i - 1] += a[i];"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i] = 0;\\\"}\"}"
                    accesses:
                      - ArrayIndex:
                          Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i] = 0;\\\"}\"}"
                    span:
                      line_start: 6
                      line_stop: 6
                      col_start: 5
                      col_stop: 9
                      path: compiler-test
                      content: "    a[i] = 0;"
                  value:
                    Value:
                      Implicit:
                        - "0"
                        - line_start: 6
                          line_stop: 6
                          col_start: 12
                          col_stop: 13
                          path: compiler-test
                          content: "    a[i] = 0;"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 13
                    path: compiler-test
                    content: "    a[i] = 0;"
              - Return:
                  expression:
                    Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a;\\\"}\"}"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 13
                    path: compiler-test
                    content: "    return a;"
            span:
              line_start: 3
              line_stop: 9
              col_start: 35
              col_stop: 2
              path: compiler-test
              content: "function main(i: u32) -> [u32; 3] {\n...\n}"
          span:
            line_start: 3
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(i: u32) -> [u32; 3] {\n...\n}\n\n\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(i: u32) -> [u32; 3] {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(i: u32) -> [u32; 3] {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(i: u32) -> [u32; 3] {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(i: u32) -> [u32; 3] {"
          output:
            Array:
              - IntegerType: U32
              - - value: "3"
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = [1u32, 2u32, 3u32];\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let a = [1u32, 2u32, 3u32];"
                  type_:
                    Array:
                      - IntegerType: U32
                      - - value: "3"
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            Value:
                              Integer:
                                - U32
                                - "1"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 14
                                  col_stop: 18
                                  path: compiler-test
                                  content: "    let a = [1u32, 2u32, 3u32];"
                        - Expression:
                            Value:
                              Integer:
                                - U32
                                - "2"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 20
                                  col_stop: 24
                                  path: compiler-test
                                  content: "    let a = [1u32, 2u32, 3u32];"
                        - Expression:
                            Value:
                              Integer:
                                - U32
                                - "3"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 26
                                  col_stop: 30
                                  path: compiler-test
                                  content: "    let a = [1u32, 2u32, 3u32];"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 13
                        col_stop: 31
                        path: compiler-test
                        content: "    let a = [1u32, 2u32, 3u32];"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 31
                    path: compiler-test
                    content: "    let a = [1u32, 2u32, 3u32];"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i - 1] += a[i];\\\"}\"}"
                    accesses:
                      - ArrayIndex:
                          Binary:
                            left:
                              Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i - 1] += a[i];\\\"}\"}"
                            right:
                              Value:
                                Integer:
                                  - U32
                                  - "1"
                                  - line_start: 5
                                    line_stop: 5
                                    col_start: 11
                                    col_stop: 12
                                    path: compiler-test
                                    content: "    a[i - 1] += a[i];"
                            op: Sub
                            span:
                              line_start: 5
                              line_stop: 5
                              col_start: 7
                              col_stop: 12
                              path: compiler-test
                              content: "    a[i - 1] += a[i];"
                    span:
                      line_start: 5
                      line_stop: 5
                      col_start: 5
                      col_stop: 13
                      path: compiler-test
                      content: "    a[i - 1] += a[i];"
                  value:
                    Binary:
                      left:
                        ArrayAccess:
                          array:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i - 1] += a[i];\\\"}\"}"
                          index:
                            Binary:
                              left:
                                Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i - 1] += a[i];\\\"}\"}"
                              right:
                                Value:
                                  Integer:
                                    - U32
                                    - "1"
                                    - line_start: 5
                                      line_stop: 5
                                      col_start: 11
                                      col_stop: 12
                                      path: compiler-test
                                      content: "    a[i - 1] += a[i];"
                              op: Sub
                              span:
                                line_start: 5
                                line_stop: 5
                                col_start: 7
                                col_stop: 12
                                path: compiler-test
                                content: "    a[i - 1] += a[i];"
                          span:
                            line_start: 5
                            line_stop: 5
                            col_start: 5
                            col_stop: 21
                            path: compiler-test
                            content: "    a[i - 1] += a[i];"
                      right:
                        ArrayAccess:
                          array:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i - 1] += a[i];\\\"}\"}"
                          index:
                            Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":19,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i - 1] += a[i];\\\"}\"}"
                          span:
                            line_start: 5
                            line_stop: 5
                            col_start: 17
                            col_stop: 21
                            path: compiler-test
                            content: "    a[i - 1] += a[i];"
                      op: Add
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 5
                        col_stop: 21
                        path: compiler-test
                        content: "    a[i - 1] += a[i];"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 21
                    path: compiler-test
                    content: "    a[i - 1] += a[i];"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i] = 0;\\\"}\"}"
                    accesses:
                      - ArrayIndex:
                          Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i] = 0;\\\"}\"}"
                    span:
                      line_start: 6
                      line_stop: 6
                      col_start: 5
                      col_stop: 9
                      path: compiler-test
                      content: "    a[i] = 0;"
                  value:
                    Value:
                      Integer:
                        - U32
                        - "0"
                        - line_start: 6
                          line_stop: 6
                          col_start: 12
                          col_stop: 13
                          path: compiler-test
                          content: "    a[i] = 0;"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 13
                    path: compiler-test
                    content: "    a[i] = 0;"
              - Return:
                  expression:
                    Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a;\\\"}\"}"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 13
                    path: compiler-test
                    content: "    return a;"
            span:
              line_start: 3
              line_stop: 9
              col_start: 35
              col_stop: 2
              path: compiler-test
              content: "function main(i: u32) -> [u32; 3] {\n...\n}"
          span:
            line_start: 3
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(i: u32) -> [u32; 3] {\n...\n}\n\n\n\n"
