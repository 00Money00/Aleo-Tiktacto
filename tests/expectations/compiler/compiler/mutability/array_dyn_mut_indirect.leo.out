---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 924
      num_constraints: 1310
      at: f4c2d999e3cfce5433bbde762d8c826c8df8764b9223dd5d7147cd09810f25b7
      bt: fa02e90dd0bde30bc5feab46c3ea4fae0493dc6808d56bc6a1d937eb17297981
      ct: 8f6f484310918a186286820e4efd1e7494774c314e9e5c6f78bb60bdeae948f4
    output:
      - input_file: input/index1_tuple.in
        output:
          registers:
            r0:
              type: "[(u32, u32); 3]"
              value: "\"(1, 1)(0, 1)(3, 3)\""
      - input_file: input/index2_tuple.in
        output:
          registers:
            r0:
              type: "[(u32, u32); 3]"
              value: "\"(1, 1)(2, 2)(0, 1)\""
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(i: u32) -> [(u32, u32); 3] {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(i: u32) -> [(u32, u32); 3] {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(i: u32) -> [(u32, u32); 3] {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(i: u32) -> [(u32, u32); 3] {"
          output:
            Array:
              - Tuple:
                  - IntegerType: U32
                  - IntegerType: U32
              - - value: "3"
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                  type_: ~
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            TupleInit:
                              elements:
                                - Value:
                                    Integer:
                                      - U32
                                      - "1"
                                      - line_start: 4
                                        line_stop: 4
                                        col_start: 15
                                        col_stop: 19
                                        path: compiler-test
                                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                                - Value:
                                    Integer:
                                      - U32
                                      - "1"
                                      - line_start: 4
                                        line_stop: 4
                                        col_start: 21
                                        col_stop: 25
                                        path: compiler-test
                                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 14
                                col_stop: 26
                                path: compiler-test
                                content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                        - Expression:
                            TupleInit:
                              elements:
                                - Value:
                                    Integer:
                                      - U32
                                      - "2"
                                      - line_start: 4
                                        line_stop: 4
                                        col_start: 29
                                        col_stop: 33
                                        path: compiler-test
                                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                                - Value:
                                    Integer:
                                      - U32
                                      - "2"
                                      - line_start: 4
                                        line_stop: 4
                                        col_start: 35
                                        col_stop: 39
                                        path: compiler-test
                                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 28
                                col_stop: 40
                                path: compiler-test
                                content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                        - Expression:
                            TupleInit:
                              elements:
                                - Value:
                                    Integer:
                                      - U32
                                      - "3"
                                      - line_start: 4
                                        line_stop: 4
                                        col_start: 43
                                        col_stop: 47
                                        path: compiler-test
                                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                                - Value:
                                    Integer:
                                      - U32
                                      - "3"
                                      - line_start: 4
                                        line_stop: 4
                                        col_start: 49
                                        col_stop: 53
                                        path: compiler-test
                                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 42
                                col_stop: 54
                                path: compiler-test
                                content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 13
                        col_stop: 55
                        path: compiler-test
                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 55
                    path: compiler-test
                    content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i].0 = 0;\\\"}\"}"
                    accesses:
                      - ArrayIndex:
                          Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i].0 = 0;\\\"}\"}"
                      - Tuple:
                          - value: "0"
                          - line_start: 5
                            line_stop: 5
                            col_start: 5
                            col_stop: 11
                            path: compiler-test
                            content: "    a[i].0 = 0;"
                    span:
                      line_start: 5
                      line_stop: 5
                      col_start: 5
                      col_stop: 11
                      path: compiler-test
                      content: "    a[i].0 = 0;"
                  value:
                    Value:
                      Implicit:
                        - "0"
                        - line_start: 5
                          line_stop: 5
                          col_start: 14
                          col_stop: 15
                          path: compiler-test
                          content: "    a[i].0 = 0;"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 15
                    path: compiler-test
                    content: "    a[i].0 = 0;"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i].1 = 1;\\\"}\"}"
                    accesses:
                      - ArrayIndex:
                          Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i].1 = 1;\\\"}\"}"
                      - Tuple:
                          - value: "1"
                          - line_start: 6
                            line_stop: 6
                            col_start: 5
                            col_stop: 11
                            path: compiler-test
                            content: "    a[i].1 = 1;"
                    span:
                      line_start: 6
                      line_stop: 6
                      col_start: 5
                      col_stop: 11
                      path: compiler-test
                      content: "    a[i].1 = 1;"
                  value:
                    Value:
                      Implicit:
                        - "1"
                        - line_start: 6
                          line_stop: 6
                          col_start: 14
                          col_stop: 15
                          path: compiler-test
                          content: "    a[i].1 = 1;"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 15
                    path: compiler-test
                    content: "    a[i].1 = 1;"
              - Return:
                  expression:
                    Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a;\\\"}\"}"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 13
                    path: compiler-test
                    content: "    return a;"
            span:
              line_start: 3
              line_stop: 9
              col_start: 42
              col_stop: 2
              path: compiler-test
              content: "function main(i: u32) -> [(u32, u32); 3] {\n...\n}"
          span:
            line_start: 3
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(i: u32) -> [(u32, u32); 3] {\n...\n}\n\n\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(i: u32) -> [(u32, u32); 3] {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(i: u32) -> [(u32, u32); 3] {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(i: u32) -> [(u32, u32); 3] {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(i: u32) -> [(u32, u32); 3] {"
          output:
            Array:
              - Tuple:
                  - IntegerType: U32
                  - IntegerType: U32
              - - value: "3"
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                  type_: ~
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            TupleInit:
                              elements:
                                - Value:
                                    Integer:
                                      - U32
                                      - "1"
                                      - line_start: 4
                                        line_stop: 4
                                        col_start: 15
                                        col_stop: 19
                                        path: compiler-test
                                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                                - Value:
                                    Integer:
                                      - U32
                                      - "1"
                                      - line_start: 4
                                        line_stop: 4
                                        col_start: 21
                                        col_stop: 25
                                        path: compiler-test
                                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 14
                                col_stop: 26
                                path: compiler-test
                                content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                        - Expression:
                            TupleInit:
                              elements:
                                - Value:
                                    Integer:
                                      - U32
                                      - "2"
                                      - line_start: 4
                                        line_stop: 4
                                        col_start: 29
                                        col_stop: 33
                                        path: compiler-test
                                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                                - Value:
                                    Integer:
                                      - U32
                                      - "2"
                                      - line_start: 4
                                        line_stop: 4
                                        col_start: 35
                                        col_stop: 39
                                        path: compiler-test
                                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 28
                                col_stop: 40
                                path: compiler-test
                                content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                        - Expression:
                            TupleInit:
                              elements:
                                - Value:
                                    Integer:
                                      - U32
                                      - "3"
                                      - line_start: 4
                                        line_stop: 4
                                        col_start: 43
                                        col_stop: 47
                                        path: compiler-test
                                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                                - Value:
                                    Integer:
                                      - U32
                                      - "3"
                                      - line_start: 4
                                        line_stop: 4
                                        col_start: 49
                                        col_stop: 53
                                        path: compiler-test
                                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 42
                                col_stop: 54
                                path: compiler-test
                                content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 13
                        col_stop: 55
                        path: compiler-test
                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 55
                    path: compiler-test
                    content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i].0 = 0;\\\"}\"}"
                    accesses:
                      - ArrayIndex:
                          Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i].0 = 0;\\\"}\"}"
                      - Tuple:
                          - value: "0"
                          - line_start: 5
                            line_stop: 5
                            col_start: 5
                            col_stop: 11
                            path: compiler-test
                            content: "    a[i].0 = 0;"
                    span:
                      line_start: 5
                      line_stop: 5
                      col_start: 5
                      col_stop: 11
                      path: compiler-test
                      content: "    a[i].0 = 0;"
                  value:
                    Value:
                      Implicit:
                        - "0"
                        - line_start: 5
                          line_stop: 5
                          col_start: 14
                          col_stop: 15
                          path: compiler-test
                          content: "    a[i].0 = 0;"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 15
                    path: compiler-test
                    content: "    a[i].0 = 0;"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i].1 = 1;\\\"}\"}"
                    accesses:
                      - ArrayIndex:
                          Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i].1 = 1;\\\"}\"}"
                      - Tuple:
                          - value: "1"
                          - line_start: 6
                            line_stop: 6
                            col_start: 5
                            col_stop: 11
                            path: compiler-test
                            content: "    a[i].1 = 1;"
                    span:
                      line_start: 6
                      line_stop: 6
                      col_start: 5
                      col_stop: 11
                      path: compiler-test
                      content: "    a[i].1 = 1;"
                  value:
                    Value:
                      Implicit:
                        - "1"
                        - line_start: 6
                          line_stop: 6
                          col_start: 14
                          col_stop: 15
                          path: compiler-test
                          content: "    a[i].1 = 1;"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 15
                    path: compiler-test
                    content: "    a[i].1 = 1;"
              - Return:
                  expression:
                    Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a;\\\"}\"}"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 13
                    path: compiler-test
                    content: "    return a;"
            span:
              line_start: 3
              line_stop: 9
              col_start: 42
              col_stop: 2
              path: compiler-test
              content: "function main(i: u32) -> [(u32, u32); 3] {\n...\n}"
          span:
            line_start: 3
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(i: u32) -> [(u32, u32); 3] {\n...\n}\n\n\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(i: u32) -> [(u32, u32); 3] {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(i: u32) -> [(u32, u32); 3] {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(i: u32) -> [(u32, u32); 3] {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(i: u32) -> [(u32, u32); 3] {"
          output:
            Array:
              - Tuple:
                  - IntegerType: U32
                  - IntegerType: U32
              - - value: "3"
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                  type_:
                    Array:
                      - Tuple:
                          - IntegerType: U32
                          - IntegerType: U32
                      - - value: "3"
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            TupleInit:
                              elements:
                                - Value:
                                    Integer:
                                      - U32
                                      - "1"
                                      - line_start: 4
                                        line_stop: 4
                                        col_start: 15
                                        col_stop: 19
                                        path: compiler-test
                                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                                - Value:
                                    Integer:
                                      - U32
                                      - "1"
                                      - line_start: 4
                                        line_stop: 4
                                        col_start: 21
                                        col_stop: 25
                                        path: compiler-test
                                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 14
                                col_stop: 26
                                path: compiler-test
                                content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                        - Expression:
                            TupleInit:
                              elements:
                                - Value:
                                    Integer:
                                      - U32
                                      - "2"
                                      - line_start: 4
                                        line_stop: 4
                                        col_start: 29
                                        col_stop: 33
                                        path: compiler-test
                                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                                - Value:
                                    Integer:
                                      - U32
                                      - "2"
                                      - line_start: 4
                                        line_stop: 4
                                        col_start: 35
                                        col_stop: 39
                                        path: compiler-test
                                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 28
                                col_stop: 40
                                path: compiler-test
                                content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                        - Expression:
                            TupleInit:
                              elements:
                                - Value:
                                    Integer:
                                      - U32
                                      - "3"
                                      - line_start: 4
                                        line_stop: 4
                                        col_start: 43
                                        col_stop: 47
                                        path: compiler-test
                                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                                - Value:
                                    Integer:
                                      - U32
                                      - "3"
                                      - line_start: 4
                                        line_stop: 4
                                        col_start: 49
                                        col_stop: 53
                                        path: compiler-test
                                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 42
                                col_stop: 54
                                path: compiler-test
                                content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 13
                        col_stop: 55
                        path: compiler-test
                        content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 55
                    path: compiler-test
                    content: "    let a = [(1u32, 1u32), (2u32, 2u32), (3u32, 3u32)];"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i].0 = 0;\\\"}\"}"
                    accesses:
                      - ArrayIndex:
                          Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i].0 = 0;\\\"}\"}"
                      - Tuple:
                          - value: "0"
                          - line_start: 5
                            line_stop: 5
                            col_start: 5
                            col_stop: 11
                            path: compiler-test
                            content: "    a[i].0 = 0;"
                    span:
                      line_start: 5
                      line_stop: 5
                      col_start: 5
                      col_stop: 11
                      path: compiler-test
                      content: "    a[i].0 = 0;"
                  value:
                    Value:
                      Integer:
                        - U32
                        - "0"
                        - line_start: 5
                          line_stop: 5
                          col_start: 14
                          col_stop: 15
                          path: compiler-test
                          content: "    a[i].0 = 0;"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 15
                    path: compiler-test
                    content: "    a[i].0 = 0;"
              - Assign:
                  operation: Assign
                  assignee:
                    identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i].1 = 1;\\\"}\"}"
                    accesses:
                      - ArrayIndex:
                          Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a[i].1 = 1;\\\"}\"}"
                      - Tuple:
                          - value: "1"
                          - line_start: 6
                            line_stop: 6
                            col_start: 5
                            col_stop: 11
                            path: compiler-test
                            content: "    a[i].1 = 1;"
                    span:
                      line_start: 6
                      line_stop: 6
                      col_start: 5
                      col_stop: 11
                      path: compiler-test
                      content: "    a[i].1 = 1;"
                  value:
                    Value:
                      Integer:
                        - U32
                        - "1"
                        - line_start: 6
                          line_stop: 6
                          col_start: 14
                          col_stop: 15
                          path: compiler-test
                          content: "    a[i].1 = 1;"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 15
                    path: compiler-test
                    content: "    a[i].1 = 1;"
              - Return:
                  expression:
                    Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a;\\\"}\"}"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 13
                    path: compiler-test
                    content: "    return a;"
            span:
              line_start: 3
              line_stop: 9
              col_start: 42
              col_stop: 2
              path: compiler-test
              content: "function main(i: u32) -> [(u32, u32); 3] {\n...\n}"
          span:
            line_start: 3
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(i: u32) -> [(u32, u32); 3] {\n...\n}\n\n\n\n"
