---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 512
      num_constraints: 675
      at: 5d537a7963ae43ff2b7b0222c18a237015c858d7203554574a785cd56d4d24c5
      bt: 192ca0dd8a20d69b443b952a7226e8c82936fedd2c9735d2b792883a01e46e3b
      ct: 04609638ad65317edb75529646b34f10a846b39b3ddb783e4aeceddde17b79f9
    output:
      - input_file: inputs/u32_3.in
        output:
          registers:
            a:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: u32) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = 0u32;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let b = 0u32;"
                  type_: ~
                  value:
                    Value:
                      Integer:
                        - U32
                        - "0"
                        - line_start: 4
                          line_stop: 4
                          col_start: 13
                          col_stop: 17
                          path: compiler-test
                          content: "    let b = 0u32;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 17
                    path: compiler-test
                    content: "    let b = 0u32;"
              - Conditional:
                  condition:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":8,\\\"col_stop\\\":9,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    if x == 3 {\\\"}\"}"
                      right:
                        Value:
                          Implicit:
                            - "3"
                            - line_start: 6
                              line_stop: 6
                              col_start: 13
                              col_stop: 14
                              path: compiler-test
                              content: "    if x == 3 {"
                      op: Eq
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 8
                        col_stop: 14
                        path: compiler-test
                        content: "    if x == 3 {"
                  block:
                    statements:
                      - Iteration:
                          variable: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        for i in 0..4 {\\\"}\"}"
                          start:
                            Value:
                              Implicit:
                                - "0"
                                - line_start: 7
                                  line_stop: 7
                                  col_start: 18
                                  col_stop: 19
                                  path: compiler-test
                                  content: "        for i in 0..4 {"
                          stop:
                            Value:
                              Implicit:
                                - "4"
                                - line_start: 7
                                  line_stop: 7
                                  col_start: 21
                                  col_stop: 22
                                  path: compiler-test
                                  content: "        for i in 0..4 {"
                          block:
                            statements:
                              - Assign:
                                  operation: Add
                                  assignee:
                                    identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            b += i;\\\"}\"}"
                                    accesses: []
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 13
                                      col_stop: 14
                                      path: compiler-test
                                      content: "            b += i;"
                                  value:
                                    Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":18,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            b += i;\\\"}\"}"
                                  span:
                                    line_start: 8
                                    line_stop: 8
                                    col_start: 13
                                    col_stop: 19
                                    path: compiler-test
                                    content: "            b += i;"
                            span:
                              line_start: 7
                              line_stop: 9
                              col_start: 23
                              col_stop: 10
                              path: compiler-test
                              content: "        for i in 0..4 {\n...\n        }"
                          span:
                            line_start: 7
                            line_stop: 9
                            col_start: 9
                            col_stop: 10
                            path: compiler-test
                            content: "        for i in 0..4 {\n...\n        }"
                    span:
                      line_start: 6
                      line_stop: 10
                      col_start: 15
                      col_stop: 6
                      path: compiler-test
                      content: "    if x == 3 {\n...\n    }"
                  next: ~
                  span:
                    line_start: 6
                    line_stop: 10
                    col_start: 5
                    col_stop: 6
                    path: compiler-test
                    content: "    if x == 3 {\n...\n    }\n\n"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"r\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let r: u32 = x == 3 ? 6 : 0;\\\"}\"}"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let r: u32 = x == 3 ? 6 : 0;"
                  type_:
                    IntegerType: U32
                  value:
                    Ternary:
                      condition:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":18,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let r: u32 = x == 3 ? 6 : 0;\\\"}\"}"
                          right:
                            Value:
                              Implicit:
                                - "3"
                                - line_start: 12
                                  line_stop: 12
                                  col_start: 23
                                  col_stop: 24
                                  path: compiler-test
                                  content: "    let r: u32 = x == 3 ? 6 : 0;"
                          op: Eq
                          span:
                            line_start: 12
                            line_stop: 12
                            col_start: 18
                            col_stop: 24
                            path: compiler-test
                            content: "    let r: u32 = x == 3 ? 6 : 0;"
                      if_true:
                        Value:
                          Implicit:
                            - "6"
                            - line_start: 12
                              line_stop: 12
                              col_start: 27
                              col_stop: 28
                              path: compiler-test
                              content: "    let r: u32 = x == 3 ? 6 : 0;"
                      if_false:
                        Value:
                          Implicit:
                            - "0"
                            - line_start: 12
                              line_stop: 12
                              col_start: 31
                              col_stop: 32
                              path: compiler-test
                              content: "    let r: u32 = x == 3 ? 6 : 0;"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 18
                        col_stop: 32
                        path: compiler-test
                        content: "    let r: u32 = x == 3 ? 6 : 0;"
                  span:
                    line_start: 12
                    line_stop: 12
                    col_start: 5
                    col_stop: 32
                    path: compiler-test
                    content: "    let r: u32 = x == 3 ? 6 : 0;"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"r\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return r == b;\\\"}\"}"
                      right:
                        Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return r == b;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 14
                        line_stop: 14
                        col_start: 12
                        col_stop: 18
                        path: compiler-test
                        content: "    return r == b;"
                  span:
                    line_start: 14
                    line_stop: 14
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return r == b;"
            span:
              line_start: 3
              line_stop: 15
              col_start: 31
              col_stop: 2
              path: compiler-test
              content: "function main(x: u32) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 15
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: u32) -> bool {\n...\n}\n\n\n\n\n\n\n\n\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: u32) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = 0u32;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let b = 0u32;"
                  type_: ~
                  value:
                    Value:
                      Integer:
                        - U32
                        - "0"
                        - line_start: 4
                          line_stop: 4
                          col_start: 13
                          col_stop: 17
                          path: compiler-test
                          content: "    let b = 0u32;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 17
                    path: compiler-test
                    content: "    let b = 0u32;"
              - Conditional:
                  condition:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":8,\\\"col_stop\\\":9,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    if x == 3 {\\\"}\"}"
                      right:
                        Value:
                          Implicit:
                            - "3"
                            - line_start: 6
                              line_stop: 6
                              col_start: 13
                              col_stop: 14
                              path: compiler-test
                              content: "    if x == 3 {"
                      op: Eq
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 8
                        col_stop: 14
                        path: compiler-test
                        content: "    if x == 3 {"
                  block:
                    statements:
                      - Iteration:
                          variable: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        for i in 0..4 {\\\"}\"}"
                          start:
                            Value:
                              Implicit:
                                - "0"
                                - line_start: 7
                                  line_stop: 7
                                  col_start: 18
                                  col_stop: 19
                                  path: compiler-test
                                  content: "        for i in 0..4 {"
                          stop:
                            Value:
                              Implicit:
                                - "4"
                                - line_start: 7
                                  line_stop: 7
                                  col_start: 21
                                  col_stop: 22
                                  path: compiler-test
                                  content: "        for i in 0..4 {"
                          block:
                            statements:
                              - Assign:
                                  operation: Assign
                                  assignee:
                                    identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            b += i;\\\"}\"}"
                                    accesses: []
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 13
                                      col_stop: 14
                                      path: compiler-test
                                      content: "            b += i;"
                                  value:
                                    Binary:
                                      left:
                                        Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            b += i;\\\"}\"}"
                                      right:
                                        Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":18,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            b += i;\\\"}\"}"
                                      op: Add
                                      span:
                                        line_start: 8
                                        line_stop: 8
                                        col_start: 13
                                        col_stop: 19
                                        path: compiler-test
                                        content: "            b += i;"
                                  span:
                                    line_start: 8
                                    line_stop: 8
                                    col_start: 13
                                    col_stop: 19
                                    path: compiler-test
                                    content: "            b += i;"
                            span:
                              line_start: 7
                              line_stop: 9
                              col_start: 23
                              col_stop: 10
                              path: compiler-test
                              content: "        for i in 0..4 {\n...\n        }"
                          span:
                            line_start: 7
                            line_stop: 9
                            col_start: 9
                            col_stop: 10
                            path: compiler-test
                            content: "        for i in 0..4 {\n...\n        }"
                    span:
                      line_start: 6
                      line_stop: 10
                      col_start: 15
                      col_stop: 6
                      path: compiler-test
                      content: "    if x == 3 {\n...\n    }"
                  next: ~
                  span:
                    line_start: 6
                    line_stop: 10
                    col_start: 5
                    col_stop: 6
                    path: compiler-test
                    content: "    if x == 3 {\n...\n    }\n\n"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"r\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let r: u32 = x == 3 ? 6 : 0;\\\"}\"}"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let r: u32 = x == 3 ? 6 : 0;"
                  type_:
                    IntegerType: U32
                  value:
                    Ternary:
                      condition:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":18,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let r: u32 = x == 3 ? 6 : 0;\\\"}\"}"
                          right:
                            Value:
                              Implicit:
                                - "3"
                                - line_start: 12
                                  line_stop: 12
                                  col_start: 23
                                  col_stop: 24
                                  path: compiler-test
                                  content: "    let r: u32 = x == 3 ? 6 : 0;"
                          op: Eq
                          span:
                            line_start: 12
                            line_stop: 12
                            col_start: 18
                            col_stop: 24
                            path: compiler-test
                            content: "    let r: u32 = x == 3 ? 6 : 0;"
                      if_true:
                        Value:
                          Implicit:
                            - "6"
                            - line_start: 12
                              line_stop: 12
                              col_start: 27
                              col_stop: 28
                              path: compiler-test
                              content: "    let r: u32 = x == 3 ? 6 : 0;"
                      if_false:
                        Value:
                          Implicit:
                            - "0"
                            - line_start: 12
                              line_stop: 12
                              col_start: 31
                              col_stop: 32
                              path: compiler-test
                              content: "    let r: u32 = x == 3 ? 6 : 0;"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 18
                        col_stop: 32
                        path: compiler-test
                        content: "    let r: u32 = x == 3 ? 6 : 0;"
                  span:
                    line_start: 12
                    line_stop: 12
                    col_start: 5
                    col_stop: 32
                    path: compiler-test
                    content: "    let r: u32 = x == 3 ? 6 : 0;"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"r\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return r == b;\\\"}\"}"
                      right:
                        Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return r == b;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 14
                        line_stop: 14
                        col_start: 12
                        col_stop: 18
                        path: compiler-test
                        content: "    return r == b;"
                  span:
                    line_start: 14
                    line_stop: 14
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return r == b;"
            span:
              line_start: 3
              line_stop: 15
              col_start: 31
              col_stop: 2
              path: compiler-test
              content: "function main(x: u32) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 15
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: u32) -> bool {\n...\n}\n\n\n\n\n\n\n\n\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: u32) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = 0u32;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let b = 0u32;"
                  type_:
                    IntegerType: U32
                  value:
                    Value:
                      Integer:
                        - U32
                        - "0"
                        - line_start: 4
                          line_stop: 4
                          col_start: 13
                          col_stop: 17
                          path: compiler-test
                          content: "    let b = 0u32;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 17
                    path: compiler-test
                    content: "    let b = 0u32;"
              - Conditional:
                  condition:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":8,\\\"col_stop\\\":9,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    if x == 3 {\\\"}\"}"
                      right:
                        Value:
                          Integer:
                            - U32
                            - "3"
                            - line_start: 6
                              line_stop: 6
                              col_start: 13
                              col_stop: 14
                              path: compiler-test
                              content: "    if x == 3 {"
                      op: Eq
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 8
                        col_stop: 14
                        path: compiler-test
                        content: "    if x == 3 {"
                  block:
                    statements:
                      - Iteration:
                          variable: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        for i in 0..4 {\\\"}\"}"
                          start:
                            Value:
                              Integer:
                                - U32
                                - "0"
                                - line_start: 7
                                  line_stop: 7
                                  col_start: 18
                                  col_stop: 19
                                  path: compiler-test
                                  content: "        for i in 0..4 {"
                          stop:
                            Value:
                              Integer:
                                - U32
                                - "4"
                                - line_start: 7
                                  line_stop: 7
                                  col_start: 21
                                  col_stop: 22
                                  path: compiler-test
                                  content: "        for i in 0..4 {"
                          block:
                            statements:
                              - Assign:
                                  operation: Assign
                                  assignee:
                                    identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            b += i;\\\"}\"}"
                                    accesses: []
                                    span:
                                      line_start: 8
                                      line_stop: 8
                                      col_start: 13
                                      col_stop: 14
                                      path: compiler-test
                                      content: "            b += i;"
                                  value:
                                    Binary:
                                      left:
                                        Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            b += i;\\\"}\"}"
                                      right:
                                        Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":18,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            b += i;\\\"}\"}"
                                      op: Add
                                      span:
                                        line_start: 8
                                        line_stop: 8
                                        col_start: 13
                                        col_stop: 19
                                        path: compiler-test
                                        content: "            b += i;"
                                  span:
                                    line_start: 8
                                    line_stop: 8
                                    col_start: 13
                                    col_stop: 19
                                    path: compiler-test
                                    content: "            b += i;"
                            span:
                              line_start: 7
                              line_stop: 9
                              col_start: 23
                              col_stop: 10
                              path: compiler-test
                              content: "        for i in 0..4 {\n...\n        }"
                          span:
                            line_start: 7
                            line_stop: 9
                            col_start: 9
                            col_stop: 10
                            path: compiler-test
                            content: "        for i in 0..4 {\n...\n        }"
                    span:
                      line_start: 6
                      line_stop: 10
                      col_start: 15
                      col_stop: 6
                      path: compiler-test
                      content: "    if x == 3 {\n...\n    }"
                  next: ~
                  span:
                    line_start: 6
                    line_stop: 10
                    col_start: 5
                    col_stop: 6
                    path: compiler-test
                    content: "    if x == 3 {\n...\n    }\n\n"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"r\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let r: u32 = x == 3 ? 6 : 0;\\\"}\"}"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let r: u32 = x == 3 ? 6 : 0;"
                  type_:
                    IntegerType: U32
                  value:
                    Ternary:
                      condition:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":18,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let r: u32 = x == 3 ? 6 : 0;\\\"}\"}"
                          right:
                            Value:
                              Integer:
                                - U32
                                - "3"
                                - line_start: 12
                                  line_stop: 12
                                  col_start: 23
                                  col_stop: 24
                                  path: compiler-test
                                  content: "    let r: u32 = x == 3 ? 6 : 0;"
                          op: Eq
                          span:
                            line_start: 12
                            line_stop: 12
                            col_start: 18
                            col_stop: 24
                            path: compiler-test
                            content: "    let r: u32 = x == 3 ? 6 : 0;"
                      if_true:
                        Value:
                          Integer:
                            - U32
                            - "6"
                            - line_start: 12
                              line_stop: 12
                              col_start: 27
                              col_stop: 28
                              path: compiler-test
                              content: "    let r: u32 = x == 3 ? 6 : 0;"
                      if_false:
                        Value:
                          Integer:
                            - U32
                            - "0"
                            - line_start: 12
                              line_stop: 12
                              col_start: 31
                              col_stop: 32
                              path: compiler-test
                              content: "    let r: u32 = x == 3 ? 6 : 0;"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 18
                        col_stop: 32
                        path: compiler-test
                        content: "    let r: u32 = x == 3 ? 6 : 0;"
                  span:
                    line_start: 12
                    line_stop: 12
                    col_start: 5
                    col_stop: 32
                    path: compiler-test
                    content: "    let r: u32 = x == 3 ? 6 : 0;"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"r\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return r == b;\\\"}\"}"
                      right:
                        Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return r == b;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 14
                        line_stop: 14
                        col_start: 12
                        col_stop: 18
                        path: compiler-test
                        content: "    return r == b;"
                  span:
                    line_start: 14
                    line_stop: 14
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return r == b;"
            span:
              line_start: 3
              line_stop: 15
              col_start: 31
              col_stop: 2
              path: compiler-test
              content: "function main(x: u32) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 15
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: u32) -> bool {\n...\n}\n\n\n\n\n\n\n\n\n\n"
