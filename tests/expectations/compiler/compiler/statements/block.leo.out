---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 96
      num_constraints: 97
      at: 82703e2aa614d0f54a1c321e06edd2e79a9574a91d0984d6f5e98926710962f2
      bt: 54bbc6eb42c38f8bbb12360c98b483e782f47c2875d6b88b6ae2b7cd70220cf8
      ct: 52022ccbdc5119e02384f852f21e0ed0b6d729cb1cd18aea031f73037e467755
    output:
      - input_file: inputs/u32_3.in
        output:
          registers:
            a:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: u32) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let y = x;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let y = x;"
                  type_: ~
                  value:
                    Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let y = x;\\\"}\"}"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 14
                    path: compiler-test
                    content: "    let y = x;"
              - Block:
                  statements:
                    - Assign:
                        operation: Add
                        assignee:
                          identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        y += 5u32;\\\"}\"}"
                          accesses: []
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 9
                            col_stop: 10
                            path: compiler-test
                            content: "        y += 5u32;"
                        value:
                          Value:
                            Integer:
                              - U32
                              - "5"
                              - line_start: 7
                                line_stop: 7
                                col_start: 14
                                col_stop: 18
                                path: compiler-test
                                content: "        y += 5u32;"
                        span:
                          line_start: 7
                          line_stop: 7
                          col_start: 9
                          col_stop: 18
                          path: compiler-test
                          content: "        y += 5u32;"
                  span:
                    line_start: 6
                    line_stop: 8
                    col_start: 5
                    col_stop: 6
                    path: compiler-test
                    content: "    {\n...\n    }"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return y == 8;\\\"}\"}"
                      right:
                        Value:
                          Implicit:
                            - "8"
                            - line_start: 10
                              line_stop: 10
                              col_start: 17
                              col_stop: 18
                              path: compiler-test
                              content: "    return y == 8;"
                      op: Eq
                      span:
                        line_start: 10
                        line_stop: 10
                        col_start: 12
                        col_stop: 18
                        path: compiler-test
                        content: "    return y == 8;"
                  span:
                    line_start: 10
                    line_stop: 10
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return y == 8;"
            span:
              line_start: 3
              line_stop: 11
              col_start: 31
              col_stop: 2
              path: compiler-test
              content: "function main(x: u32) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 11
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: u32) -> bool {\n...\n}\n\n\n\n\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: u32) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let y = x;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let y = x;"
                  type_: ~
                  value:
                    Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let y = x;\\\"}\"}"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 14
                    path: compiler-test
                    content: "    let y = x;"
              - Block:
                  statements:
                    - Assign:
                        operation: Assign
                        assignee:
                          identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        y += 5u32;\\\"}\"}"
                          accesses: []
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 9
                            col_stop: 10
                            path: compiler-test
                            content: "        y += 5u32;"
                        value:
                          Binary:
                            left:
                              Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        y += 5u32;\\\"}\"}"
                            right:
                              Value:
                                Integer:
                                  - U32
                                  - "5"
                                  - line_start: 7
                                    line_stop: 7
                                    col_start: 14
                                    col_stop: 18
                                    path: compiler-test
                                    content: "        y += 5u32;"
                            op: Add
                            span:
                              line_start: 7
                              line_stop: 7
                              col_start: 9
                              col_stop: 18
                              path: compiler-test
                              content: "        y += 5u32;"
                        span:
                          line_start: 7
                          line_stop: 7
                          col_start: 9
                          col_stop: 18
                          path: compiler-test
                          content: "        y += 5u32;"
                  span:
                    line_start: 6
                    line_stop: 8
                    col_start: 5
                    col_stop: 6
                    path: compiler-test
                    content: "    {\n...\n    }"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return y == 8;\\\"}\"}"
                      right:
                        Value:
                          Implicit:
                            - "8"
                            - line_start: 10
                              line_stop: 10
                              col_start: 17
                              col_stop: 18
                              path: compiler-test
                              content: "    return y == 8;"
                      op: Eq
                      span:
                        line_start: 10
                        line_stop: 10
                        col_start: 12
                        col_stop: 18
                        path: compiler-test
                        content: "    return y == 8;"
                  span:
                    line_start: 10
                    line_stop: 10
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return y == 8;"
            span:
              line_start: 3
              line_stop: 11
              col_start: 31
              col_stop: 2
              path: compiler-test
              content: "function main(x: u32) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 11
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: u32) -> bool {\n...\n}\n\n\n\n\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: u32) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let y = x;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let y = x;"
                  type_:
                    IntegerType: U32
                  value:
                    Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let y = x;\\\"}\"}"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 14
                    path: compiler-test
                    content: "    let y = x;"
              - Block:
                  statements:
                    - Assign:
                        operation: Assign
                        assignee:
                          identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        y += 5u32;\\\"}\"}"
                          accesses: []
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 9
                            col_stop: 10
                            path: compiler-test
                            content: "        y += 5u32;"
                        value:
                          Binary:
                            left:
                              Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        y += 5u32;\\\"}\"}"
                            right:
                              Value:
                                Integer:
                                  - U32
                                  - "5"
                                  - line_start: 7
                                    line_stop: 7
                                    col_start: 14
                                    col_stop: 18
                                    path: compiler-test
                                    content: "        y += 5u32;"
                            op: Add
                            span:
                              line_start: 7
                              line_stop: 7
                              col_start: 9
                              col_stop: 18
                              path: compiler-test
                              content: "        y += 5u32;"
                        span:
                          line_start: 7
                          line_stop: 7
                          col_start: 9
                          col_stop: 18
                          path: compiler-test
                          content: "        y += 5u32;"
                  span:
                    line_start: 6
                    line_stop: 8
                    col_start: 5
                    col_stop: 6
                    path: compiler-test
                    content: "    {\n...\n    }"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return y == 8;\\\"}\"}"
                      right:
                        Value:
                          Integer:
                            - U32
                            - "8"
                            - line_start: 10
                              line_stop: 10
                              col_start: 17
                              col_stop: 18
                              path: compiler-test
                              content: "    return y == 8;"
                      op: Eq
                      span:
                        line_start: 10
                        line_stop: 10
                        col_start: 12
                        col_stop: 18
                        path: compiler-test
                        content: "    return y == 8;"
                  span:
                    line_start: 10
                    line_stop: 10
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return y == 8;"
            span:
              line_start: 3
              line_stop: 11
              col_start: 31
              col_stop: 2
              path: compiler-test
              content: "function main(x: u32) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 11
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: u32) -> bool {\n...\n}\n\n\n\n\n\n"
