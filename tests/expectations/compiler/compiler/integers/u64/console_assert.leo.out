---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 382
      num_constraints: 382
      at: 9d064db37e95194967d924cd23aecd5ddd20a17c31a48470f0b624f5937ff750
      bt: 21d30b45426d69b866ddb826df03348580bcd064b2586cd615e3c270d7b85397
      ct: bd9112f8b3135d07d5b5a2491f17add20c7ca9d7881df20e3ff47918d208e75d
    output:
      - input_file: u64.in
        output:
          registers:
            r0:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u64, b: u64) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u64, b: u64) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u64, b: u64) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U64
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: u64, b: u64) -> bool {"
            - Variable:
                identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":23,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u64, b: u64) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U64
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 23
                  col_stop: 24
                  path: compiler-test
                  content: "function main(a: u64, b: u64) -> bool {"
          output: Boolean
          block:
            statements:
              - Console:
                  function:
                    Assert:
                      Binary:
                        left:
                          Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":20,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    console.assert(a == b);\\\"}\"}"
                        right:
                          Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":25,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    console.assert(a == b);\\\"}\"}"
                        op: Eq
                        span:
                          line_start: 4
                          line_stop: 4
                          col_start: 20
                          col_stop: 26
                          path: compiler-test
                          content: "    console.assert(a == b);"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 26
                    path: compiler-test
                    content: "    console.assert(a == b);"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b;\\\"}\"}"
                      right:
                        Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 12
                        col_stop: 18
                        path: compiler-test
                        content: "    return a == b;"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return a == b;"
            span:
              line_start: 3
              line_stop: 6
              col_start: 39
              col_stop: 2
              path: compiler-test
              content: "function main(a: u64, b: u64) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 6
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: u64, b: u64) -> bool {\n...\n}\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u64, b: u64) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u64, b: u64) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u64, b: u64) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U64
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: u64, b: u64) -> bool {"
            - Variable:
                identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":23,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u64, b: u64) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U64
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 23
                  col_stop: 24
                  path: compiler-test
                  content: "function main(a: u64, b: u64) -> bool {"
          output: Boolean
          block:
            statements:
              - Console:
                  function:
                    Assert:
                      Binary:
                        left:
                          Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":20,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    console.assert(a == b);\\\"}\"}"
                        right:
                          Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":25,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    console.assert(a == b);\\\"}\"}"
                        op: Eq
                        span:
                          line_start: 4
                          line_stop: 4
                          col_start: 20
                          col_stop: 26
                          path: compiler-test
                          content: "    console.assert(a == b);"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 26
                    path: compiler-test
                    content: "    console.assert(a == b);"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b;\\\"}\"}"
                      right:
                        Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 12
                        col_stop: 18
                        path: compiler-test
                        content: "    return a == b;"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return a == b;"
            span:
              line_start: 3
              line_stop: 6
              col_start: 39
              col_stop: 2
              path: compiler-test
              content: "function main(a: u64, b: u64) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 6
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: u64, b: u64) -> bool {\n...\n}\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u64, b: u64) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u64, b: u64) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u64, b: u64) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U64
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: u64, b: u64) -> bool {"
            - Variable:
                identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":23,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u64, b: u64) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U64
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 23
                  col_stop: 24
                  path: compiler-test
                  content: "function main(a: u64, b: u64) -> bool {"
          output: Boolean
          block:
            statements:
              - Console:
                  function:
                    Assert:
                      Binary:
                        left:
                          Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":20,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    console.assert(a == b);\\\"}\"}"
                        right:
                          Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":25,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    console.assert(a == b);\\\"}\"}"
                        op: Eq
                        span:
                          line_start: 4
                          line_stop: 4
                          col_start: 20
                          col_stop: 26
                          path: compiler-test
                          content: "    console.assert(a == b);"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 26
                    path: compiler-test
                    content: "    console.assert(a == b);"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b;\\\"}\"}"
                      right:
                        Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 12
                        col_stop: 18
                        path: compiler-test
                        content: "    return a == b;"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return a == b;"
            span:
              line_start: 3
              line_stop: 6
              col_start: 39
              col_stop: 2
              path: compiler-test
              content: "function main(a: u64, b: u64) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 6
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: u64, b: u64) -> bool {\n...\n}\n"
