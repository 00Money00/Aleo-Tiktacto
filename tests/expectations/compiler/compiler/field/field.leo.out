---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 4
      num_constraints: 3
      at: cfcc3adf871aef0910034c4c3478746733a9746d44fd678971ee2e1e5e69dffd
      bt: 02c492cb6df07172e56cffd0cfd902a8443921e1256a2d907bbabd30bf6b8f6d
      ct: a1f8e2b168c0f2f28f0ca3f16ce9b25ba7f7c410cfd68b0912bf19c90b53f2a2
    output:
      - input_file: inputs/fields.in
        output:
          registers:
            r:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Field
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: field) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"negOneField\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const negOneField: field = -1field;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 22
                        path: compiler-test
                        content: "    const negOneField: field = -1field;"
                  type_: Field
                  value:
                    Unary:
                      inner:
                        Value:
                          Field:
                            - "1"
                            - line_start: 4
                              line_stop: 4
                              col_start: 33
                              col_stop: 39
                              path: compiler-test
                              content: "    const negOneField: field = -1field;"
                      op: Negate
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 32
                        col_stop: 39
                        path: compiler-test
                        content: "    const negOneField: field = -1field;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 39
                    path: compiler-test
                    content: "    const negOneField: field = -1field;"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"negOneField\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":12,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return negOneField + a == 0field;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":26,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return negOneField + a == 0field;\\\"}\"}"
                          op: Add
                          span:
                            line_start: 5
                            line_stop: 5
                            col_start: 12
                            col_stop: 27
                            path: compiler-test
                            content: "    return negOneField + a == 0field;"
                      right:
                        Value:
                          Field:
                            - "0"
                            - line_start: 5
                              line_stop: 5
                              col_start: 31
                              col_stop: 37
                              path: compiler-test
                              content: "    return negOneField + a == 0field;"
                      op: Eq
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 12
                        col_stop: 37
                        path: compiler-test
                        content: "    return negOneField + a == 0field;"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 37
                    path: compiler-test
                    content: "    return negOneField + a == 0field;"
            span:
              line_start: 3
              line_stop: 6
              col_start: 33
              col_stop: 2
              path: compiler-test
              content: "function main(a: field) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 6
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: field) -> bool {\n...\n}\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Field
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: field) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"negOneField\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const negOneField: field = -1field;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 22
                        path: compiler-test
                        content: "    const negOneField: field = -1field;"
                  type_: Field
                  value:
                    Unary:
                      inner:
                        Value:
                          Field:
                            - "1"
                            - line_start: 4
                              line_stop: 4
                              col_start: 33
                              col_stop: 39
                              path: compiler-test
                              content: "    const negOneField: field = -1field;"
                      op: Negate
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 32
                        col_stop: 39
                        path: compiler-test
                        content: "    const negOneField: field = -1field;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 39
                    path: compiler-test
                    content: "    const negOneField: field = -1field;"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"negOneField\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":12,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return negOneField + a == 0field;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":26,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return negOneField + a == 0field;\\\"}\"}"
                          op: Add
                          span:
                            line_start: 5
                            line_stop: 5
                            col_start: 12
                            col_stop: 27
                            path: compiler-test
                            content: "    return negOneField + a == 0field;"
                      right:
                        Value:
                          Field:
                            - "0"
                            - line_start: 5
                              line_stop: 5
                              col_start: 31
                              col_stop: 37
                              path: compiler-test
                              content: "    return negOneField + a == 0field;"
                      op: Eq
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 12
                        col_stop: 37
                        path: compiler-test
                        content: "    return negOneField + a == 0field;"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 37
                    path: compiler-test
                    content: "    return negOneField + a == 0field;"
            span:
              line_start: 3
              line_stop: 6
              col_start: 33
              col_stop: 2
              path: compiler-test
              content: "function main(a: field) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 6
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: field) -> bool {\n...\n}\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Field
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: field) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"negOneField\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const negOneField: field = -1field;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 22
                        path: compiler-test
                        content: "    const negOneField: field = -1field;"
                  type_: Field
                  value:
                    Unary:
                      inner:
                        Value:
                          Field:
                            - "1"
                            - line_start: 4
                              line_stop: 4
                              col_start: 33
                              col_stop: 39
                              path: compiler-test
                              content: "    const negOneField: field = -1field;"
                      op: Negate
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 32
                        col_stop: 39
                        path: compiler-test
                        content: "    const negOneField: field = -1field;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 39
                    path: compiler-test
                    content: "    const negOneField: field = -1field;"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"negOneField\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":12,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return negOneField + a == 0field;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":26,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return negOneField + a == 0field;\\\"}\"}"
                          op: Add
                          span:
                            line_start: 5
                            line_stop: 5
                            col_start: 12
                            col_stop: 27
                            path: compiler-test
                            content: "    return negOneField + a == 0field;"
                      right:
                        Value:
                          Field:
                            - "0"
                            - line_start: 5
                              line_stop: 5
                              col_start: 31
                              col_stop: 37
                              path: compiler-test
                              content: "    return negOneField + a == 0field;"
                      op: Eq
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 12
                        col_stop: 37
                        path: compiler-test
                        content: "    return negOneField + a == 0field;"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 37
                    path: compiler-test
                    content: "    return negOneField + a == 0field;"
            span:
              line_start: 3
              line_stop: 6
              col_start: 33
              col_stop: 2
              path: compiler-test
              content: "function main(a: field) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 6
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: field) -> bool {\n...\n}\n"
