---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 5
      num_constraints: 3
      at: 58e404664f2d64d2fd5fee64bf6e997f542a822b8b17e394fcdd7bed05386db8
      bt: f91b8601243dbd0d25e7df8f34ff304ca78a295fdfafbe0102ec6ce4fcb3c0f0
      ct: fe68b86a12c0b8c1585a656d7c4b8c47fbe19677b5da7ce0aae1d80dffb2a2ca
    output:
      - input_file: inputs/fields.in
        output:
          registers:
            r:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field, b: field, c: field) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field, b: field, c: field) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field, b: field, c: field) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Field
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: field, b: field, c: field) -> bool {"
            - Variable:
                identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":25,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field, b: field, c: field) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Field
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 25
                  col_stop: 26
                  path: compiler-test
                  content: "function main(a: field, b: field, c: field) -> bool {"
            - Variable:
                identifier: "{\"name\":\"c\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":35,\\\"col_stop\\\":36,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field, b: field, c: field) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Field
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 35
                  col_stop: 36
                  path: compiler-test
                  content: "function main(a: field, b: field, c: field) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"   return a + b == c;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"   return a + b == c;\\\"}\"}"
                          op: Add
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 11
                            col_stop: 16
                            path: compiler-test
                            content: "   return a + b == c;"
                      right:
                        Identifier: "{\"name\":\"c\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":20,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"   return a + b == c;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 21
                        path: compiler-test
                        content: "   return a + b == c;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 4
                    col_stop: 21
                    path: compiler-test
                    content: "   return a + b == c;"
            span:
              line_start: 3
              line_stop: 5
              col_start: 53
              col_stop: 2
              path: compiler-test
              content: "function main(a: field, b: field, c: field) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: field, b: field, c: field) -> bool {\n...\n}"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field, b: field, c: field) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field, b: field, c: field) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field, b: field, c: field) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Field
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: field, b: field, c: field) -> bool {"
            - Variable:
                identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":25,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field, b: field, c: field) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Field
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 25
                  col_stop: 26
                  path: compiler-test
                  content: "function main(a: field, b: field, c: field) -> bool {"
            - Variable:
                identifier: "{\"name\":\"c\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":35,\\\"col_stop\\\":36,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field, b: field, c: field) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Field
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 35
                  col_stop: 36
                  path: compiler-test
                  content: "function main(a: field, b: field, c: field) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"   return a + b == c;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"   return a + b == c;\\\"}\"}"
                          op: Add
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 11
                            col_stop: 16
                            path: compiler-test
                            content: "   return a + b == c;"
                      right:
                        Identifier: "{\"name\":\"c\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":20,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"   return a + b == c;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 21
                        path: compiler-test
                        content: "   return a + b == c;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 4
                    col_stop: 21
                    path: compiler-test
                    content: "   return a + b == c;"
            span:
              line_start: 3
              line_stop: 5
              col_start: 53
              col_stop: 2
              path: compiler-test
              content: "function main(a: field, b: field, c: field) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: field, b: field, c: field) -> bool {\n...\n}"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field, b: field, c: field) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field, b: field, c: field) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field, b: field, c: field) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Field
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: field, b: field, c: field) -> bool {"
            - Variable:
                identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":25,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field, b: field, c: field) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Field
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 25
                  col_stop: 26
                  path: compiler-test
                  content: "function main(a: field, b: field, c: field) -> bool {"
            - Variable:
                identifier: "{\"name\":\"c\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":35,\\\"col_stop\\\":36,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: field, b: field, c: field) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Field
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 35
                  col_stop: 36
                  path: compiler-test
                  content: "function main(a: field, b: field, c: field) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"   return a + b == c;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"   return a + b == c;\\\"}\"}"
                          op: Add
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 11
                            col_stop: 16
                            path: compiler-test
                            content: "   return a + b == c;"
                      right:
                        Identifier: "{\"name\":\"c\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":20,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"   return a + b == c;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 21
                        path: compiler-test
                        content: "   return a + b == c;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 4
                    col_stop: 21
                    path: compiler-test
                    content: "   return a + b == c;"
            span:
              line_start: 3
              line_stop: 5
              col_start: 53
              col_stop: 2
              path: compiler-test
              content: "function main(a: field, b: field, c: field) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: field, b: field, c: field) -> bool {\n...\n}"
