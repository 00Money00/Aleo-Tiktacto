---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 1
      num_constraints: 1
      at: 042610d0fd1fe6d6ac112138f8755752f44c7d2a00f1b5960574d6da5cda393f
      bt: e97756698880ab7555a959a5fb5c6b4e15bd64612aa677adbfe2d0bd91f0a83c
      ct: cf1cbb66a638b4860a516671fb74850e6ccf787fe6c4c8d29e9c04efe880bd05
    output:
      - input_file: input/dummy.in
        output:
          registers:
            r0:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit TestMe {\\\"}\"}":
          circuit_name: "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit TestMe {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    x: u8;\\\"}\"}"
                - IntegerType: U8
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"test_me\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":14,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function test_me(mut self) -> u8 {\\\"}\"}"
                input:
                  - MutSelfKeyword: "{\"name\":\"mut self\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":22,\\\"col_stop\\\":30,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function test_me(mut self) -> u8 {\\\"}\"}"
                output:
                  IntegerType: U8
                block:
                  statements:
                    - Assign:
                        operation: Add
                        assignee:
                          identifier: "{\"name\":\"self\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        self.x += 1;\\\"}\"}"
                          accesses:
                            - Member: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        self.x += 1;\\\"}\"}"
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 9
                            col_stop: 15
                            path: compiler-test
                            content: "        self.x += 1;"
                        value:
                          Value:
                            Implicit:
                              - "1"
                              - line_start: 7
                                line_stop: 7
                                col_start: 19
                                col_stop: 20
                                path: compiler-test
                                content: "        self.x += 1;"
                        span:
                          line_start: 7
                          line_stop: 7
                          col_start: 9
                          col_stop: 20
                          path: compiler-test
                          content: "        self.x += 1;"
                    - Return:
                        expression:
                          CircuitMemberAccess:
                            circuit:
                              Identifier: "{\"name\":\"self\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":16,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return self.x;\\\"}\"}"
                            name: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":21,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return self.x;\\\"}\"}"
                            span:
                              line_start: 8
                              line_stop: 8
                              col_start: 16
                              col_stop: 22
                              path: compiler-test
                              content: "        return self.x;"
                        span:
                          line_start: 8
                          line_stop: 8
                          col_start: 9
                          col_stop: 22
                          path: compiler-test
                          content: "        return self.x;"
                  span:
                    line_start: 6
                    line_stop: 9
                    col_start: 38
                    col_stop: 6
                    path: compiler-test
                    content: "    function test_me(mut self) -> u8 {\n...\n    }"
                span:
                  line_start: 6
                  line_stop: 9
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function test_me(mut self) -> u8 {\n...\n    }\n"
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"new\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":14,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function new() -> Self {\\\"}\"}"
                input: []
                output: SelfType
                block:
                  statements:
                    - Return:
                        expression:
                          CircuitInit:
                            name: "{\"name\":\"Self\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":16,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return Self { x: 1u8 };\\\"}\"}"
                            members:
                              - identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":23,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return Self { x: 1u8 };\\\"}\"}"
                                expression:
                                  Value:
                                    Integer:
                                      - U8
                                      - "1"
                                      - line_start: 12
                                        line_stop: 12
                                        col_start: 26
                                        col_stop: 29
                                        path: compiler-test
                                        content: "        return Self { x: 1u8 };"
                            span:
                              line_start: 12
                              line_stop: 12
                              col_start: 16
                              col_stop: 31
                              path: compiler-test
                              content: "        return Self { x: 1u8 };"
                        span:
                          line_start: 12
                          line_stop: 12
                          col_start: 9
                          col_stop: 31
                          path: compiler-test
                          content: "        return Self { x: 1u8 };"
                  span:
                    line_start: 11
                    line_stop: 13
                    col_start: 28
                    col_stop: 6
                    path: compiler-test
                    content: "    function new() -> Self {\n...\n    }"
                span:
                  line_start: 11
                  line_stop: 13
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function new() -> Self {\n...\n    }"
      global_consts: {}
      functions:
        "{\"name\":\"my_fn\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":10,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function my_fn() -> TestMe {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"my_fn\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":10,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function my_fn() -> TestMe {\\\"}\"}"
          input: []
          output:
            Circuit: "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":21,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function my_fn() -> TestMe {\\\"}\"}"
          block:
            statements:
              - Return:
                  expression:
                    CircuitInit:
                      name: "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":17,\\\"line_stop\\\":17,\\\"col_start\\\":10,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"  return TestMe { x: 0u8 };\\\"}\"}"
                      members:
                        - identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":17,\\\"line_stop\\\":17,\\\"col_start\\\":19,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"  return TestMe { x: 0u8 };\\\"}\"}"
                          expression:
                            Value:
                              Integer:
                                - U8
                                - "0"
                                - line_start: 17
                                  line_stop: 17
                                  col_start: 22
                                  col_stop: 25
                                  path: compiler-test
                                  content: "  return TestMe { x: 0u8 };"
                      span:
                        line_start: 17
                        line_stop: 17
                        col_start: 10
                        col_stop: 27
                        path: compiler-test
                        content: "  return TestMe { x: 0u8 };"
                  span:
                    line_start: 17
                    line_stop: 17
                    col_start: 3
                    col_stop: 27
                    path: compiler-test
                    content: "  return TestMe { x: 0u8 };"
            span:
              line_start: 16
              line_stop: 18
              col_start: 28
              col_stop: 2
              path: compiler-test
              content: "function my_fn() -> TestMe {\n...\n}"
          span:
            line_start: 16
            line_stop: 18
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function my_fn() -> TestMe {\n...\n}"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":20,\\\"line_stop\\\":20,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":20,\\\"line_stop\\\":20,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":20,\\\"line_stop\\\":20,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 20
                  line_stop: 20
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(y: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"t\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const t = TestMe {x: 6u8}.test_me();\\\"}\"}"
                      span:
                        line_start: 21
                        line_stop: 21
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const t = TestMe {x: 6u8}.test_me();"
                  type_: ~
                  value:
                    Call:
                      function:
                        CircuitMemberAccess:
                          circuit:
                            CircuitInit:
                              name: "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":15,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const t = TestMe {x: 6u8}.test_me();\\\"}\"}"
                              members:
                                - identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":23,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const t = TestMe {x: 6u8}.test_me();\\\"}\"}"
                                  expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "6"
                                        - line_start: 21
                                          line_stop: 21
                                          col_start: 26
                                          col_stop: 29
                                          path: compiler-test
                                          content: "    const t = TestMe {x: 6u8}.test_me();"
                              span:
                                line_start: 21
                                line_stop: 21
                                col_start: 15
                                col_stop: 30
                                path: compiler-test
                                content: "    const t = TestMe {x: 6u8}.test_me();"
                          name: "{\"name\":\"test_me\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":31,\\\"col_stop\\\":38,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const t = TestMe {x: 6u8}.test_me();\\\"}\"}"
                          span:
                            line_start: 21
                            line_stop: 21
                            col_start: 15
                            col_stop: 38
                            path: compiler-test
                            content: "    const t = TestMe {x: 6u8}.test_me();"
                      arguments: []
                      span:
                        line_start: 21
                        line_stop: 21
                        col_start: 15
                        col_stop: 40
                        path: compiler-test
                        content: "    const t = TestMe {x: 6u8}.test_me();"
                  span:
                    line_start: 21
                    line_stop: 21
                    col_start: 5
                    col_stop: 40
                    path: compiler-test
                    content: "    const t = TestMe {x: 6u8}.test_me();"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"u\",\"span\":\"{\\\"line_start\\\":22,\\\"line_stop\\\":22,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const u = my_fn().test_me();\\\"}\"}"
                      span:
                        line_start: 22
                        line_stop: 22
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const u = my_fn().test_me();"
                  type_: ~
                  value:
                    Call:
                      function:
                        CircuitMemberAccess:
                          circuit:
                            Call:
                              function:
                                Identifier: "{\"name\":\"my_fn\",\"span\":\"{\\\"line_start\\\":22,\\\"line_stop\\\":22,\\\"col_start\\\":15,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const u = my_fn().test_me();\\\"}\"}"
                              arguments: []
                              span:
                                line_start: 22
                                line_stop: 22
                                col_start: 15
                                col_stop: 22
                                path: compiler-test
                                content: "    const u = my_fn().test_me();"
                          name: "{\"name\":\"test_me\",\"span\":\"{\\\"line_start\\\":22,\\\"line_stop\\\":22,\\\"col_start\\\":23,\\\"col_stop\\\":30,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const u = my_fn().test_me();\\\"}\"}"
                          span:
                            line_start: 22
                            line_stop: 22
                            col_start: 15
                            col_stop: 30
                            path: compiler-test
                            content: "    const u = my_fn().test_me();"
                      arguments: []
                      span:
                        line_start: 22
                        line_stop: 22
                        col_start: 15
                        col_stop: 32
                        path: compiler-test
                        content: "    const u = my_fn().test_me();"
                  span:
                    line_start: 22
                    line_stop: 22
                    col_start: 5
                    col_stop: 32
                    path: compiler-test
                    content: "    const u = my_fn().test_me();"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"v\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const v = TestMe::new().test_me();\\\"}\"}"
                      span:
                        line_start: 23
                        line_stop: 23
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const v = TestMe::new().test_me();"
                  type_: ~
                  value:
                    Call:
                      function:
                        CircuitMemberAccess:
                          circuit:
                            Call:
                              function:
                                CircuitStaticFunctionAccess:
                                  circuit:
                                    Identifier: "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":15,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const v = TestMe::new().test_me();\\\"}\"}"
                                  name: "{\"name\":\"new\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":23,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const v = TestMe::new().test_me();\\\"}\"}"
                                  span:
                                    line_start: 23
                                    line_stop: 23
                                    col_start: 15
                                    col_stop: 26
                                    path: compiler-test
                                    content: "    const v = TestMe::new().test_me();"
                              arguments: []
                              span:
                                line_start: 23
                                line_stop: 23
                                col_start: 15
                                col_stop: 28
                                path: compiler-test
                                content: "    const v = TestMe::new().test_me();"
                          name: "{\"name\":\"test_me\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":29,\\\"col_stop\\\":36,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const v = TestMe::new().test_me();\\\"}\"}"
                          span:
                            line_start: 23
                            line_stop: 23
                            col_start: 15
                            col_stop: 36
                            path: compiler-test
                            content: "    const v = TestMe::new().test_me();"
                      arguments: []
                      span:
                        line_start: 23
                        line_stop: 23
                        col_start: 15
                        col_stop: 38
                        path: compiler-test
                        content: "    const v = TestMe::new().test_me();"
                  span:
                    line_start: 23
                    line_stop: 23
                    col_start: 5
                    col_stop: 38
                    path: compiler-test
                    content: "    const v = TestMe::new().test_me();"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"v\",\"span\":\"{\\\"line_start\\\":24,\\\"line_stop\\\":24,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return v == 2u8 == y;\\\"}\"}"
                          right:
                            Value:
                              Integer:
                                - U8
                                - "2"
                                - line_start: 24
                                  line_stop: 24
                                  col_start: 17
                                  col_stop: 20
                                  path: compiler-test
                                  content: "    return v == 2u8 == y;"
                          op: Eq
                          span:
                            line_start: 24
                            line_stop: 24
                            col_start: 12
                            col_stop: 20
                            path: compiler-test
                            content: "    return v == 2u8 == y;"
                      right:
                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":24,\\\"line_stop\\\":24,\\\"col_start\\\":24,\\\"col_stop\\\":25,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return v == 2u8 == y;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 24
                        line_stop: 24
                        col_start: 12
                        col_stop: 25
                        path: compiler-test
                        content: "    return v == 2u8 == y;"
                  span:
                    line_start: 24
                    line_stop: 24
                    col_start: 5
                    col_stop: 25
                    path: compiler-test
                    content: "    return v == 2u8 == y;"
            span:
              line_start: 20
              line_stop: 25
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(y: bool) -> bool {\n...\n}"
          span:
            line_start: 20
            line_stop: 25
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(y: bool) -> bool {\n...\n}\n\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit TestMe {\\\"}\"}":
          circuit_name: "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit TestMe {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    x: u8;\\\"}\"}"
                - IntegerType: U8
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"test_me\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":14,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function test_me(mut self) -> u8 {\\\"}\"}"
                input:
                  - MutSelfKeyword: "{\"name\":\"mut self\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":22,\\\"col_stop\\\":30,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function test_me(mut self) -> u8 {\\\"}\"}"
                output:
                  IntegerType: U8
                block:
                  statements:
                    - Assign:
                        operation: Assign
                        assignee:
                          identifier: "{\"name\":\"self\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        self.x += 1;\\\"}\"}"
                          accesses:
                            - Member: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        self.x += 1;\\\"}\"}"
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 9
                            col_stop: 15
                            path: compiler-test
                            content: "        self.x += 1;"
                        value:
                          Binary:
                            left:
                              CircuitMemberAccess:
                                circuit:
                                  Identifier: "{\"name\":\"self\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        self.x += 1;\\\"}\"}"
                                name: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        self.x += 1;\\\"}\"}"
                                span:
                                  line_start: 7
                                  line_stop: 7
                                  col_start: 9
                                  col_stop: 20
                                  path: compiler-test
                                  content: "        self.x += 1;"
                            right:
                              Value:
                                Implicit:
                                  - "1"
                                  - line_start: 7
                                    line_stop: 7
                                    col_start: 19
                                    col_stop: 20
                                    path: compiler-test
                                    content: "        self.x += 1;"
                            op: Add
                            span:
                              line_start: 7
                              line_stop: 7
                              col_start: 9
                              col_stop: 20
                              path: compiler-test
                              content: "        self.x += 1;"
                        span:
                          line_start: 7
                          line_stop: 7
                          col_start: 9
                          col_stop: 20
                          path: compiler-test
                          content: "        self.x += 1;"
                    - Return:
                        expression:
                          CircuitMemberAccess:
                            circuit:
                              Identifier: "{\"name\":\"self\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":16,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return self.x;\\\"}\"}"
                            name: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":21,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return self.x;\\\"}\"}"
                            span:
                              line_start: 8
                              line_stop: 8
                              col_start: 16
                              col_stop: 22
                              path: compiler-test
                              content: "        return self.x;"
                        span:
                          line_start: 8
                          line_stop: 8
                          col_start: 9
                          col_stop: 22
                          path: compiler-test
                          content: "        return self.x;"
                  span:
                    line_start: 6
                    line_stop: 9
                    col_start: 38
                    col_stop: 6
                    path: compiler-test
                    content: "    function test_me(mut self) -> u8 {\n...\n    }"
                span:
                  line_start: 6
                  line_stop: 9
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function test_me(mut self) -> u8 {\n...\n    }\n"
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"new\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":14,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function new() -> Self {\\\"}\"}"
                input: []
                output:
                  Circuit: "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit TestMe {\\\"}\"}"
                block:
                  statements:
                    - Return:
                        expression:
                          CircuitInit:
                            name: "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit TestMe {\\\"}\"}"
                            members:
                              - identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":23,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return Self { x: 1u8 };\\\"}\"}"
                                expression:
                                  Value:
                                    Integer:
                                      - U8
                                      - "1"
                                      - line_start: 12
                                        line_stop: 12
                                        col_start: 26
                                        col_stop: 29
                                        path: compiler-test
                                        content: "        return Self { x: 1u8 };"
                            span:
                              line_start: 12
                              line_stop: 12
                              col_start: 16
                              col_stop: 31
                              path: compiler-test
                              content: "        return Self { x: 1u8 };"
                        span:
                          line_start: 12
                          line_stop: 12
                          col_start: 9
                          col_stop: 31
                          path: compiler-test
                          content: "        return Self { x: 1u8 };"
                  span:
                    line_start: 11
                    line_stop: 13
                    col_start: 28
                    col_stop: 6
                    path: compiler-test
                    content: "    function new() -> Self {\n...\n    }"
                span:
                  line_start: 11
                  line_stop: 13
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function new() -> Self {\n...\n    }"
      global_consts: {}
      functions:
        "{\"name\":\"my_fn\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":10,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function my_fn() -> TestMe {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"my_fn\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":10,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function my_fn() -> TestMe {\\\"}\"}"
          input: []
          output:
            Circuit: "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":21,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function my_fn() -> TestMe {\\\"}\"}"
          block:
            statements:
              - Return:
                  expression:
                    CircuitInit:
                      name: "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":17,\\\"line_stop\\\":17,\\\"col_start\\\":10,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"  return TestMe { x: 0u8 };\\\"}\"}"
                      members:
                        - identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":17,\\\"line_stop\\\":17,\\\"col_start\\\":19,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"  return TestMe { x: 0u8 };\\\"}\"}"
                          expression:
                            Value:
                              Integer:
                                - U8
                                - "0"
                                - line_start: 17
                                  line_stop: 17
                                  col_start: 22
                                  col_stop: 25
                                  path: compiler-test
                                  content: "  return TestMe { x: 0u8 };"
                      span:
                        line_start: 17
                        line_stop: 17
                        col_start: 10
                        col_stop: 27
                        path: compiler-test
                        content: "  return TestMe { x: 0u8 };"
                  span:
                    line_start: 17
                    line_stop: 17
                    col_start: 3
                    col_stop: 27
                    path: compiler-test
                    content: "  return TestMe { x: 0u8 };"
            span:
              line_start: 16
              line_stop: 18
              col_start: 28
              col_stop: 2
              path: compiler-test
              content: "function my_fn() -> TestMe {\n...\n}"
          span:
            line_start: 16
            line_stop: 18
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function my_fn() -> TestMe {\n...\n}"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":20,\\\"line_stop\\\":20,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":20,\\\"line_stop\\\":20,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":20,\\\"line_stop\\\":20,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 20
                  line_stop: 20
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(y: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"t\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const t = TestMe {x: 6u8}.test_me();\\\"}\"}"
                      span:
                        line_start: 21
                        line_stop: 21
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const t = TestMe {x: 6u8}.test_me();"
                  type_: ~
                  value:
                    Call:
                      function:
                        CircuitMemberAccess:
                          circuit:
                            CircuitInit:
                              name: "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":15,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const t = TestMe {x: 6u8}.test_me();\\\"}\"}"
                              members:
                                - identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":23,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const t = TestMe {x: 6u8}.test_me();\\\"}\"}"
                                  expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "6"
                                        - line_start: 21
                                          line_stop: 21
                                          col_start: 26
                                          col_stop: 29
                                          path: compiler-test
                                          content: "    const t = TestMe {x: 6u8}.test_me();"
                              span:
                                line_start: 21
                                line_stop: 21
                                col_start: 15
                                col_stop: 30
                                path: compiler-test
                                content: "    const t = TestMe {x: 6u8}.test_me();"
                          name: "{\"name\":\"test_me\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":31,\\\"col_stop\\\":38,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const t = TestMe {x: 6u8}.test_me();\\\"}\"}"
                          span:
                            line_start: 21
                            line_stop: 21
                            col_start: 15
                            col_stop: 38
                            path: compiler-test
                            content: "    const t = TestMe {x: 6u8}.test_me();"
                      arguments: []
                      span:
                        line_start: 21
                        line_stop: 21
                        col_start: 15
                        col_stop: 40
                        path: compiler-test
                        content: "    const t = TestMe {x: 6u8}.test_me();"
                  span:
                    line_start: 21
                    line_stop: 21
                    col_start: 5
                    col_stop: 40
                    path: compiler-test
                    content: "    const t = TestMe {x: 6u8}.test_me();"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"u\",\"span\":\"{\\\"line_start\\\":22,\\\"line_stop\\\":22,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const u = my_fn().test_me();\\\"}\"}"
                      span:
                        line_start: 22
                        line_stop: 22
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const u = my_fn().test_me();"
                  type_: ~
                  value:
                    Call:
                      function:
                        CircuitMemberAccess:
                          circuit:
                            Call:
                              function:
                                Identifier: "{\"name\":\"my_fn\",\"span\":\"{\\\"line_start\\\":22,\\\"line_stop\\\":22,\\\"col_start\\\":15,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const u = my_fn().test_me();\\\"}\"}"
                              arguments: []
                              span:
                                line_start: 22
                                line_stop: 22
                                col_start: 15
                                col_stop: 22
                                path: compiler-test
                                content: "    const u = my_fn().test_me();"
                          name: "{\"name\":\"test_me\",\"span\":\"{\\\"line_start\\\":22,\\\"line_stop\\\":22,\\\"col_start\\\":23,\\\"col_stop\\\":30,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const u = my_fn().test_me();\\\"}\"}"
                          span:
                            line_start: 22
                            line_stop: 22
                            col_start: 15
                            col_stop: 30
                            path: compiler-test
                            content: "    const u = my_fn().test_me();"
                      arguments: []
                      span:
                        line_start: 22
                        line_stop: 22
                        col_start: 15
                        col_stop: 32
                        path: compiler-test
                        content: "    const u = my_fn().test_me();"
                  span:
                    line_start: 22
                    line_stop: 22
                    col_start: 5
                    col_stop: 32
                    path: compiler-test
                    content: "    const u = my_fn().test_me();"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"v\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const v = TestMe::new().test_me();\\\"}\"}"
                      span:
                        line_start: 23
                        line_stop: 23
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const v = TestMe::new().test_me();"
                  type_: ~
                  value:
                    Call:
                      function:
                        CircuitMemberAccess:
                          circuit:
                            Call:
                              function:
                                CircuitStaticFunctionAccess:
                                  circuit:
                                    Identifier: "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":15,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const v = TestMe::new().test_me();\\\"}\"}"
                                  name: "{\"name\":\"new\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":23,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const v = TestMe::new().test_me();\\\"}\"}"
                                  span:
                                    line_start: 23
                                    line_stop: 23
                                    col_start: 15
                                    col_stop: 26
                                    path: compiler-test
                                    content: "    const v = TestMe::new().test_me();"
                              arguments: []
                              span:
                                line_start: 23
                                line_stop: 23
                                col_start: 15
                                col_stop: 28
                                path: compiler-test
                                content: "    const v = TestMe::new().test_me();"
                          name: "{\"name\":\"test_me\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":29,\\\"col_stop\\\":36,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const v = TestMe::new().test_me();\\\"}\"}"
                          span:
                            line_start: 23
                            line_stop: 23
                            col_start: 15
                            col_stop: 36
                            path: compiler-test
                            content: "    const v = TestMe::new().test_me();"
                      arguments: []
                      span:
                        line_start: 23
                        line_stop: 23
                        col_start: 15
                        col_stop: 38
                        path: compiler-test
                        content: "    const v = TestMe::new().test_me();"
                  span:
                    line_start: 23
                    line_stop: 23
                    col_start: 5
                    col_stop: 38
                    path: compiler-test
                    content: "    const v = TestMe::new().test_me();"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"v\",\"span\":\"{\\\"line_start\\\":24,\\\"line_stop\\\":24,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return v == 2u8 == y;\\\"}\"}"
                          right:
                            Value:
                              Integer:
                                - U8
                                - "2"
                                - line_start: 24
                                  line_stop: 24
                                  col_start: 17
                                  col_stop: 20
                                  path: compiler-test
                                  content: "    return v == 2u8 == y;"
                          op: Eq
                          span:
                            line_start: 24
                            line_stop: 24
                            col_start: 12
                            col_stop: 20
                            path: compiler-test
                            content: "    return v == 2u8 == y;"
                      right:
                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":24,\\\"line_stop\\\":24,\\\"col_start\\\":24,\\\"col_stop\\\":25,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return v == 2u8 == y;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 24
                        line_stop: 24
                        col_start: 12
                        col_stop: 25
                        path: compiler-test
                        content: "    return v == 2u8 == y;"
                  span:
                    line_start: 24
                    line_stop: 24
                    col_start: 5
                    col_stop: 25
                    path: compiler-test
                    content: "    return v == 2u8 == y;"
            span:
              line_start: 20
              line_stop: 25
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(y: bool) -> bool {\n...\n}"
          span:
            line_start: 20
            line_stop: 25
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(y: bool) -> bool {\n...\n}\n\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit TestMe {\\\"}\"}":
          circuit_name: "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit TestMe {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    x: u8;\\\"}\"}"
                - IntegerType: U8
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"test_me\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":14,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function test_me(mut self) -> u8 {\\\"}\"}"
                input:
                  - MutSelfKeyword: "{\"name\":\"mut self\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":22,\\\"col_stop\\\":30,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function test_me(mut self) -> u8 {\\\"}\"}"
                output:
                  IntegerType: U8
                block:
                  statements:
                    - Assign:
                        operation: Assign
                        assignee:
                          identifier: "{\"name\":\"self\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        self.x += 1;\\\"}\"}"
                          accesses:
                            - Member: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        self.x += 1;\\\"}\"}"
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 9
                            col_stop: 15
                            path: compiler-test
                            content: "        self.x += 1;"
                        value:
                          Binary:
                            left:
                              CircuitMemberAccess:
                                circuit:
                                  Identifier: "{\"name\":\"self\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        self.x += 1;\\\"}\"}"
                                name: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        self.x += 1;\\\"}\"}"
                                span:
                                  line_start: 7
                                  line_stop: 7
                                  col_start: 9
                                  col_stop: 20
                                  path: compiler-test
                                  content: "        self.x += 1;"
                            right:
                              Value:
                                Integer:
                                  - U8
                                  - "1"
                                  - line_start: 7
                                    line_stop: 7
                                    col_start: 19
                                    col_stop: 20
                                    path: compiler-test
                                    content: "        self.x += 1;"
                            op: Add
                            span:
                              line_start: 7
                              line_stop: 7
                              col_start: 9
                              col_stop: 20
                              path: compiler-test
                              content: "        self.x += 1;"
                        span:
                          line_start: 7
                          line_stop: 7
                          col_start: 9
                          col_stop: 20
                          path: compiler-test
                          content: "        self.x += 1;"
                    - Return:
                        expression:
                          CircuitMemberAccess:
                            circuit:
                              Identifier: "{\"name\":\"self\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":16,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return self.x;\\\"}\"}"
                            name: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":21,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return self.x;\\\"}\"}"
                            span:
                              line_start: 8
                              line_stop: 8
                              col_start: 16
                              col_stop: 22
                              path: compiler-test
                              content: "        return self.x;"
                        span:
                          line_start: 8
                          line_stop: 8
                          col_start: 9
                          col_stop: 22
                          path: compiler-test
                          content: "        return self.x;"
                  span:
                    line_start: 6
                    line_stop: 9
                    col_start: 38
                    col_stop: 6
                    path: compiler-test
                    content: "    function test_me(mut self) -> u8 {\n...\n    }"
                span:
                  line_start: 6
                  line_stop: 9
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function test_me(mut self) -> u8 {\n...\n    }\n"
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"new\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":14,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function new() -> Self {\\\"}\"}"
                input: []
                output:
                  Circuit: "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit TestMe {\\\"}\"}"
                block:
                  statements:
                    - Return:
                        expression:
                          CircuitInit:
                            name: "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit TestMe {\\\"}\"}"
                            members:
                              - identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":23,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return Self { x: 1u8 };\\\"}\"}"
                                expression:
                                  Value:
                                    Integer:
                                      - U8
                                      - "1"
                                      - line_start: 12
                                        line_stop: 12
                                        col_start: 26
                                        col_stop: 29
                                        path: compiler-test
                                        content: "        return Self { x: 1u8 };"
                            span:
                              line_start: 12
                              line_stop: 12
                              col_start: 16
                              col_stop: 31
                              path: compiler-test
                              content: "        return Self { x: 1u8 };"
                        span:
                          line_start: 12
                          line_stop: 12
                          col_start: 9
                          col_stop: 31
                          path: compiler-test
                          content: "        return Self { x: 1u8 };"
                  span:
                    line_start: 11
                    line_stop: 13
                    col_start: 28
                    col_stop: 6
                    path: compiler-test
                    content: "    function new() -> Self {\n...\n    }"
                span:
                  line_start: 11
                  line_stop: 13
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function new() -> Self {\n...\n    }"
      global_consts: {}
      functions:
        "{\"name\":\"my_fn\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":10,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function my_fn() -> TestMe {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"my_fn\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":10,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function my_fn() -> TestMe {\\\"}\"}"
          input: []
          output:
            Circuit: "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":21,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function my_fn() -> TestMe {\\\"}\"}"
          block:
            statements:
              - Return:
                  expression:
                    CircuitInit:
                      name: "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":17,\\\"line_stop\\\":17,\\\"col_start\\\":10,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"  return TestMe { x: 0u8 };\\\"}\"}"
                      members:
                        - identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":17,\\\"line_stop\\\":17,\\\"col_start\\\":19,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"  return TestMe { x: 0u8 };\\\"}\"}"
                          expression:
                            Value:
                              Integer:
                                - U8
                                - "0"
                                - line_start: 17
                                  line_stop: 17
                                  col_start: 22
                                  col_stop: 25
                                  path: compiler-test
                                  content: "  return TestMe { x: 0u8 };"
                      span:
                        line_start: 17
                        line_stop: 17
                        col_start: 10
                        col_stop: 27
                        path: compiler-test
                        content: "  return TestMe { x: 0u8 };"
                  span:
                    line_start: 17
                    line_stop: 17
                    col_start: 3
                    col_stop: 27
                    path: compiler-test
                    content: "  return TestMe { x: 0u8 };"
            span:
              line_start: 16
              line_stop: 18
              col_start: 28
              col_stop: 2
              path: compiler-test
              content: "function my_fn() -> TestMe {\n...\n}"
          span:
            line_start: 16
            line_stop: 18
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function my_fn() -> TestMe {\n...\n}"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":20,\\\"line_stop\\\":20,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":20,\\\"line_stop\\\":20,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":20,\\\"line_stop\\\":20,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 20
                  line_stop: 20
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(y: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"t\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const t = TestMe {x: 6u8}.test_me();\\\"}\"}"
                      span:
                        line_start: 21
                        line_stop: 21
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const t = TestMe {x: 6u8}.test_me();"
                  type_:
                    IntegerType: U8
                  value:
                    Call:
                      function:
                        CircuitMemberAccess:
                          circuit:
                            CircuitInit:
                              name: "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":15,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const t = TestMe {x: 6u8}.test_me();\\\"}\"}"
                              members:
                                - identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":23,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const t = TestMe {x: 6u8}.test_me();\\\"}\"}"
                                  expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "6"
                                        - line_start: 21
                                          line_stop: 21
                                          col_start: 26
                                          col_stop: 29
                                          path: compiler-test
                                          content: "    const t = TestMe {x: 6u8}.test_me();"
                              span:
                                line_start: 21
                                line_stop: 21
                                col_start: 15
                                col_stop: 30
                                path: compiler-test
                                content: "    const t = TestMe {x: 6u8}.test_me();"
                          name: "{\"name\":\"test_me\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":31,\\\"col_stop\\\":38,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const t = TestMe {x: 6u8}.test_me();\\\"}\"}"
                          span:
                            line_start: 21
                            line_stop: 21
                            col_start: 15
                            col_stop: 38
                            path: compiler-test
                            content: "    const t = TestMe {x: 6u8}.test_me();"
                      arguments: []
                      span:
                        line_start: 21
                        line_stop: 21
                        col_start: 15
                        col_stop: 40
                        path: compiler-test
                        content: "    const t = TestMe {x: 6u8}.test_me();"
                  span:
                    line_start: 21
                    line_stop: 21
                    col_start: 5
                    col_stop: 40
                    path: compiler-test
                    content: "    const t = TestMe {x: 6u8}.test_me();"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"u\",\"span\":\"{\\\"line_start\\\":22,\\\"line_stop\\\":22,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const u = my_fn().test_me();\\\"}\"}"
                      span:
                        line_start: 22
                        line_stop: 22
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const u = my_fn().test_me();"
                  type_:
                    IntegerType: U8
                  value:
                    Call:
                      function:
                        CircuitMemberAccess:
                          circuit:
                            Call:
                              function:
                                Identifier: "{\"name\":\"my_fn\",\"span\":\"{\\\"line_start\\\":22,\\\"line_stop\\\":22,\\\"col_start\\\":15,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const u = my_fn().test_me();\\\"}\"}"
                              arguments: []
                              span:
                                line_start: 22
                                line_stop: 22
                                col_start: 15
                                col_stop: 22
                                path: compiler-test
                                content: "    const u = my_fn().test_me();"
                          name: "{\"name\":\"test_me\",\"span\":\"{\\\"line_start\\\":22,\\\"line_stop\\\":22,\\\"col_start\\\":23,\\\"col_stop\\\":30,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const u = my_fn().test_me();\\\"}\"}"
                          span:
                            line_start: 22
                            line_stop: 22
                            col_start: 15
                            col_stop: 30
                            path: compiler-test
                            content: "    const u = my_fn().test_me();"
                      arguments: []
                      span:
                        line_start: 22
                        line_stop: 22
                        col_start: 15
                        col_stop: 32
                        path: compiler-test
                        content: "    const u = my_fn().test_me();"
                  span:
                    line_start: 22
                    line_stop: 22
                    col_start: 5
                    col_stop: 32
                    path: compiler-test
                    content: "    const u = my_fn().test_me();"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"v\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const v = TestMe::new().test_me();\\\"}\"}"
                      span:
                        line_start: 23
                        line_stop: 23
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const v = TestMe::new().test_me();"
                  type_:
                    IntegerType: U8
                  value:
                    Call:
                      function:
                        CircuitMemberAccess:
                          circuit:
                            Call:
                              function:
                                CircuitStaticFunctionAccess:
                                  circuit:
                                    Identifier: "{\"name\":\"TestMe\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":15,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const v = TestMe::new().test_me();\\\"}\"}"
                                  name: "{\"name\":\"new\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":23,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const v = TestMe::new().test_me();\\\"}\"}"
                                  span:
                                    line_start: 23
                                    line_stop: 23
                                    col_start: 15
                                    col_stop: 26
                                    path: compiler-test
                                    content: "    const v = TestMe::new().test_me();"
                              arguments: []
                              span:
                                line_start: 23
                                line_stop: 23
                                col_start: 15
                                col_stop: 28
                                path: compiler-test
                                content: "    const v = TestMe::new().test_me();"
                          name: "{\"name\":\"test_me\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":29,\\\"col_stop\\\":36,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const v = TestMe::new().test_me();\\\"}\"}"
                          span:
                            line_start: 23
                            line_stop: 23
                            col_start: 15
                            col_stop: 36
                            path: compiler-test
                            content: "    const v = TestMe::new().test_me();"
                      arguments: []
                      span:
                        line_start: 23
                        line_stop: 23
                        col_start: 15
                        col_stop: 38
                        path: compiler-test
                        content: "    const v = TestMe::new().test_me();"
                  span:
                    line_start: 23
                    line_stop: 23
                    col_start: 5
                    col_stop: 38
                    path: compiler-test
                    content: "    const v = TestMe::new().test_me();"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"v\",\"span\":\"{\\\"line_start\\\":24,\\\"line_stop\\\":24,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return v == 2u8 == y;\\\"}\"}"
                          right:
                            Value:
                              Integer:
                                - U8
                                - "2"
                                - line_start: 24
                                  line_stop: 24
                                  col_start: 17
                                  col_stop: 20
                                  path: compiler-test
                                  content: "    return v == 2u8 == y;"
                          op: Eq
                          span:
                            line_start: 24
                            line_stop: 24
                            col_start: 12
                            col_stop: 20
                            path: compiler-test
                            content: "    return v == 2u8 == y;"
                      right:
                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":24,\\\"line_stop\\\":24,\\\"col_start\\\":24,\\\"col_stop\\\":25,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return v == 2u8 == y;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 24
                        line_stop: 24
                        col_start: 12
                        col_stop: 25
                        path: compiler-test
                        content: "    return v == 2u8 == y;"
                  span:
                    line_start: 24
                    line_stop: 24
                    col_start: 5
                    col_stop: 25
                    path: compiler-test
                    content: "    return v == 2u8 == y;"
            span:
              line_start: 20
              line_stop: 25
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(y: bool) -> bool {\n...\n}"
          span:
            line_start: 20
            line_stop: 25
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(y: bool) -> bool {\n...\n}\n\n\n"
