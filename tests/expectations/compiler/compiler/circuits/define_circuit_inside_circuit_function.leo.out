---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 95
      num_constraints: 95
      at: a57d02fa8b8a2336cc5c407e6a9489a3cb89357e3a3d966f18d8f0f86c21602f
      bt: e0a9aa0cab882fb690b28137d24f271ccaa334521934a3badc07592a31b7be7f
      ct: 7b8a2025971971c829b68fc994c6761496807e5b091ba4360d90fb6f35f4656e
    output:
      - input_file: func_circ.in
        output:
          registers:
            r0:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a: u32,\\\"}\"}"
                - IntegerType: U32
        "{\"name\":\"Bar\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Bar {\\\"}\"}":
          circuit_name: "{\"name\":\"Bar\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Bar {\\\"}\"}"
          members:
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"bar\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":14,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function bar(a: u32) -> u32 {\\\"}\"}"
                input:
                  - Variable:
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":18,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function bar(a: u32) -> u32 {\\\"}\"}"
                      const_: false
                      mutable: true
                      type_:
                        IntegerType: U32
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 18
                        col_stop: 19
                        path: compiler-test
                        content: "    function bar(a: u32) -> u32 {"
                output:
                  IntegerType: U32
                block:
                  statements:
                    - Definition:
                        declaration_type: Let
                        variable_names:
                          - mutable: true
                            identifier: "{\"name\":\"f\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        let f = Foo { a: a };\\\"}\"}"
                            span:
                              line_start: 9
                              line_stop: 9
                              col_start: 13
                              col_stop: 14
                              path: compiler-test
                              content: "        let f = Foo { a: a };"
                        type_: ~
                        value:
                          CircuitInit:
                            name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":17,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        let f = Foo { a: a };\\\"}\"}"
                            members:
                              - identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":23,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        let f = Foo { a: a };\\\"}\"}"
                                expression:
                                  Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":26,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        let f = Foo { a: a };\\\"}\"}"
                            span:
                              line_start: 9
                              line_stop: 9
                              col_start: 17
                              col_stop: 29
                              path: compiler-test
                              content: "        let f = Foo { a: a };"
                        span:
                          line_start: 9
                          line_stop: 9
                          col_start: 9
                          col_stop: 29
                          path: compiler-test
                          content: "        let f = Foo { a: a };"
                    - Return:
                        expression:
                          CircuitMemberAccess:
                            circuit:
                              Identifier: "{\"name\":\"f\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":16,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return f.a;\\\"}\"}"
                            name: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":18,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return f.a;\\\"}\"}"
                            span:
                              line_start: 10
                              line_stop: 10
                              col_start: 16
                              col_stop: 19
                              path: compiler-test
                              content: "        return f.a;"
                        span:
                          line_start: 10
                          line_stop: 10
                          col_start: 9
                          col_stop: 19
                          path: compiler-test
                          content: "        return f.a;"
                  span:
                    line_start: 8
                    line_stop: 11
                    col_start: 33
                    col_stop: 6
                    path: compiler-test
                    content: "    function bar(a: u32) -> u32 {\n...\n    }"
                span:
                  line_start: 8
                  line_stop: 11
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function bar(a: u32) -> u32 {\n...\n    }\n"
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 14
                  line_stop: 14
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: u32) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = Bar::bar(a);\\\"}\"}"
                      span:
                        line_start: 15
                        line_stop: 15
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let b = Bar::bar(a);"
                  type_: ~
                  value:
                    Call:
                      function:
                        CircuitStaticFunctionAccess:
                          circuit:
                            Identifier: "{\"name\":\"Bar\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":13,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = Bar::bar(a);\\\"}\"}"
                          name: "{\"name\":\"bar\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":18,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = Bar::bar(a);\\\"}\"}"
                          span:
                            line_start: 15
                            line_stop: 15
                            col_start: 13
                            col_stop: 21
                            path: compiler-test
                            content: "    let b = Bar::bar(a);"
                      arguments:
                        - Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":22,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = Bar::bar(a);\\\"}\"}"
                      span:
                        line_start: 15
                        line_stop: 15
                        col_start: 13
                        col_stop: 24
                        path: compiler-test
                        content: "    let b = Bar::bar(a);"
                  span:
                    line_start: 15
                    line_stop: 15
                    col_start: 5
                    col_stop: 24
                    path: compiler-test
                    content: "    let b = Bar::bar(a);"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b;\\\"}\"}"
                      right:
                        Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 16
                        line_stop: 16
                        col_start: 12
                        col_stop: 18
                        path: compiler-test
                        content: "    return a == b;"
                  span:
                    line_start: 16
                    line_stop: 16
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return a == b;"
            span:
              line_start: 14
              line_stop: 17
              col_start: 31
              col_stop: 2
              path: compiler-test
              content: "function main(a: u32) -> bool {\n...\n}"
          span:
            line_start: 14
            line_stop: 17
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: u32) -> bool {\n...\n}\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a: u32,\\\"}\"}"
                - IntegerType: U32
        "{\"name\":\"Bar\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Bar {\\\"}\"}":
          circuit_name: "{\"name\":\"Bar\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Bar {\\\"}\"}"
          members:
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"bar\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":14,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function bar(a: u32) -> u32 {\\\"}\"}"
                input:
                  - Variable:
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":18,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function bar(a: u32) -> u32 {\\\"}\"}"
                      const_: false
                      mutable: true
                      type_:
                        IntegerType: U32
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 18
                        col_stop: 19
                        path: compiler-test
                        content: "    function bar(a: u32) -> u32 {"
                output:
                  IntegerType: U32
                block:
                  statements:
                    - Definition:
                        declaration_type: Let
                        variable_names:
                          - mutable: true
                            identifier: "{\"name\":\"f\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        let f = Foo { a: a };\\\"}\"}"
                            span:
                              line_start: 9
                              line_stop: 9
                              col_start: 13
                              col_stop: 14
                              path: compiler-test
                              content: "        let f = Foo { a: a };"
                        type_: ~
                        value:
                          CircuitInit:
                            name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":17,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        let f = Foo { a: a };\\\"}\"}"
                            members:
                              - identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":23,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        let f = Foo { a: a };\\\"}\"}"
                                expression:
                                  Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":26,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        let f = Foo { a: a };\\\"}\"}"
                            span:
                              line_start: 9
                              line_stop: 9
                              col_start: 17
                              col_stop: 29
                              path: compiler-test
                              content: "        let f = Foo { a: a };"
                        span:
                          line_start: 9
                          line_stop: 9
                          col_start: 9
                          col_stop: 29
                          path: compiler-test
                          content: "        let f = Foo { a: a };"
                    - Return:
                        expression:
                          CircuitMemberAccess:
                            circuit:
                              Identifier: "{\"name\":\"f\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":16,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return f.a;\\\"}\"}"
                            name: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":18,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return f.a;\\\"}\"}"
                            span:
                              line_start: 10
                              line_stop: 10
                              col_start: 16
                              col_stop: 19
                              path: compiler-test
                              content: "        return f.a;"
                        span:
                          line_start: 10
                          line_stop: 10
                          col_start: 9
                          col_stop: 19
                          path: compiler-test
                          content: "        return f.a;"
                  span:
                    line_start: 8
                    line_stop: 11
                    col_start: 33
                    col_stop: 6
                    path: compiler-test
                    content: "    function bar(a: u32) -> u32 {\n...\n    }"
                span:
                  line_start: 8
                  line_stop: 11
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function bar(a: u32) -> u32 {\n...\n    }\n"
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 14
                  line_stop: 14
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: u32) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = Bar::bar(a);\\\"}\"}"
                      span:
                        line_start: 15
                        line_stop: 15
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let b = Bar::bar(a);"
                  type_: ~
                  value:
                    Call:
                      function:
                        CircuitStaticFunctionAccess:
                          circuit:
                            Identifier: "{\"name\":\"Bar\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":13,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = Bar::bar(a);\\\"}\"}"
                          name: "{\"name\":\"bar\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":18,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = Bar::bar(a);\\\"}\"}"
                          span:
                            line_start: 15
                            line_stop: 15
                            col_start: 13
                            col_stop: 21
                            path: compiler-test
                            content: "    let b = Bar::bar(a);"
                      arguments:
                        - Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":22,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = Bar::bar(a);\\\"}\"}"
                      span:
                        line_start: 15
                        line_stop: 15
                        col_start: 13
                        col_stop: 24
                        path: compiler-test
                        content: "    let b = Bar::bar(a);"
                  span:
                    line_start: 15
                    line_stop: 15
                    col_start: 5
                    col_stop: 24
                    path: compiler-test
                    content: "    let b = Bar::bar(a);"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b;\\\"}\"}"
                      right:
                        Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 16
                        line_stop: 16
                        col_start: 12
                        col_stop: 18
                        path: compiler-test
                        content: "    return a == b;"
                  span:
                    line_start: 16
                    line_stop: 16
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return a == b;"
            span:
              line_start: 14
              line_stop: 17
              col_start: 31
              col_stop: 2
              path: compiler-test
              content: "function main(a: u32) -> bool {\n...\n}"
          span:
            line_start: 14
            line_stop: 17
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: u32) -> bool {\n...\n}\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a: u32,\\\"}\"}"
                - IntegerType: U32
        "{\"name\":\"Bar\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Bar {\\\"}\"}":
          circuit_name: "{\"name\":\"Bar\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Bar {\\\"}\"}"
          members:
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"bar\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":14,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function bar(a: u32) -> u32 {\\\"}\"}"
                input:
                  - Variable:
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":18,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function bar(a: u32) -> u32 {\\\"}\"}"
                      const_: false
                      mutable: true
                      type_:
                        IntegerType: U32
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 18
                        col_stop: 19
                        path: compiler-test
                        content: "    function bar(a: u32) -> u32 {"
                output:
                  IntegerType: U32
                block:
                  statements:
                    - Definition:
                        declaration_type: Let
                        variable_names:
                          - mutable: true
                            identifier: "{\"name\":\"f\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        let f = Foo { a: a };\\\"}\"}"
                            span:
                              line_start: 9
                              line_stop: 9
                              col_start: 13
                              col_stop: 14
                              path: compiler-test
                              content: "        let f = Foo { a: a };"
                        type_:
                          Circuit: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
                        value:
                          CircuitInit:
                            name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":17,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        let f = Foo { a: a };\\\"}\"}"
                            members:
                              - identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":23,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        let f = Foo { a: a };\\\"}\"}"
                                expression:
                                  Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":26,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        let f = Foo { a: a };\\\"}\"}"
                            span:
                              line_start: 9
                              line_stop: 9
                              col_start: 17
                              col_stop: 29
                              path: compiler-test
                              content: "        let f = Foo { a: a };"
                        span:
                          line_start: 9
                          line_stop: 9
                          col_start: 9
                          col_stop: 29
                          path: compiler-test
                          content: "        let f = Foo { a: a };"
                    - Return:
                        expression:
                          CircuitMemberAccess:
                            circuit:
                              Identifier: "{\"name\":\"f\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":16,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return f.a;\\\"}\"}"
                            name: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":18,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return f.a;\\\"}\"}"
                            span:
                              line_start: 10
                              line_stop: 10
                              col_start: 16
                              col_stop: 19
                              path: compiler-test
                              content: "        return f.a;"
                        span:
                          line_start: 10
                          line_stop: 10
                          col_start: 9
                          col_stop: 19
                          path: compiler-test
                          content: "        return f.a;"
                  span:
                    line_start: 8
                    line_stop: 11
                    col_start: 33
                    col_stop: 6
                    path: compiler-test
                    content: "    function bar(a: u32) -> u32 {\n...\n    }"
                span:
                  line_start: 8
                  line_stop: 11
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function bar(a: u32) -> u32 {\n...\n    }\n"
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 14
                  line_stop: 14
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: u32) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = Bar::bar(a);\\\"}\"}"
                      span:
                        line_start: 15
                        line_stop: 15
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let b = Bar::bar(a);"
                  type_:
                    IntegerType: U32
                  value:
                    Call:
                      function:
                        CircuitStaticFunctionAccess:
                          circuit:
                            Identifier: "{\"name\":\"Bar\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":13,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = Bar::bar(a);\\\"}\"}"
                          name: "{\"name\":\"bar\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":18,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = Bar::bar(a);\\\"}\"}"
                          span:
                            line_start: 15
                            line_stop: 15
                            col_start: 13
                            col_stop: 21
                            path: compiler-test
                            content: "    let b = Bar::bar(a);"
                      arguments:
                        - Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":22,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = Bar::bar(a);\\\"}\"}"
                      span:
                        line_start: 15
                        line_stop: 15
                        col_start: 13
                        col_stop: 24
                        path: compiler-test
                        content: "    let b = Bar::bar(a);"
                  span:
                    line_start: 15
                    line_stop: 15
                    col_start: 5
                    col_stop: 24
                    path: compiler-test
                    content: "    let b = Bar::bar(a);"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b;\\\"}\"}"
                      right:
                        Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 16
                        line_stop: 16
                        col_start: 12
                        col_stop: 18
                        path: compiler-test
                        content: "    return a == b;"
                  span:
                    line_start: 16
                    line_stop: 16
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return a == b;"
            span:
              line_start: 14
              line_stop: 17
              col_start: 31
              col_stop: 2
              path: compiler-test
              content: "function main(a: u32) -> bool {\n...\n}"
          span:
            line_start: 14
            line_stop: 17
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: u32) -> bool {\n...\n}\n"
