---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 32
      num_constraints: 32
      at: 4f36fe54f989d60bb9c279120800f4f44596c2efb7ba703669d4c4d591569780
      bt: d378030968a64801f66d95699329086ca17e676d8bffcf73f6b431cbda7c7005
      ct: dbd098af6556ed79650d149b1691be336a46f8bad6f327e942508dd11342575e
    output:
      - input_file: inline.in
        output:
          registers:
            r0:
              type: u32
              value: "100"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    x: u32\\\"}\"}"
                - IntegerType: U32
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> u32 {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> u32 {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> u32 {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 7
                  line_stop: 7
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: u32) -> u32 {"
          output:
            IntegerType: U32
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: x };\\\"}\"}"
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let a = Foo { x: x };"
                  type_: ~
                  value:
                    CircuitInit:
                      name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":13,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: x };\\\"}\"}"
                      members:
                        - identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":19,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: x };\\\"}\"}"
                          expression:
                            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":22,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: x };\\\"}\"}"
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 13
                        col_stop: 25
                        path: compiler-test
                        content: "    let a = Foo { x: x };"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 25
                    path: compiler-test
                    content: "    let a = Foo { x: x };"
              - Return:
                  expression:
                    CircuitMemberAccess:
                      circuit:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a.x;\\\"}\"}"
                      name: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a.x;\\\"}\"}"
                      span:
                        line_start: 9
                        line_stop: 9
                        col_start: 12
                        col_stop: 15
                        path: compiler-test
                        content: "    return a.x;"
                  span:
                    line_start: 9
                    line_stop: 9
                    col_start: 5
                    col_stop: 15
                    path: compiler-test
                    content: "    return a.x;"
            span:
              line_start: 7
              line_stop: 10
              col_start: 30
              col_stop: 2
              path: compiler-test
              content: "function main(x: u32) -> u32 {\n...\n}"
          span:
            line_start: 7
            line_stop: 10
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: u32) -> u32 {\n...\n}\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    x: u32\\\"}\"}"
                - IntegerType: U32
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> u32 {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> u32 {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> u32 {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 7
                  line_stop: 7
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: u32) -> u32 {"
          output:
            IntegerType: U32
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: x };\\\"}\"}"
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let a = Foo { x: x };"
                  type_: ~
                  value:
                    CircuitInit:
                      name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":13,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: x };\\\"}\"}"
                      members:
                        - identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":19,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: x };\\\"}\"}"
                          expression:
                            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":22,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: x };\\\"}\"}"
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 13
                        col_stop: 25
                        path: compiler-test
                        content: "    let a = Foo { x: x };"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 25
                    path: compiler-test
                    content: "    let a = Foo { x: x };"
              - Return:
                  expression:
                    CircuitMemberAccess:
                      circuit:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a.x;\\\"}\"}"
                      name: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a.x;\\\"}\"}"
                      span:
                        line_start: 9
                        line_stop: 9
                        col_start: 12
                        col_stop: 15
                        path: compiler-test
                        content: "    return a.x;"
                  span:
                    line_start: 9
                    line_stop: 9
                    col_start: 5
                    col_stop: 15
                    path: compiler-test
                    content: "    return a.x;"
            span:
              line_start: 7
              line_stop: 10
              col_start: 30
              col_stop: 2
              path: compiler-test
              content: "function main(x: u32) -> u32 {\n...\n}"
          span:
            line_start: 7
            line_stop: 10
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: u32) -> u32 {\n...\n}\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    x: u32\\\"}\"}"
                - IntegerType: U32
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> u32 {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> u32 {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: u32) -> u32 {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 7
                  line_stop: 7
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: u32) -> u32 {"
          output:
            IntegerType: U32
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: x };\\\"}\"}"
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let a = Foo { x: x };"
                  type_:
                    Circuit: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
                  value:
                    CircuitInit:
                      name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":13,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: x };\\\"}\"}"
                      members:
                        - identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":19,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: x };\\\"}\"}"
                          expression:
                            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":22,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let a = Foo { x: x };\\\"}\"}"
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 13
                        col_stop: 25
                        path: compiler-test
                        content: "    let a = Foo { x: x };"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 25
                    path: compiler-test
                    content: "    let a = Foo { x: x };"
              - Return:
                  expression:
                    CircuitMemberAccess:
                      circuit:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a.x;\\\"}\"}"
                      name: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a.x;\\\"}\"}"
                      span:
                        line_start: 9
                        line_stop: 9
                        col_start: 12
                        col_stop: 15
                        path: compiler-test
                        content: "    return a.x;"
                  span:
                    line_start: 9
                    line_stop: 9
                    col_start: 5
                    col_stop: 15
                    path: compiler-test
                    content: "    return a.x;"
            span:
              line_start: 7
              line_stop: 10
              col_start: 30
              col_stop: 2
              path: compiler-test
              content: "function main(x: u32) -> u32 {\n...\n}"
          span:
            line_start: 7
            line_stop: 10
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: u32) -> u32 {\n...\n}\n"
