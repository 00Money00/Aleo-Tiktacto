---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 33823
      num_constraints: 50719
      at: 894e21b7ca1c178a167a94f174b4ea0d37b102b394100a15c92e78e16a87acdf
      bt: 6756180897cb6c9fe53fce913fd9ad1c77a5b537b805da2c7f42de0473d12c94
      ct: 2f2e90dcee9f8a28e7a9fd4ee37093e4d247d07e4ab97937ecd0ba60ec5dd903
    output:
      - input_file: pedersen.in
        output:
          registers:
            r0:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"PedersenHash\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit PedersenHash {\\\"}\"}":
          circuit_name: "{\"name\":\"PedersenHash\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit PedersenHash {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    parameters: [u32; 512];\\\"}\"}"
                - Array:
                    - IntegerType: U32
                    - - value: "512"
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"new\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":14,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function new(parameters: [u32; 512]) -> Self {\\\"}\"}"
                input:
                  - Variable:
                      identifier: "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":18,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function new(parameters: [u32; 512]) -> Self {\\\"}\"}"
                      const_: false
                      mutable: true
                      type_:
                        Array:
                          - IntegerType: U32
                          - - value: "512"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 18
                        col_stop: 28
                        path: compiler-test
                        content: "    function new(parameters: [u32; 512]) -> Self {"
                output: SelfType
                block:
                  statements:
                    - Return:
                        expression:
                          CircuitInit:
                            name: "{\"name\":\"Self\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":16,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return Self { parameters: parameters };\\\"}\"}"
                            members:
                              - identifier: "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":23,\\\"col_stop\\\":33,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return Self { parameters: parameters };\\\"}\"}"
                                expression:
                                  Identifier: "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":35,\\\"col_stop\\\":45,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return Self { parameters: parameters };\\\"}\"}"
                            span:
                              line_start: 7
                              line_stop: 7
                              col_start: 16
                              col_stop: 47
                              path: compiler-test
                              content: "        return Self { parameters: parameters };"
                        span:
                          line_start: 7
                          line_stop: 7
                          col_start: 9
                          col_stop: 47
                          path: compiler-test
                          content: "        return Self { parameters: parameters };"
                  span:
                    line_start: 6
                    line_stop: 8
                    col_start: 50
                    col_stop: 6
                    path: compiler-test
                    content: "    function new(parameters: [u32; 512]) -> Self {\n...\n    }"
                span:
                  line_start: 6
                  line_stop: 8
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function new(parameters: [u32; 512]) -> Self {\n...\n    }"
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"hash\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":14,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function hash(const self, bits: [bool; 512]) -> u32 {\\\"}\"}"
                input:
                  - ConstSelfKeyword: "{\"name\":\"const self\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":19,\\\"col_stop\\\":29,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function hash(const self, bits: [bool; 512]) -> u32 {\\\"}\"}"
                  - Variable:
                      identifier: "{\"name\":\"bits\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":31,\\\"col_stop\\\":35,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function hash(const self, bits: [bool; 512]) -> u32 {\\\"}\"}"
                      const_: false
                      mutable: true
                      type_:
                        Array:
                          - Boolean
                          - - value: "512"
                      span:
                        line_start: 10
                        line_stop: 10
                        col_start: 31
                        col_stop: 35
                        path: compiler-test
                        content: "    function hash(const self, bits: [bool; 512]) -> u32 {"
                output:
                  IntegerType: U32
                block:
                  statements:
                    - Definition:
                        declaration_type: Let
                        variable_names:
                          - mutable: true
                            identifier: "{\"name\":\"digest\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":13,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        let digest: u32 = 0;\\\"}\"}"
                            span:
                              line_start: 11
                              line_stop: 11
                              col_start: 13
                              col_stop: 19
                              path: compiler-test
                              content: "        let digest: u32 = 0;"
                        type_:
                          IntegerType: U32
                        value:
                          Value:
                            Implicit:
                              - "0"
                              - line_start: 11
                                line_stop: 11
                                col_start: 27
                                col_stop: 28
                                path: compiler-test
                                content: "        let digest: u32 = 0;"
                        span:
                          line_start: 11
                          line_stop: 11
                          col_start: 9
                          col_stop: 28
                          path: compiler-test
                          content: "        let digest: u32 = 0;"
                    - Iteration:
                        variable: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        for i in 0..512 {\\\"}\"}"
                        start:
                          Value:
                            Implicit:
                              - "0"
                              - line_start: 12
                                line_stop: 12
                                col_start: 18
                                col_stop: 19
                                path: compiler-test
                                content: "        for i in 0..512 {"
                        stop:
                          Value:
                            Implicit:
                              - "512"
                              - line_start: 12
                                line_stop: 12
                                col_start: 21
                                col_stop: 24
                                path: compiler-test
                                content: "        for i in 0..512 {"
                        block:
                          statements:
                            - Definition:
                                declaration_type: Let
                                variable_names:
                                  - mutable: true
                                    identifier: "{\"name\":\"base\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":17,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            let base = bits[i] ? self.parameters[i] : 0u32;\\\"}\"}"
                                    span:
                                      line_start: 13
                                      line_stop: 13
                                      col_start: 17
                                      col_stop: 21
                                      path: compiler-test
                                      content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                                type_: ~
                                value:
                                  Ternary:
                                    condition:
                                      ArrayAccess:
                                        array:
                                          Identifier: "{\"name\":\"bits\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":24,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            let base = bits[i] ? self.parameters[i] : 0u32;\\\"}\"}"
                                        index:
                                          Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":29,\\\"col_stop\\\":30,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            let base = bits[i] ? self.parameters[i] : 0u32;\\\"}\"}"
                                        span:
                                          line_start: 13
                                          line_stop: 13
                                          col_start: 24
                                          col_stop: 31
                                          path: compiler-test
                                          content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                                    if_true:
                                      ArrayAccess:
                                        array:
                                          CircuitMemberAccess:
                                            circuit:
                                              Identifier: "{\"name\":\"self\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":34,\\\"col_stop\\\":38,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            let base = bits[i] ? self.parameters[i] : 0u32;\\\"}\"}"
                                            name: "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":39,\\\"col_stop\\\":49,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            let base = bits[i] ? self.parameters[i] : 0u32;\\\"}\"}"
                                            span:
                                              line_start: 13
                                              line_stop: 13
                                              col_start: 34
                                              col_stop: 49
                                              path: compiler-test
                                              content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                                        index:
                                          Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":50,\\\"col_stop\\\":51,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            let base = bits[i] ? self.parameters[i] : 0u32;\\\"}\"}"
                                        span:
                                          line_start: 13
                                          line_stop: 13
                                          col_start: 34
                                          col_stop: 52
                                          path: compiler-test
                                          content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                                    if_false:
                                      Value:
                                        Integer:
                                          - U32
                                          - "0"
                                          - line_start: 13
                                            line_stop: 13
                                            col_start: 55
                                            col_stop: 59
                                            path: compiler-test
                                            content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                                    span:
                                      line_start: 13
                                      line_stop: 13
                                      col_start: 24
                                      col_stop: 59
                                      path: compiler-test
                                      content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                                span:
                                  line_start: 13
                                  line_stop: 13
                                  col_start: 13
                                  col_stop: 59
                                  path: compiler-test
                                  content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                            - Assign:
                                operation: Add
                                assignee:
                                  identifier: "{\"name\":\"digest\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":13,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            digest += base;\\\"}\"}"
                                  accesses: []
                                  span:
                                    line_start: 14
                                    line_stop: 14
                                    col_start: 13
                                    col_stop: 19
                                    path: compiler-test
                                    content: "            digest += base;"
                                value:
                                  Identifier: "{\"name\":\"base\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":23,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            digest += base;\\\"}\"}"
                                span:
                                  line_start: 14
                                  line_stop: 14
                                  col_start: 13
                                  col_stop: 27
                                  path: compiler-test
                                  content: "            digest += base;"
                          span:
                            line_start: 12
                            line_stop: 15
                            col_start: 25
                            col_stop: 10
                            path: compiler-test
                            content: "        for i in 0..512 {\n...\n        }"
                        span:
                          line_start: 12
                          line_stop: 15
                          col_start: 9
                          col_stop: 10
                          path: compiler-test
                          content: "        for i in 0..512 {\n...\n        }\n"
                    - Return:
                        expression:
                          Identifier: "{\"name\":\"digest\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":16,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return digest;\\\"}\"}"
                        span:
                          line_start: 16
                          line_stop: 16
                          col_start: 9
                          col_stop: 22
                          path: compiler-test
                          content: "        return digest;"
                  span:
                    line_start: 10
                    line_stop: 17
                    col_start: 57
                    col_stop: 6
                    path: compiler-test
                    content: "    function hash(const self, bits: [bool; 512]) -> u32 {\n...\n    }"
                span:
                  line_start: 10
                  line_stop: 17
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function hash(const self, bits: [bool; 512]) -> u32 {\n...\n    }\n\n\n\n\n"
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(hash_input: [bool; 512]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(hash_input: [bool; 512]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"hash_input\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":15,\\\"col_stop\\\":25,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(hash_input: [bool; 512]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Boolean
                    - - value: "512"
                span:
                  line_start: 21
                  line_stop: 21
                  col_start: 15
                  col_stop: 25
                  path: compiler-test
                  content: "function main(hash_input: [bool; 512]) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":22,\\\"line_stop\\\":22,\\\"col_start\\\":11,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const parameters = [0u32; 512];\\\"}\"}"
                      span:
                        line_start: 22
                        line_stop: 22
                        col_start: 11
                        col_stop: 21
                        path: compiler-test
                        content: "    const parameters = [0u32; 512];"
                  type_: ~
                  value:
                    ArrayInit:
                      element:
                        Value:
                          Integer:
                            - U32
                            - "0"
                            - line_start: 22
                              line_stop: 22
                              col_start: 25
                              col_stop: 29
                              path: compiler-test
                              content: "    const parameters = [0u32; 512];"
                      dimensions:
                        - value: "512"
                      span:
                        line_start: 22
                        line_stop: 22
                        col_start: 24
                        col_stop: 35
                        path: compiler-test
                        content: "    const parameters = [0u32; 512];"
                  span:
                    line_start: 22
                    line_stop: 22
                    col_start: 5
                    col_stop: 35
                    path: compiler-test
                    content: "    const parameters = [0u32; 512];"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"pedersen\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":11,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const pedersen = PedersenHash::new(parameters);\\\"}\"}"
                      span:
                        line_start: 23
                        line_stop: 23
                        col_start: 11
                        col_stop: 19
                        path: compiler-test
                        content: "    const pedersen = PedersenHash::new(parameters);"
                  type_: ~
                  value:
                    Call:
                      function:
                        CircuitStaticFunctionAccess:
                          circuit:
                            Identifier: "{\"name\":\"PedersenHash\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":22,\\\"col_stop\\\":34,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const pedersen = PedersenHash::new(parameters);\\\"}\"}"
                          name: "{\"name\":\"new\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":36,\\\"col_stop\\\":39,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const pedersen = PedersenHash::new(parameters);\\\"}\"}"
                          span:
                            line_start: 23
                            line_stop: 23
                            col_start: 22
                            col_stop: 39
                            path: compiler-test
                            content: "    const pedersen = PedersenHash::new(parameters);"
                      arguments:
                        - Identifier: "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":40,\\\"col_stop\\\":50,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const pedersen = PedersenHash::new(parameters);\\\"}\"}"
                      span:
                        line_start: 23
                        line_stop: 23
                        col_start: 22
                        col_stop: 51
                        path: compiler-test
                        content: "    const pedersen = PedersenHash::new(parameters);"
                  span:
                    line_start: 23
                    line_stop: 23
                    col_start: 5
                    col_stop: 51
                    path: compiler-test
                    content: "    const pedersen = PedersenHash::new(parameters);"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"res\",\"span\":\"{\\\"line_start\\\":24,\\\"line_stop\\\":24,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let res = pedersen.hash(hash_input);\\\"}\"}"
                      span:
                        line_start: 24
                        line_stop: 24
                        col_start: 9
                        col_stop: 12
                        path: compiler-test
                        content: "    let res = pedersen.hash(hash_input);"
                  type_: ~
                  value:
                    Call:
                      function:
                        CircuitMemberAccess:
                          circuit:
                            Identifier: "{\"name\":\"pedersen\",\"span\":\"{\\\"line_start\\\":24,\\\"line_stop\\\":24,\\\"col_start\\\":15,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let res = pedersen.hash(hash_input);\\\"}\"}"
                          name: "{\"name\":\"hash\",\"span\":\"{\\\"line_start\\\":24,\\\"line_stop\\\":24,\\\"col_start\\\":24,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let res = pedersen.hash(hash_input);\\\"}\"}"
                          span:
                            line_start: 24
                            line_stop: 24
                            col_start: 15
                            col_stop: 28
                            path: compiler-test
                            content: "    let res = pedersen.hash(hash_input);"
                      arguments:
                        - Identifier: "{\"name\":\"hash_input\",\"span\":\"{\\\"line_start\\\":24,\\\"line_stop\\\":24,\\\"col_start\\\":29,\\\"col_stop\\\":39,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let res = pedersen.hash(hash_input);\\\"}\"}"
                      span:
                        line_start: 24
                        line_stop: 24
                        col_start: 15
                        col_stop: 40
                        path: compiler-test
                        content: "    let res = pedersen.hash(hash_input);"
                  span:
                    line_start: 24
                    line_stop: 24
                    col_start: 5
                    col_stop: 40
                    path: compiler-test
                    content: "    let res = pedersen.hash(hash_input);"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"res\",\"span\":\"{\\\"line_start\\\":26,\\\"line_stop\\\":26,\\\"col_start\\\":12,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return res == 0u32;\\\"}\"}"
                      right:
                        Value:
                          Integer:
                            - U32
                            - "0"
                            - line_start: 26
                              line_stop: 26
                              col_start: 19
                              col_stop: 23
                              path: compiler-test
                              content: "    return res == 0u32;"
                      op: Eq
                      span:
                        line_start: 26
                        line_stop: 26
                        col_start: 12
                        col_stop: 23
                        path: compiler-test
                        content: "    return res == 0u32;"
                  span:
                    line_start: 26
                    line_stop: 26
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    return res == 0u32;"
            span:
              line_start: 21
              line_stop: 27
              col_start: 48
              col_stop: 2
              path: compiler-test
              content: "function main(hash_input: [bool; 512]) -> bool {\n...\n}"
          span:
            line_start: 21
            line_stop: 27
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(hash_input: [bool; 512]) -> bool {\n...\n}\n\n\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"PedersenHash\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit PedersenHash {\\\"}\"}":
          circuit_name: "{\"name\":\"PedersenHash\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit PedersenHash {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    parameters: [u32; 512];\\\"}\"}"
                - Array:
                    - IntegerType: U32
                    - - value: "512"
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"new\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":14,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function new(parameters: [u32; 512]) -> Self {\\\"}\"}"
                input:
                  - Variable:
                      identifier: "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":18,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function new(parameters: [u32; 512]) -> Self {\\\"}\"}"
                      const_: false
                      mutable: true
                      type_:
                        Array:
                          - IntegerType: U32
                          - - value: "512"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 18
                        col_stop: 28
                        path: compiler-test
                        content: "    function new(parameters: [u32; 512]) -> Self {"
                output:
                  Circuit: "{\"name\":\"PedersenHash\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit PedersenHash {\\\"}\"}"
                block:
                  statements:
                    - Return:
                        expression:
                          CircuitInit:
                            name: "{\"name\":\"PedersenHash\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit PedersenHash {\\\"}\"}"
                            members:
                              - identifier: "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":23,\\\"col_stop\\\":33,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return Self { parameters: parameters };\\\"}\"}"
                                expression:
                                  Identifier: "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":35,\\\"col_stop\\\":45,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return Self { parameters: parameters };\\\"}\"}"
                            span:
                              line_start: 7
                              line_stop: 7
                              col_start: 16
                              col_stop: 47
                              path: compiler-test
                              content: "        return Self { parameters: parameters };"
                        span:
                          line_start: 7
                          line_stop: 7
                          col_start: 9
                          col_stop: 47
                          path: compiler-test
                          content: "        return Self { parameters: parameters };"
                  span:
                    line_start: 6
                    line_stop: 8
                    col_start: 50
                    col_stop: 6
                    path: compiler-test
                    content: "    function new(parameters: [u32; 512]) -> Self {\n...\n    }"
                span:
                  line_start: 6
                  line_stop: 8
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function new(parameters: [u32; 512]) -> Self {\n...\n    }"
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"hash\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":14,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function hash(const self, bits: [bool; 512]) -> u32 {\\\"}\"}"
                input:
                  - ConstSelfKeyword: "{\"name\":\"const self\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":19,\\\"col_stop\\\":29,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function hash(const self, bits: [bool; 512]) -> u32 {\\\"}\"}"
                  - Variable:
                      identifier: "{\"name\":\"bits\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":31,\\\"col_stop\\\":35,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function hash(const self, bits: [bool; 512]) -> u32 {\\\"}\"}"
                      const_: false
                      mutable: true
                      type_:
                        Array:
                          - Boolean
                          - - value: "512"
                      span:
                        line_start: 10
                        line_stop: 10
                        col_start: 31
                        col_stop: 35
                        path: compiler-test
                        content: "    function hash(const self, bits: [bool; 512]) -> u32 {"
                output:
                  IntegerType: U32
                block:
                  statements:
                    - Definition:
                        declaration_type: Let
                        variable_names:
                          - mutable: true
                            identifier: "{\"name\":\"digest\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":13,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        let digest: u32 = 0;\\\"}\"}"
                            span:
                              line_start: 11
                              line_stop: 11
                              col_start: 13
                              col_stop: 19
                              path: compiler-test
                              content: "        let digest: u32 = 0;"
                        type_:
                          IntegerType: U32
                        value:
                          Value:
                            Implicit:
                              - "0"
                              - line_start: 11
                                line_stop: 11
                                col_start: 27
                                col_stop: 28
                                path: compiler-test
                                content: "        let digest: u32 = 0;"
                        span:
                          line_start: 11
                          line_stop: 11
                          col_start: 9
                          col_stop: 28
                          path: compiler-test
                          content: "        let digest: u32 = 0;"
                    - Iteration:
                        variable: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        for i in 0..512 {\\\"}\"}"
                        start:
                          Value:
                            Implicit:
                              - "0"
                              - line_start: 12
                                line_stop: 12
                                col_start: 18
                                col_stop: 19
                                path: compiler-test
                                content: "        for i in 0..512 {"
                        stop:
                          Value:
                            Implicit:
                              - "512"
                              - line_start: 12
                                line_stop: 12
                                col_start: 21
                                col_stop: 24
                                path: compiler-test
                                content: "        for i in 0..512 {"
                        block:
                          statements:
                            - Definition:
                                declaration_type: Let
                                variable_names:
                                  - mutable: true
                                    identifier: "{\"name\":\"base\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":17,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            let base = bits[i] ? self.parameters[i] : 0u32;\\\"}\"}"
                                    span:
                                      line_start: 13
                                      line_stop: 13
                                      col_start: 17
                                      col_stop: 21
                                      path: compiler-test
                                      content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                                type_: ~
                                value:
                                  Ternary:
                                    condition:
                                      ArrayAccess:
                                        array:
                                          Identifier: "{\"name\":\"bits\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":24,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            let base = bits[i] ? self.parameters[i] : 0u32;\\\"}\"}"
                                        index:
                                          Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":29,\\\"col_stop\\\":30,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            let base = bits[i] ? self.parameters[i] : 0u32;\\\"}\"}"
                                        span:
                                          line_start: 13
                                          line_stop: 13
                                          col_start: 24
                                          col_stop: 31
                                          path: compiler-test
                                          content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                                    if_true:
                                      ArrayAccess:
                                        array:
                                          CircuitMemberAccess:
                                            circuit:
                                              Identifier: "{\"name\":\"self\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":34,\\\"col_stop\\\":38,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            let base = bits[i] ? self.parameters[i] : 0u32;\\\"}\"}"
                                            name: "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":39,\\\"col_stop\\\":49,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            let base = bits[i] ? self.parameters[i] : 0u32;\\\"}\"}"
                                            span:
                                              line_start: 13
                                              line_stop: 13
                                              col_start: 34
                                              col_stop: 49
                                              path: compiler-test
                                              content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                                        index:
                                          Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":50,\\\"col_stop\\\":51,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            let base = bits[i] ? self.parameters[i] : 0u32;\\\"}\"}"
                                        span:
                                          line_start: 13
                                          line_stop: 13
                                          col_start: 34
                                          col_stop: 52
                                          path: compiler-test
                                          content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                                    if_false:
                                      Value:
                                        Integer:
                                          - U32
                                          - "0"
                                          - line_start: 13
                                            line_stop: 13
                                            col_start: 55
                                            col_stop: 59
                                            path: compiler-test
                                            content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                                    span:
                                      line_start: 13
                                      line_stop: 13
                                      col_start: 24
                                      col_stop: 59
                                      path: compiler-test
                                      content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                                span:
                                  line_start: 13
                                  line_stop: 13
                                  col_start: 13
                                  col_stop: 59
                                  path: compiler-test
                                  content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                            - Assign:
                                operation: Assign
                                assignee:
                                  identifier: "{\"name\":\"digest\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":13,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            digest += base;\\\"}\"}"
                                  accesses: []
                                  span:
                                    line_start: 14
                                    line_stop: 14
                                    col_start: 13
                                    col_stop: 19
                                    path: compiler-test
                                    content: "            digest += base;"
                                value:
                                  Binary:
                                    left:
                                      Identifier: "{\"name\":\"digest\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":13,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            digest += base;\\\"}\"}"
                                    right:
                                      Identifier: "{\"name\":\"base\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":23,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            digest += base;\\\"}\"}"
                                    op: Add
                                    span:
                                      line_start: 14
                                      line_stop: 14
                                      col_start: 13
                                      col_stop: 27
                                      path: compiler-test
                                      content: "            digest += base;"
                                span:
                                  line_start: 14
                                  line_stop: 14
                                  col_start: 13
                                  col_stop: 27
                                  path: compiler-test
                                  content: "            digest += base;"
                          span:
                            line_start: 12
                            line_stop: 15
                            col_start: 25
                            col_stop: 10
                            path: compiler-test
                            content: "        for i in 0..512 {\n...\n        }"
                        span:
                          line_start: 12
                          line_stop: 15
                          col_start: 9
                          col_stop: 10
                          path: compiler-test
                          content: "        for i in 0..512 {\n...\n        }\n"
                    - Return:
                        expression:
                          Identifier: "{\"name\":\"digest\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":16,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return digest;\\\"}\"}"
                        span:
                          line_start: 16
                          line_stop: 16
                          col_start: 9
                          col_stop: 22
                          path: compiler-test
                          content: "        return digest;"
                  span:
                    line_start: 10
                    line_stop: 17
                    col_start: 57
                    col_stop: 6
                    path: compiler-test
                    content: "    function hash(const self, bits: [bool; 512]) -> u32 {\n...\n    }"
                span:
                  line_start: 10
                  line_stop: 17
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function hash(const self, bits: [bool; 512]) -> u32 {\n...\n    }\n\n\n\n\n"
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(hash_input: [bool; 512]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(hash_input: [bool; 512]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"hash_input\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":15,\\\"col_stop\\\":25,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(hash_input: [bool; 512]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Boolean
                    - - value: "512"
                span:
                  line_start: 21
                  line_stop: 21
                  col_start: 15
                  col_stop: 25
                  path: compiler-test
                  content: "function main(hash_input: [bool; 512]) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":22,\\\"line_stop\\\":22,\\\"col_start\\\":11,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const parameters = [0u32; 512];\\\"}\"}"
                      span:
                        line_start: 22
                        line_stop: 22
                        col_start: 11
                        col_stop: 21
                        path: compiler-test
                        content: "    const parameters = [0u32; 512];"
                  type_: ~
                  value:
                    ArrayInit:
                      element:
                        Value:
                          Integer:
                            - U32
                            - "0"
                            - line_start: 22
                              line_stop: 22
                              col_start: 25
                              col_stop: 29
                              path: compiler-test
                              content: "    const parameters = [0u32; 512];"
                      dimensions:
                        - value: "512"
                      span:
                        line_start: 22
                        line_stop: 22
                        col_start: 24
                        col_stop: 35
                        path: compiler-test
                        content: "    const parameters = [0u32; 512];"
                  span:
                    line_start: 22
                    line_stop: 22
                    col_start: 5
                    col_stop: 35
                    path: compiler-test
                    content: "    const parameters = [0u32; 512];"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"pedersen\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":11,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const pedersen = PedersenHash::new(parameters);\\\"}\"}"
                      span:
                        line_start: 23
                        line_stop: 23
                        col_start: 11
                        col_stop: 19
                        path: compiler-test
                        content: "    const pedersen = PedersenHash::new(parameters);"
                  type_: ~
                  value:
                    Call:
                      function:
                        CircuitStaticFunctionAccess:
                          circuit:
                            Identifier: "{\"name\":\"PedersenHash\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":22,\\\"col_stop\\\":34,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const pedersen = PedersenHash::new(parameters);\\\"}\"}"
                          name: "{\"name\":\"new\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":36,\\\"col_stop\\\":39,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const pedersen = PedersenHash::new(parameters);\\\"}\"}"
                          span:
                            line_start: 23
                            line_stop: 23
                            col_start: 22
                            col_stop: 39
                            path: compiler-test
                            content: "    const pedersen = PedersenHash::new(parameters);"
                      arguments:
                        - Identifier: "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":40,\\\"col_stop\\\":50,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const pedersen = PedersenHash::new(parameters);\\\"}\"}"
                      span:
                        line_start: 23
                        line_stop: 23
                        col_start: 22
                        col_stop: 51
                        path: compiler-test
                        content: "    const pedersen = PedersenHash::new(parameters);"
                  span:
                    line_start: 23
                    line_stop: 23
                    col_start: 5
                    col_stop: 51
                    path: compiler-test
                    content: "    const pedersen = PedersenHash::new(parameters);"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"res\",\"span\":\"{\\\"line_start\\\":24,\\\"line_stop\\\":24,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let res = pedersen.hash(hash_input);\\\"}\"}"
                      span:
                        line_start: 24
                        line_stop: 24
                        col_start: 9
                        col_stop: 12
                        path: compiler-test
                        content: "    let res = pedersen.hash(hash_input);"
                  type_: ~
                  value:
                    Call:
                      function:
                        CircuitMemberAccess:
                          circuit:
                            Identifier: "{\"name\":\"pedersen\",\"span\":\"{\\\"line_start\\\":24,\\\"line_stop\\\":24,\\\"col_start\\\":15,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let res = pedersen.hash(hash_input);\\\"}\"}"
                          name: "{\"name\":\"hash\",\"span\":\"{\\\"line_start\\\":24,\\\"line_stop\\\":24,\\\"col_start\\\":24,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let res = pedersen.hash(hash_input);\\\"}\"}"
                          span:
                            line_start: 24
                            line_stop: 24
                            col_start: 15
                            col_stop: 28
                            path: compiler-test
                            content: "    let res = pedersen.hash(hash_input);"
                      arguments:
                        - Identifier: "{\"name\":\"hash_input\",\"span\":\"{\\\"line_start\\\":24,\\\"line_stop\\\":24,\\\"col_start\\\":29,\\\"col_stop\\\":39,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let res = pedersen.hash(hash_input);\\\"}\"}"
                      span:
                        line_start: 24
                        line_stop: 24
                        col_start: 15
                        col_stop: 40
                        path: compiler-test
                        content: "    let res = pedersen.hash(hash_input);"
                  span:
                    line_start: 24
                    line_stop: 24
                    col_start: 5
                    col_stop: 40
                    path: compiler-test
                    content: "    let res = pedersen.hash(hash_input);"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"res\",\"span\":\"{\\\"line_start\\\":26,\\\"line_stop\\\":26,\\\"col_start\\\":12,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return res == 0u32;\\\"}\"}"
                      right:
                        Value:
                          Integer:
                            - U32
                            - "0"
                            - line_start: 26
                              line_stop: 26
                              col_start: 19
                              col_stop: 23
                              path: compiler-test
                              content: "    return res == 0u32;"
                      op: Eq
                      span:
                        line_start: 26
                        line_stop: 26
                        col_start: 12
                        col_stop: 23
                        path: compiler-test
                        content: "    return res == 0u32;"
                  span:
                    line_start: 26
                    line_stop: 26
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    return res == 0u32;"
            span:
              line_start: 21
              line_stop: 27
              col_start: 48
              col_stop: 2
              path: compiler-test
              content: "function main(hash_input: [bool; 512]) -> bool {\n...\n}"
          span:
            line_start: 21
            line_stop: 27
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(hash_input: [bool; 512]) -> bool {\n...\n}\n\n\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"PedersenHash\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit PedersenHash {\\\"}\"}":
          circuit_name: "{\"name\":\"PedersenHash\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit PedersenHash {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    parameters: [u32; 512];\\\"}\"}"
                - Array:
                    - IntegerType: U32
                    - - value: "512"
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"new\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":14,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function new(parameters: [u32; 512]) -> Self {\\\"}\"}"
                input:
                  - Variable:
                      identifier: "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":18,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function new(parameters: [u32; 512]) -> Self {\\\"}\"}"
                      const_: false
                      mutable: true
                      type_:
                        Array:
                          - IntegerType: U32
                          - - value: "512"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 18
                        col_stop: 28
                        path: compiler-test
                        content: "    function new(parameters: [u32; 512]) -> Self {"
                output:
                  Circuit: "{\"name\":\"PedersenHash\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit PedersenHash {\\\"}\"}"
                block:
                  statements:
                    - Return:
                        expression:
                          CircuitInit:
                            name: "{\"name\":\"PedersenHash\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit PedersenHash {\\\"}\"}"
                            members:
                              - identifier: "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":23,\\\"col_stop\\\":33,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return Self { parameters: parameters };\\\"}\"}"
                                expression:
                                  Identifier: "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":35,\\\"col_stop\\\":45,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return Self { parameters: parameters };\\\"}\"}"
                            span:
                              line_start: 7
                              line_stop: 7
                              col_start: 16
                              col_stop: 47
                              path: compiler-test
                              content: "        return Self { parameters: parameters };"
                        span:
                          line_start: 7
                          line_stop: 7
                          col_start: 9
                          col_stop: 47
                          path: compiler-test
                          content: "        return Self { parameters: parameters };"
                  span:
                    line_start: 6
                    line_stop: 8
                    col_start: 50
                    col_stop: 6
                    path: compiler-test
                    content: "    function new(parameters: [u32; 512]) -> Self {\n...\n    }"
                span:
                  line_start: 6
                  line_stop: 8
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function new(parameters: [u32; 512]) -> Self {\n...\n    }"
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"hash\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":14,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function hash(const self, bits: [bool; 512]) -> u32 {\\\"}\"}"
                input:
                  - ConstSelfKeyword: "{\"name\":\"const self\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":19,\\\"col_stop\\\":29,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function hash(const self, bits: [bool; 512]) -> u32 {\\\"}\"}"
                  - Variable:
                      identifier: "{\"name\":\"bits\",\"span\":\"{\\\"line_start\\\":10,\\\"line_stop\\\":10,\\\"col_start\\\":31,\\\"col_stop\\\":35,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function hash(const self, bits: [bool; 512]) -> u32 {\\\"}\"}"
                      const_: false
                      mutable: true
                      type_:
                        Array:
                          - Boolean
                          - - value: "512"
                      span:
                        line_start: 10
                        line_stop: 10
                        col_start: 31
                        col_stop: 35
                        path: compiler-test
                        content: "    function hash(const self, bits: [bool; 512]) -> u32 {"
                output:
                  IntegerType: U32
                block:
                  statements:
                    - Definition:
                        declaration_type: Let
                        variable_names:
                          - mutable: true
                            identifier: "{\"name\":\"digest\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":13,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        let digest: u32 = 0;\\\"}\"}"
                            span:
                              line_start: 11
                              line_stop: 11
                              col_start: 13
                              col_stop: 19
                              path: compiler-test
                              content: "        let digest: u32 = 0;"
                        type_:
                          IntegerType: U32
                        value:
                          Value:
                            Integer:
                              - U32
                              - "0"
                              - line_start: 11
                                line_stop: 11
                                col_start: 27
                                col_stop: 28
                                path: compiler-test
                                content: "        let digest: u32 = 0;"
                        span:
                          line_start: 11
                          line_stop: 11
                          col_start: 9
                          col_stop: 28
                          path: compiler-test
                          content: "        let digest: u32 = 0;"
                    - Iteration:
                        variable: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        for i in 0..512 {\\\"}\"}"
                        start:
                          Value:
                            Integer:
                              - U32
                              - "0"
                              - line_start: 12
                                line_stop: 12
                                col_start: 18
                                col_stop: 19
                                path: compiler-test
                                content: "        for i in 0..512 {"
                        stop:
                          Value:
                            Integer:
                              - U32
                              - "512"
                              - line_start: 12
                                line_stop: 12
                                col_start: 21
                                col_stop: 24
                                path: compiler-test
                                content: "        for i in 0..512 {"
                        block:
                          statements:
                            - Definition:
                                declaration_type: Let
                                variable_names:
                                  - mutable: true
                                    identifier: "{\"name\":\"base\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":17,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            let base = bits[i] ? self.parameters[i] : 0u32;\\\"}\"}"
                                    span:
                                      line_start: 13
                                      line_stop: 13
                                      col_start: 17
                                      col_stop: 21
                                      path: compiler-test
                                      content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                                type_:
                                  IntegerType: U32
                                value:
                                  Ternary:
                                    condition:
                                      ArrayAccess:
                                        array:
                                          Identifier: "{\"name\":\"bits\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":24,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            let base = bits[i] ? self.parameters[i] : 0u32;\\\"}\"}"
                                        index:
                                          Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":29,\\\"col_stop\\\":30,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            let base = bits[i] ? self.parameters[i] : 0u32;\\\"}\"}"
                                        span:
                                          line_start: 13
                                          line_stop: 13
                                          col_start: 24
                                          col_stop: 31
                                          path: compiler-test
                                          content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                                    if_true:
                                      ArrayAccess:
                                        array:
                                          CircuitMemberAccess:
                                            circuit:
                                              Identifier: "{\"name\":\"self\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":34,\\\"col_stop\\\":38,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            let base = bits[i] ? self.parameters[i] : 0u32;\\\"}\"}"
                                            name: "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":39,\\\"col_stop\\\":49,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            let base = bits[i] ? self.parameters[i] : 0u32;\\\"}\"}"
                                            span:
                                              line_start: 13
                                              line_stop: 13
                                              col_start: 34
                                              col_stop: 49
                                              path: compiler-test
                                              content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                                        index:
                                          Identifier: "{\"name\":\"i\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":50,\\\"col_stop\\\":51,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            let base = bits[i] ? self.parameters[i] : 0u32;\\\"}\"}"
                                        span:
                                          line_start: 13
                                          line_stop: 13
                                          col_start: 34
                                          col_stop: 52
                                          path: compiler-test
                                          content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                                    if_false:
                                      Value:
                                        Integer:
                                          - U32
                                          - "0"
                                          - line_start: 13
                                            line_stop: 13
                                            col_start: 55
                                            col_stop: 59
                                            path: compiler-test
                                            content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                                    span:
                                      line_start: 13
                                      line_stop: 13
                                      col_start: 24
                                      col_stop: 59
                                      path: compiler-test
                                      content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                                span:
                                  line_start: 13
                                  line_stop: 13
                                  col_start: 13
                                  col_stop: 59
                                  path: compiler-test
                                  content: "            let base = bits[i] ? self.parameters[i] : 0u32;"
                            - Assign:
                                operation: Assign
                                assignee:
                                  identifier: "{\"name\":\"digest\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":13,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            digest += base;\\\"}\"}"
                                  accesses: []
                                  span:
                                    line_start: 14
                                    line_stop: 14
                                    col_start: 13
                                    col_stop: 19
                                    path: compiler-test
                                    content: "            digest += base;"
                                value:
                                  Binary:
                                    left:
                                      Identifier: "{\"name\":\"digest\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":13,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            digest += base;\\\"}\"}"
                                    right:
                                      Identifier: "{\"name\":\"base\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":23,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"            digest += base;\\\"}\"}"
                                    op: Add
                                    span:
                                      line_start: 14
                                      line_stop: 14
                                      col_start: 13
                                      col_stop: 27
                                      path: compiler-test
                                      content: "            digest += base;"
                                span:
                                  line_start: 14
                                  line_stop: 14
                                  col_start: 13
                                  col_stop: 27
                                  path: compiler-test
                                  content: "            digest += base;"
                          span:
                            line_start: 12
                            line_stop: 15
                            col_start: 25
                            col_stop: 10
                            path: compiler-test
                            content: "        for i in 0..512 {\n...\n        }"
                        span:
                          line_start: 12
                          line_stop: 15
                          col_start: 9
                          col_stop: 10
                          path: compiler-test
                          content: "        for i in 0..512 {\n...\n        }\n"
                    - Return:
                        expression:
                          Identifier: "{\"name\":\"digest\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":16,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return digest;\\\"}\"}"
                        span:
                          line_start: 16
                          line_stop: 16
                          col_start: 9
                          col_stop: 22
                          path: compiler-test
                          content: "        return digest;"
                  span:
                    line_start: 10
                    line_stop: 17
                    col_start: 57
                    col_stop: 6
                    path: compiler-test
                    content: "    function hash(const self, bits: [bool; 512]) -> u32 {\n...\n    }"
                span:
                  line_start: 10
                  line_stop: 17
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function hash(const self, bits: [bool; 512]) -> u32 {\n...\n    }\n\n\n\n\n"
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(hash_input: [bool; 512]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(hash_input: [bool; 512]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"hash_input\",\"span\":\"{\\\"line_start\\\":21,\\\"line_stop\\\":21,\\\"col_start\\\":15,\\\"col_stop\\\":25,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(hash_input: [bool; 512]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Boolean
                    - - value: "512"
                span:
                  line_start: 21
                  line_stop: 21
                  col_start: 15
                  col_stop: 25
                  path: compiler-test
                  content: "function main(hash_input: [bool; 512]) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":22,\\\"line_stop\\\":22,\\\"col_start\\\":11,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const parameters = [0u32; 512];\\\"}\"}"
                      span:
                        line_start: 22
                        line_stop: 22
                        col_start: 11
                        col_stop: 21
                        path: compiler-test
                        content: "    const parameters = [0u32; 512];"
                  type_:
                    Array:
                      - IntegerType: U32
                      - - value: "512"
                  value:
                    ArrayInit:
                      element:
                        Value:
                          Integer:
                            - U32
                            - "0"
                            - line_start: 22
                              line_stop: 22
                              col_start: 25
                              col_stop: 29
                              path: compiler-test
                              content: "    const parameters = [0u32; 512];"
                      dimensions:
                        - value: "512"
                      span:
                        line_start: 22
                        line_stop: 22
                        col_start: 24
                        col_stop: 35
                        path: compiler-test
                        content: "    const parameters = [0u32; 512];"
                  span:
                    line_start: 22
                    line_stop: 22
                    col_start: 5
                    col_stop: 35
                    path: compiler-test
                    content: "    const parameters = [0u32; 512];"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"pedersen\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":11,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const pedersen = PedersenHash::new(parameters);\\\"}\"}"
                      span:
                        line_start: 23
                        line_stop: 23
                        col_start: 11
                        col_stop: 19
                        path: compiler-test
                        content: "    const pedersen = PedersenHash::new(parameters);"
                  type_:
                    Circuit: "{\"name\":\"PedersenHash\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit PedersenHash {\\\"}\"}"
                  value:
                    Call:
                      function:
                        CircuitStaticFunctionAccess:
                          circuit:
                            Identifier: "{\"name\":\"PedersenHash\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":22,\\\"col_stop\\\":34,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const pedersen = PedersenHash::new(parameters);\\\"}\"}"
                          name: "{\"name\":\"new\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":36,\\\"col_stop\\\":39,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const pedersen = PedersenHash::new(parameters);\\\"}\"}"
                          span:
                            line_start: 23
                            line_stop: 23
                            col_start: 22
                            col_stop: 39
                            path: compiler-test
                            content: "    const pedersen = PedersenHash::new(parameters);"
                      arguments:
                        - Identifier: "{\"name\":\"parameters\",\"span\":\"{\\\"line_start\\\":23,\\\"line_stop\\\":23,\\\"col_start\\\":40,\\\"col_stop\\\":50,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const pedersen = PedersenHash::new(parameters);\\\"}\"}"
                      span:
                        line_start: 23
                        line_stop: 23
                        col_start: 22
                        col_stop: 51
                        path: compiler-test
                        content: "    const pedersen = PedersenHash::new(parameters);"
                  span:
                    line_start: 23
                    line_stop: 23
                    col_start: 5
                    col_stop: 51
                    path: compiler-test
                    content: "    const pedersen = PedersenHash::new(parameters);"
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"res\",\"span\":\"{\\\"line_start\\\":24,\\\"line_stop\\\":24,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let res = pedersen.hash(hash_input);\\\"}\"}"
                      span:
                        line_start: 24
                        line_stop: 24
                        col_start: 9
                        col_stop: 12
                        path: compiler-test
                        content: "    let res = pedersen.hash(hash_input);"
                  type_:
                    IntegerType: U32
                  value:
                    Call:
                      function:
                        CircuitMemberAccess:
                          circuit:
                            Identifier: "{\"name\":\"pedersen\",\"span\":\"{\\\"line_start\\\":24,\\\"line_stop\\\":24,\\\"col_start\\\":15,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let res = pedersen.hash(hash_input);\\\"}\"}"
                          name: "{\"name\":\"hash\",\"span\":\"{\\\"line_start\\\":24,\\\"line_stop\\\":24,\\\"col_start\\\":24,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let res = pedersen.hash(hash_input);\\\"}\"}"
                          span:
                            line_start: 24
                            line_stop: 24
                            col_start: 15
                            col_stop: 28
                            path: compiler-test
                            content: "    let res = pedersen.hash(hash_input);"
                      arguments:
                        - Identifier: "{\"name\":\"hash_input\",\"span\":\"{\\\"line_start\\\":24,\\\"line_stop\\\":24,\\\"col_start\\\":29,\\\"col_stop\\\":39,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let res = pedersen.hash(hash_input);\\\"}\"}"
                      span:
                        line_start: 24
                        line_stop: 24
                        col_start: 15
                        col_stop: 40
                        path: compiler-test
                        content: "    let res = pedersen.hash(hash_input);"
                  span:
                    line_start: 24
                    line_stop: 24
                    col_start: 5
                    col_stop: 40
                    path: compiler-test
                    content: "    let res = pedersen.hash(hash_input);"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"res\",\"span\":\"{\\\"line_start\\\":26,\\\"line_stop\\\":26,\\\"col_start\\\":12,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return res == 0u32;\\\"}\"}"
                      right:
                        Value:
                          Integer:
                            - U32
                            - "0"
                            - line_start: 26
                              line_stop: 26
                              col_start: 19
                              col_stop: 23
                              path: compiler-test
                              content: "    return res == 0u32;"
                      op: Eq
                      span:
                        line_start: 26
                        line_stop: 26
                        col_start: 12
                        col_stop: 23
                        path: compiler-test
                        content: "    return res == 0u32;"
                  span:
                    line_start: 26
                    line_stop: 26
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    return res == 0u32;"
            span:
              line_start: 21
              line_stop: 27
              col_start: 48
              col_stop: 2
              path: compiler-test
              content: "function main(hash_input: [bool; 512]) -> bool {\n...\n}"
          span:
            line_start: 21
            line_stop: 27
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(hash_input: [bool; 512]) -> bool {\n...\n}\n\n\n\n"
