---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 1
      num_constraints: 1
      at: 042610d0fd1fe6d6ac112138f8755752f44c7d2a00f1b5960574d6da5cda393f
      bt: e97756698880ab7555a959a5fb5c6b4e15bd64612aa677adbfe2d0bd91f0a83c
      ct: cf1cbb66a638b4860a516671fb74850e6ccf787fe6c4c8d29e9c04efe880bd05
    output:
      - input_file: input/dummy.in
        output:
          registers:
            r0:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a: u8;\\\"}\"}"
                - IntegerType: U8
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"use_a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":14,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function use_a(const self) -> u8 {\\\"}\"}"
                input:
                  - ConstSelfKeyword: "{\"name\":\"const self\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":20,\\\"col_stop\\\":30,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function use_a(const self) -> u8 {\\\"}\"}"
                output:
                  IntegerType: U8
                block:
                  statements:
                    - Return:
                        expression:
                          Binary:
                            left:
                              CircuitMemberAccess:
                                circuit:
                                  Identifier: "{\"name\":\"self\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":16,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return self.a + 1;\\\"}\"}"
                                name: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":21,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return self.a + 1;\\\"}\"}"
                                span:
                                  line_start: 7
                                  line_stop: 7
                                  col_start: 16
                                  col_stop: 22
                                  path: compiler-test
                                  content: "        return self.a + 1;"
                            right:
                              Value:
                                Implicit:
                                  - "1"
                                  - line_start: 7
                                    line_stop: 7
                                    col_start: 25
                                    col_stop: 26
                                    path: compiler-test
                                    content: "        return self.a + 1;"
                            op: Add
                            span:
                              line_start: 7
                              line_stop: 7
                              col_start: 16
                              col_stop: 26
                              path: compiler-test
                              content: "        return self.a + 1;"
                        span:
                          line_start: 7
                          line_stop: 7
                          col_start: 9
                          col_stop: 26
                          path: compiler-test
                          content: "        return self.a + 1;"
                  span:
                    line_start: 6
                    line_stop: 8
                    col_start: 38
                    col_stop: 6
                    path: compiler-test
                    content: "    function use_a(const self) -> u8 {\n...\n    }"
                span:
                  line_start: 6
                  line_stop: 8
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function use_a(const self) -> u8 {\n...\n    }"
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 11
                  line_stop: 11
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(y: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"f\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let f  = Foo { a: 0u8 };\\\"}\"}"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let f  = Foo { a: 0u8 };"
                  type_: ~
                  value:
                    CircuitInit:
                      name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":14,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let f  = Foo { a: 0u8 };\\\"}\"}"
                      members:
                        - identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":20,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let f  = Foo { a: 0u8 };\\\"}\"}"
                          expression:
                            Value:
                              Integer:
                                - U8
                                - "0"
                                - line_start: 12
                                  line_stop: 12
                                  col_start: 23
                                  col_stop: 26
                                  path: compiler-test
                                  content: "    let f  = Foo { a: 0u8 };"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 14
                        col_stop: 28
                        path: compiler-test
                        content: "    let f  = Foo { a: 0u8 };"
                  span:
                    line_start: 12
                    line_stop: 12
                    col_start: 5
                    col_stop: 28
                    path: compiler-test
                    content: "    let f  = Foo { a: 0u8 };"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Value:
                              Integer:
                                - U8
                                - "1"
                                - line_start: 14
                                  line_stop: 14
                                  col_start: 12
                                  col_stop: 15
                                  path: compiler-test
                                  content: "    return 1u8 == f.use_a() == true;"
                          right:
                            Call:
                              function:
                                CircuitMemberAccess:
                                  circuit:
                                    Identifier: "{\"name\":\"f\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":19,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return 1u8 == f.use_a() == true;\\\"}\"}"
                                  name: "{\"name\":\"use_a\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":21,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return 1u8 == f.use_a() == true;\\\"}\"}"
                                  span:
                                    line_start: 14
                                    line_stop: 14
                                    col_start: 19
                                    col_stop: 26
                                    path: compiler-test
                                    content: "    return 1u8 == f.use_a() == true;"
                              arguments: []
                              span:
                                line_start: 14
                                line_stop: 14
                                col_start: 19
                                col_stop: 28
                                path: compiler-test
                                content: "    return 1u8 == f.use_a() == true;"
                          op: Eq
                          span:
                            line_start: 14
                            line_stop: 14
                            col_start: 12
                            col_stop: 28
                            path: compiler-test
                            content: "    return 1u8 == f.use_a() == true;"
                      right:
                        Value:
                          Boolean:
                            - "true"
                            - line_start: 14
                              line_stop: 14
                              col_start: 32
                              col_stop: 36
                              path: compiler-test
                              content: "    return 1u8 == f.use_a() == true;"
                      op: Eq
                      span:
                        line_start: 14
                        line_stop: 14
                        col_start: 12
                        col_stop: 36
                        path: compiler-test
                        content: "    return 1u8 == f.use_a() == true;"
                  span:
                    line_start: 14
                    line_stop: 14
                    col_start: 5
                    col_stop: 36
                    path: compiler-test
                    content: "    return 1u8 == f.use_a() == true;"
            span:
              line_start: 11
              line_stop: 15
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(y: bool) -> bool {\n...\n}"
          span:
            line_start: 11
            line_stop: 15
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(y: bool) -> bool {\n...\n}\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a: u8;\\\"}\"}"
                - IntegerType: U8
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"use_a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":14,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function use_a(const self) -> u8 {\\\"}\"}"
                input:
                  - ConstSelfKeyword: "{\"name\":\"const self\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":20,\\\"col_stop\\\":30,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function use_a(const self) -> u8 {\\\"}\"}"
                output:
                  IntegerType: U8
                block:
                  statements:
                    - Return:
                        expression:
                          Binary:
                            left:
                              CircuitMemberAccess:
                                circuit:
                                  Identifier: "{\"name\":\"self\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":16,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return self.a + 1;\\\"}\"}"
                                name: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":21,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return self.a + 1;\\\"}\"}"
                                span:
                                  line_start: 7
                                  line_stop: 7
                                  col_start: 16
                                  col_stop: 22
                                  path: compiler-test
                                  content: "        return self.a + 1;"
                            right:
                              Value:
                                Implicit:
                                  - "1"
                                  - line_start: 7
                                    line_stop: 7
                                    col_start: 25
                                    col_stop: 26
                                    path: compiler-test
                                    content: "        return self.a + 1;"
                            op: Add
                            span:
                              line_start: 7
                              line_stop: 7
                              col_start: 16
                              col_stop: 26
                              path: compiler-test
                              content: "        return self.a + 1;"
                        span:
                          line_start: 7
                          line_stop: 7
                          col_start: 9
                          col_stop: 26
                          path: compiler-test
                          content: "        return self.a + 1;"
                  span:
                    line_start: 6
                    line_stop: 8
                    col_start: 38
                    col_stop: 6
                    path: compiler-test
                    content: "    function use_a(const self) -> u8 {\n...\n    }"
                span:
                  line_start: 6
                  line_stop: 8
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function use_a(const self) -> u8 {\n...\n    }"
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 11
                  line_stop: 11
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(y: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"f\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let f  = Foo { a: 0u8 };\\\"}\"}"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let f  = Foo { a: 0u8 };"
                  type_: ~
                  value:
                    CircuitInit:
                      name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":14,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let f  = Foo { a: 0u8 };\\\"}\"}"
                      members:
                        - identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":20,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let f  = Foo { a: 0u8 };\\\"}\"}"
                          expression:
                            Value:
                              Integer:
                                - U8
                                - "0"
                                - line_start: 12
                                  line_stop: 12
                                  col_start: 23
                                  col_stop: 26
                                  path: compiler-test
                                  content: "    let f  = Foo { a: 0u8 };"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 14
                        col_stop: 28
                        path: compiler-test
                        content: "    let f  = Foo { a: 0u8 };"
                  span:
                    line_start: 12
                    line_stop: 12
                    col_start: 5
                    col_stop: 28
                    path: compiler-test
                    content: "    let f  = Foo { a: 0u8 };"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Value:
                              Integer:
                                - U8
                                - "1"
                                - line_start: 14
                                  line_stop: 14
                                  col_start: 12
                                  col_stop: 15
                                  path: compiler-test
                                  content: "    return 1u8 == f.use_a() == true;"
                          right:
                            Call:
                              function:
                                CircuitMemberAccess:
                                  circuit:
                                    Identifier: "{\"name\":\"f\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":19,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return 1u8 == f.use_a() == true;\\\"}\"}"
                                  name: "{\"name\":\"use_a\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":21,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return 1u8 == f.use_a() == true;\\\"}\"}"
                                  span:
                                    line_start: 14
                                    line_stop: 14
                                    col_start: 19
                                    col_stop: 26
                                    path: compiler-test
                                    content: "    return 1u8 == f.use_a() == true;"
                              arguments: []
                              span:
                                line_start: 14
                                line_stop: 14
                                col_start: 19
                                col_stop: 28
                                path: compiler-test
                                content: "    return 1u8 == f.use_a() == true;"
                          op: Eq
                          span:
                            line_start: 14
                            line_stop: 14
                            col_start: 12
                            col_stop: 28
                            path: compiler-test
                            content: "    return 1u8 == f.use_a() == true;"
                      right:
                        Value:
                          Boolean:
                            - "true"
                            - line_start: 14
                              line_stop: 14
                              col_start: 32
                              col_stop: 36
                              path: compiler-test
                              content: "    return 1u8 == f.use_a() == true;"
                      op: Eq
                      span:
                        line_start: 14
                        line_stop: 14
                        col_start: 12
                        col_stop: 36
                        path: compiler-test
                        content: "    return 1u8 == f.use_a() == true;"
                  span:
                    line_start: 14
                    line_stop: 14
                    col_start: 5
                    col_stop: 36
                    path: compiler-test
                    content: "    return 1u8 == f.use_a() == true;"
            span:
              line_start: 11
              line_stop: 15
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(y: bool) -> bool {\n...\n}"
          span:
            line_start: 11
            line_stop: 15
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(y: bool) -> bool {\n...\n}\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
          members:
            - CircuitVariable:
                - "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    a: u8;\\\"}\"}"
                - IntegerType: U8
            - CircuitFunction:
                annotations: []
                identifier: "{\"name\":\"use_a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":14,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function use_a(const self) -> u8 {\\\"}\"}"
                input:
                  - ConstSelfKeyword: "{\"name\":\"const self\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":20,\\\"col_stop\\\":30,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    function use_a(const self) -> u8 {\\\"}\"}"
                output:
                  IntegerType: U8
                block:
                  statements:
                    - Return:
                        expression:
                          Binary:
                            left:
                              CircuitMemberAccess:
                                circuit:
                                  Identifier: "{\"name\":\"self\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":16,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return self.a + 1;\\\"}\"}"
                                name: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":21,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        return self.a + 1;\\\"}\"}"
                                span:
                                  line_start: 7
                                  line_stop: 7
                                  col_start: 16
                                  col_stop: 22
                                  path: compiler-test
                                  content: "        return self.a + 1;"
                            right:
                              Value:
                                Integer:
                                  - U8
                                  - "1"
                                  - line_start: 7
                                    line_stop: 7
                                    col_start: 25
                                    col_stop: 26
                                    path: compiler-test
                                    content: "        return self.a + 1;"
                            op: Add
                            span:
                              line_start: 7
                              line_stop: 7
                              col_start: 16
                              col_stop: 26
                              path: compiler-test
                              content: "        return self.a + 1;"
                        span:
                          line_start: 7
                          line_stop: 7
                          col_start: 9
                          col_stop: 26
                          path: compiler-test
                          content: "        return self.a + 1;"
                  span:
                    line_start: 6
                    line_stop: 8
                    col_start: 38
                    col_stop: 6
                    path: compiler-test
                    content: "    function use_a(const self) -> u8 {\n...\n    }"
                span:
                  line_start: 6
                  line_stop: 8
                  col_start: 5
                  col_stop: 6
                  path: compiler-test
                  content: "    function use_a(const self) -> u8 {\n...\n    }"
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 11
                  line_stop: 11
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(y: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"f\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let f  = Foo { a: 0u8 };\\\"}\"}"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let f  = Foo { a: 0u8 };"
                  type_:
                    Circuit: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {\\\"}\"}"
                  value:
                    CircuitInit:
                      name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":14,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let f  = Foo { a: 0u8 };\\\"}\"}"
                      members:
                        - identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":20,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let f  = Foo { a: 0u8 };\\\"}\"}"
                          expression:
                            Value:
                              Integer:
                                - U8
                                - "0"
                                - line_start: 12
                                  line_stop: 12
                                  col_start: 23
                                  col_stop: 26
                                  path: compiler-test
                                  content: "    let f  = Foo { a: 0u8 };"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 14
                        col_stop: 28
                        path: compiler-test
                        content: "    let f  = Foo { a: 0u8 };"
                  span:
                    line_start: 12
                    line_stop: 12
                    col_start: 5
                    col_stop: 28
                    path: compiler-test
                    content: "    let f  = Foo { a: 0u8 };"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Value:
                              Integer:
                                - U8
                                - "1"
                                - line_start: 14
                                  line_stop: 14
                                  col_start: 12
                                  col_stop: 15
                                  path: compiler-test
                                  content: "    return 1u8 == f.use_a() == true;"
                          right:
                            Call:
                              function:
                                CircuitMemberAccess:
                                  circuit:
                                    Identifier: "{\"name\":\"f\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":19,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return 1u8 == f.use_a() == true;\\\"}\"}"
                                  name: "{\"name\":\"use_a\",\"span\":\"{\\\"line_start\\\":14,\\\"line_stop\\\":14,\\\"col_start\\\":21,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return 1u8 == f.use_a() == true;\\\"}\"}"
                                  span:
                                    line_start: 14
                                    line_stop: 14
                                    col_start: 19
                                    col_stop: 26
                                    path: compiler-test
                                    content: "    return 1u8 == f.use_a() == true;"
                              arguments: []
                              span:
                                line_start: 14
                                line_stop: 14
                                col_start: 19
                                col_stop: 28
                                path: compiler-test
                                content: "    return 1u8 == f.use_a() == true;"
                          op: Eq
                          span:
                            line_start: 14
                            line_stop: 14
                            col_start: 12
                            col_stop: 28
                            path: compiler-test
                            content: "    return 1u8 == f.use_a() == true;"
                      right:
                        Value:
                          Boolean:
                            - "true"
                            - line_start: 14
                              line_stop: 14
                              col_start: 32
                              col_stop: 36
                              path: compiler-test
                              content: "    return 1u8 == f.use_a() == true;"
                      op: Eq
                      span:
                        line_start: 14
                        line_stop: 14
                        col_start: 12
                        col_stop: 36
                        path: compiler-test
                        content: "    return 1u8 == f.use_a() == true;"
                  span:
                    line_start: 14
                    line_stop: 14
                    col_start: 5
                    col_stop: 36
                    path: compiler-test
                    content: "    return 1u8 == f.use_a() == true;"
            span:
              line_start: 11
              line_stop: 15
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(y: bool) -> bool {\n...\n}"
          span:
            line_start: 11
            line_stop: 15
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(y: bool) -> bool {\n...\n}\n\n"
