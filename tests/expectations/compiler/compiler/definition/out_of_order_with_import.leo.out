---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 1
      num_constraints: 1
      at: 042610d0fd1fe6d6ac112138f8755752f44c7d2a00f1b5960574d6da5cda393f
      bt: e97756698880ab7555a959a5fb5c6b4e15bd64612aa677adbfe2d0bd91f0a83c
      ct: cf1cbb66a638b4860a516671fb74850e6ccf787fe6c4c8d29e9c04efe880bd05
    output:
      - input_file: input/dummy.in
        output:
          registers:
            r0:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports:
        - package_or_packages:
            Package:
              name: "{\"name\":\"core\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":8,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"import core.unstable.blake2s.Blake2s;\\\"}\"}"
              access:
                SubPackage:
                  name: "{\"name\":\"unstable\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":13,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"import core.unstable.blake2s.Blake2s;\\\"}\"}"
                  access:
                    SubPackage:
                      name: "{\"name\":\"blake2s\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":22,\\\"col_stop\\\":29,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"import core.unstable.blake2s.Blake2s;\\\"}\"}"
                      access:
                        Symbol:
                          symbol: "{\"name\":\"Blake2s\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":30,\\\"col_stop\\\":37,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"import core.unstable.blake2s.Blake2s;\\\"}\"}"
                          alias: ~
                          span:
                            line_start: 11
                            line_stop: 11
                            col_start: 30
                            col_stop: 37
                            path: compiler-test
                            content: import core.unstable.blake2s.Blake2s;
                      span:
                        line_start: 11
                        line_stop: 11
                        col_start: 22
                        col_stop: 37
                        path: compiler-test
                        content: import core.unstable.blake2s.Blake2s;
                  span:
                    line_start: 11
                    line_stop: 11
                    col_start: 13
                    col_stop: 37
                    path: compiler-test
                    content: import core.unstable.blake2s.Blake2s;
              span:
                line_start: 11
                line_stop: 11
                col_start: 8
                col_stop: 37
                path: compiler-test
                content: import core.unstable.blake2s.Blake2s;
          span:
            line_start: 11
            line_stop: 11
            col_start: 8
            col_stop: 37
            path: compiler-test
            content: import core.unstable.blake2s.Blake2s;
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {}\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {}\\\"}\"}"
          members: []
      global_consts: {}
      functions:
        "{\"name\":\"fake_test\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function fake_test() {}\\\"}\"}":
          annotations:
            - span:
                line_start: 3
                line_stop: 3
                col_start: 1
                col_stop: 6
                path: compiler-test
                content: "@test "
              name: "{\"name\":\"test\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":2,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"@test \\\"}\"}"
              arguments: []
          identifier: "{\"name\":\"fake_test\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function fake_test() {}\\\"}\"}"
          input: []
          output: ~
          block:
            statements: []
            span:
              line_start: 4
              line_stop: 4
              col_start: 22
              col_stop: 24
              path: compiler-test
              content: "function fake_test() {}"
          span:
            line_start: 4
            line_stop: 4
            col_start: 1
            col_stop: 24
            path: compiler-test
            content: "function fake_test() {}"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 6
                  line_stop: 6
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(y: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return y == true;\\\"}\"}"
                      right:
                        Value:
                          Boolean:
                            - "true"
                            - line_start: 7
                              line_stop: 7
                              col_start: 17
                              col_stop: 21
                              path: compiler-test
                              content: "    return y == true;"
                      op: Eq
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 12
                        col_stop: 21
                        path: compiler-test
                        content: "    return y == true;"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 21
                    path: compiler-test
                    content: "    return y == true;"
            span:
              line_start: 6
              line_stop: 8
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(y: bool) -> bool {\n...\n}"
          span:
            line_start: 6
            line_stop: 8
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(y: bool) -> bool {\n...\n}"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports:
        - package_or_packages:
            Package:
              name: "{\"name\":\"core\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":8,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"import core.unstable.blake2s.Blake2s;\\\"}\"}"
              access:
                SubPackage:
                  name: "{\"name\":\"unstable\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":13,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"import core.unstable.blake2s.Blake2s;\\\"}\"}"
                  access:
                    SubPackage:
                      name: "{\"name\":\"blake2s\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":22,\\\"col_stop\\\":29,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"import core.unstable.blake2s.Blake2s;\\\"}\"}"
                      access:
                        Symbol:
                          symbol: "{\"name\":\"Blake2s\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":30,\\\"col_stop\\\":37,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"import core.unstable.blake2s.Blake2s;\\\"}\"}"
                          alias: ~
                          span:
                            line_start: 11
                            line_stop: 11
                            col_start: 30
                            col_stop: 37
                            path: compiler-test
                            content: import core.unstable.blake2s.Blake2s;
                      span:
                        line_start: 11
                        line_stop: 11
                        col_start: 22
                        col_stop: 37
                        path: compiler-test
                        content: import core.unstable.blake2s.Blake2s;
                  span:
                    line_start: 11
                    line_stop: 11
                    col_start: 13
                    col_stop: 37
                    path: compiler-test
                    content: import core.unstable.blake2s.Blake2s;
              span:
                line_start: 11
                line_stop: 11
                col_start: 8
                col_stop: 37
                path: compiler-test
                content: import core.unstable.blake2s.Blake2s;
          span:
            line_start: 11
            line_stop: 11
            col_start: 8
            col_stop: 37
            path: compiler-test
            content: import core.unstable.blake2s.Blake2s;
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {}\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {}\\\"}\"}"
          members: []
      global_consts: {}
      functions:
        "{\"name\":\"fake_test\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function fake_test() {}\\\"}\"}":
          annotations:
            - span:
                line_start: 3
                line_stop: 3
                col_start: 1
                col_stop: 6
                path: compiler-test
                content: "@test "
              name: "{\"name\":\"test\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":2,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"@test \\\"}\"}"
              arguments: []
          identifier: "{\"name\":\"fake_test\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function fake_test() {}\\\"}\"}"
          input: []
          output:
            Tuple: []
          block:
            statements: []
            span:
              line_start: 4
              line_stop: 4
              col_start: 22
              col_stop: 24
              path: compiler-test
              content: "function fake_test() {}"
          span:
            line_start: 4
            line_stop: 4
            col_start: 1
            col_stop: 24
            path: compiler-test
            content: "function fake_test() {}"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 6
                  line_stop: 6
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(y: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return y == true;\\\"}\"}"
                      right:
                        Value:
                          Boolean:
                            - "true"
                            - line_start: 7
                              line_stop: 7
                              col_start: 17
                              col_stop: 21
                              path: compiler-test
                              content: "    return y == true;"
                      op: Eq
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 12
                        col_stop: 21
                        path: compiler-test
                        content: "    return y == true;"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 21
                    path: compiler-test
                    content: "    return y == true;"
            span:
              line_start: 6
              line_stop: 8
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(y: bool) -> bool {\n...\n}"
          span:
            line_start: 6
            line_stop: 8
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(y: bool) -> bool {\n...\n}"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports:
        - package_or_packages:
            Package:
              name: "{\"name\":\"core\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":8,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"import core.unstable.blake2s.Blake2s;\\\"}\"}"
              access:
                SubPackage:
                  name: "{\"name\":\"unstable\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":13,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"import core.unstable.blake2s.Blake2s;\\\"}\"}"
                  access:
                    SubPackage:
                      name: "{\"name\":\"blake2s\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":22,\\\"col_stop\\\":29,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"import core.unstable.blake2s.Blake2s;\\\"}\"}"
                      access:
                        Symbol:
                          symbol: "{\"name\":\"Blake2s\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":30,\\\"col_stop\\\":37,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"import core.unstable.blake2s.Blake2s;\\\"}\"}"
                          alias: ~
                          span:
                            line_start: 11
                            line_stop: 11
                            col_start: 30
                            col_stop: 37
                            path: compiler-test
                            content: import core.unstable.blake2s.Blake2s;
                      span:
                        line_start: 11
                        line_stop: 11
                        col_start: 22
                        col_stop: 37
                        path: compiler-test
                        content: import core.unstable.blake2s.Blake2s;
                  span:
                    line_start: 11
                    line_stop: 11
                    col_start: 13
                    col_stop: 37
                    path: compiler-test
                    content: import core.unstable.blake2s.Blake2s;
              span:
                line_start: 11
                line_stop: 11
                col_start: 8
                col_stop: 37
                path: compiler-test
                content: import core.unstable.blake2s.Blake2s;
          span:
            line_start: 11
            line_stop: 11
            col_start: 8
            col_stop: 37
            path: compiler-test
            content: import core.unstable.blake2s.Blake2s;
      circuits:
        "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {}\\\"}\"}":
          circuit_name: "{\"name\":\"Foo\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":9,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"circuit Foo {}\\\"}\"}"
          members: []
      global_consts: {}
      functions:
        "{\"name\":\"fake_test\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function fake_test() {}\\\"}\"}":
          annotations:
            - span:
                line_start: 3
                line_stop: 3
                col_start: 1
                col_stop: 6
                path: compiler-test
                content: "@test "
              name: "{\"name\":\"test\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":2,\\\"col_stop\\\":6,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"@test \\\"}\"}"
              arguments: []
          identifier: "{\"name\":\"fake_test\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function fake_test() {}\\\"}\"}"
          input: []
          output:
            Tuple: []
          block:
            statements: []
            span:
              line_start: 4
              line_stop: 4
              col_start: 22
              col_stop: 24
              path: compiler-test
              content: "function fake_test() {}"
          span:
            line_start: 4
            line_stop: 4
            col_start: 1
            col_stop: 24
            path: compiler-test
            content: "function fake_test() {}"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 6
                  line_stop: 6
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(y: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return y == true;\\\"}\"}"
                      right:
                        Value:
                          Boolean:
                            - "true"
                            - line_start: 7
                              line_stop: 7
                              col_start: 17
                              col_stop: 21
                              path: compiler-test
                              content: "    return y == true;"
                      op: Eq
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 12
                        col_stop: 21
                        path: compiler-test
                        content: "    return y == true;"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 21
                    path: compiler-test
                    content: "    return y == true;"
            span:
              line_start: 6
              line_stop: 8
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(y: bool) -> bool {\n...\n}"
          span:
            line_start: 6
            line_stop: 8
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(y: bool) -> bool {\n...\n}"
