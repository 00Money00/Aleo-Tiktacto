---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 847
      num_constraints: 847
      at: 7a173ccf91016726958e205fb7a60e954c826a7d8f3dbfba86417c4dad8a8809
      bt: ef390629424c3ec765f6759eba6be4285e92bbb34e1fdb083ea723021fda1a83
      ct: 048882f78f795732711ba34cb6892495a782c2573a1358a9c679b97fa5ea5fe7
    output:
      - input_file: input/token_withdraw.in
        output:
          registers:
            r0:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(data: [u8; 32]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(data: [u8; 32]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"data\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(data: [u8; 32]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - IntegerType: U8
                    - - value: "32"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 19
                  path: compiler-test
                  content: "function main(data: [u8; 32]) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Binary:
                              left:
                                Binary:
                                  left:
                                    Binary:
                                      left:
                                        CircuitMemberAccess:
                                          circuit:
                                            CircuitMemberAccess:
                                              circuit:
                                                Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.value_balance == 0u64\\\"}\"}"
                                              name: "{\"name\":\"registers\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":18,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.value_balance == 0u64\\\"}\"}"
                                              span:
                                                line_start: 4
                                                line_stop: 4
                                                col_start: 12
                                                col_stop: 27
                                                path: compiler-test
                                                content: "    return input.registers.value_balance == 0u64"
                                          name: "{\"name\":\"value_balance\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":28,\\\"col_stop\\\":41,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.value_balance == 0u64\\\"}\"}"
                                          span:
                                            line_start: 4
                                            line_stop: 4
                                            col_start: 12
                                            col_stop: 41
                                            path: compiler-test
                                            content: "    return input.registers.value_balance == 0u64"
                                      right:
                                        Value:
                                          Integer:
                                            - U64
                                            - "0"
                                            - line_start: 4
                                              line_stop: 4
                                              col_start: 45
                                              col_stop: 49
                                              path: compiler-test
                                              content: "    return input.registers.value_balance == 0u64"
                                      op: Eq
                                      span:
                                        line_start: 4
                                        line_stop: 4
                                        col_start: 12
                                        col_stop: 49
                                        path: compiler-test
                                        content: "    return input.registers.value_balance == 0u64"
                                  right:
                                    Binary:
                                      left:
                                        CircuitMemberAccess:
                                          circuit:
                                            CircuitMemberAccess:
                                              circuit:
                                                Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state.leaf_index == 0u32\\\"}\"}"
                                              name: "{\"name\":\"state\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":18,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state.leaf_index == 0u32\\\"}\"}"
                                              span:
                                                line_start: 5
                                                line_stop: 5
                                                col_start: 12
                                                col_stop: 23
                                                path: compiler-test
                                                content: "        && input.state.leaf_index == 0u32"
                                          name: "{\"name\":\"leaf_index\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":24,\\\"col_stop\\\":34,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state.leaf_index == 0u32\\\"}\"}"
                                          span:
                                            line_start: 5
                                            line_stop: 5
                                            col_start: 12
                                            col_stop: 34
                                            path: compiler-test
                                            content: "        && input.state.leaf_index == 0u32"
                                      right:
                                        Value:
                                          Integer:
                                            - U32
                                            - "0"
                                            - line_start: 5
                                              line_stop: 5
                                              col_start: 38
                                              col_stop: 42
                                              path: compiler-test
                                              content: "        && input.state.leaf_index == 0u32"
                                      op: Eq
                                      span:
                                        line_start: 5
                                        line_stop: 5
                                        col_start: 12
                                        col_stop: 42
                                        path: compiler-test
                                        content: "        && input.state.leaf_index == 0u32"
                                  op: And
                                  span:
                                    line_start: 4
                                    line_stop: 5
                                    col_start: 12
                                    col_stop: 42
                                    path: compiler-test
                                    content: "    return input.registers.value_balance == 0u64\n        && input.state.leaf_index == 0u32"
                              right:
                                Binary:
                                  left:
                                    CircuitMemberAccess:
                                      circuit:
                                        CircuitMemberAccess:
                                          circuit:
                                            Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.record.value == 5u64\\\"}\"}"
                                          name: "{\"name\":\"record\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":18,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.record.value == 5u64\\\"}\"}"
                                          span:
                                            line_start: 6
                                            line_stop: 6
                                            col_start: 12
                                            col_stop: 24
                                            path: compiler-test
                                            content: "        && input.record.value == 5u64"
                                      name: "{\"name\":\"value\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":25,\\\"col_stop\\\":30,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.record.value == 5u64\\\"}\"}"
                                      span:
                                        line_start: 6
                                        line_stop: 6
                                        col_start: 12
                                        col_stop: 30
                                        path: compiler-test
                                        content: "        && input.record.value == 5u64"
                                  right:
                                    Value:
                                      Integer:
                                        - U64
                                        - "5"
                                        - line_start: 6
                                          line_stop: 6
                                          col_start: 34
                                          col_stop: 38
                                          path: compiler-test
                                          content: "        && input.record.value == 5u64"
                                  op: Eq
                                  span:
                                    line_start: 6
                                    line_stop: 6
                                    col_start: 12
                                    col_stop: 38
                                    path: compiler-test
                                    content: "        && input.record.value == 5u64"
                              op: And
                              span:
                                line_start: 4
                                line_stop: 6
                                col_start: 12
                                col_stop: 38
                                path: compiler-test
                                content: "    return input.registers.value_balance == 0u64\n        && input.state.leaf_index == 0u32\n        && input.record.value == 5u64"
                          right:
                            Binary:
                              left:
                                CircuitMemberAccess:
                                  circuit:
                                    CircuitMemberAccess:
                                      circuit:
                                        Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state_leaf.network_id == 0u8\\\"}\"}"
                                      name: "{\"name\":\"state_leaf\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":18,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state_leaf.network_id == 0u8\\\"}\"}"
                                      span:
                                        line_start: 7
                                        line_stop: 7
                                        col_start: 12
                                        col_stop: 28
                                        path: compiler-test
                                        content: "        && input.state_leaf.network_id == 0u8"
                                  name: "{\"name\":\"network_id\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":29,\\\"col_stop\\\":39,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state_leaf.network_id == 0u8\\\"}\"}"
                                  span:
                                    line_start: 7
                                    line_stop: 7
                                    col_start: 12
                                    col_stop: 39
                                    path: compiler-test
                                    content: "        && input.state_leaf.network_id == 0u8"
                              right:
                                Value:
                                  Integer:
                                    - U8
                                    - "0"
                                    - line_start: 7
                                      line_stop: 7
                                      col_start: 43
                                      col_stop: 46
                                      path: compiler-test
                                      content: "        && input.state_leaf.network_id == 0u8"
                              op: Eq
                              span:
                                line_start: 7
                                line_stop: 7
                                col_start: 12
                                col_stop: 46
                                path: compiler-test
                                content: "        && input.state_leaf.network_id == 0u8"
                          op: And
                          span:
                            line_start: 4
                            line_stop: 7
                            col_start: 12
                            col_stop: 46
                            path: compiler-test
                            content: "    return input.registers.value_balance == 0u64\n        && input.state.leaf_index == 0u32\n        && input.record.value == 5u64\n        && input.state_leaf.network_id == 0u8"
                      right:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"data\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":12,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && data == [0u8; 32];\\\"}\"}"
                          right:
                            ArrayInit:
                              element:
                                Value:
                                  Integer:
                                    - U8
                                    - "0"
                                    - line_start: 8
                                      line_stop: 8
                                      col_start: 21
                                      col_stop: 24
                                      path: compiler-test
                                      content: "        && data == [0u8; 32];"
                              dimensions:
                                - value: "32"
                              span:
                                line_start: 8
                                line_stop: 8
                                col_start: 20
                                col_stop: 29
                                path: compiler-test
                                content: "        && data == [0u8; 32];"
                          op: Eq
                          span:
                            line_start: 8
                            line_stop: 8
                            col_start: 12
                            col_stop: 29
                            path: compiler-test
                            content: "        && data == [0u8; 32];"
                      op: And
                      span:
                        line_start: 4
                        line_stop: 8
                        col_start: 12
                        col_stop: 29
                        path: compiler-test
                        content: "    return input.registers.value_balance == 0u64\n        && input.state.leaf_index == 0u32\n        && input.record.value == 5u64\n        && input.state_leaf.network_id == 0u8\n        && data == [0u8; 32];"
                  span:
                    line_start: 4
                    line_stop: 8
                    col_start: 5
                    col_stop: 29
                    path: compiler-test
                    content: "    return input.registers.value_balance == 0u64\n        && input.state.leaf_index == 0u32\n        && input.record.value == 5u64\n        && input.state_leaf.network_id == 0u8\n        && data == [0u8; 32];"
            span:
              line_start: 3
              line_stop: 9
              col_start: 39
              col_stop: 2
              path: compiler-test
              content: "function main(data: [u8; 32]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(data: [u8; 32]) -> bool {\n...\n}\n\n\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(data: [u8; 32]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(data: [u8; 32]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"data\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(data: [u8; 32]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - IntegerType: U8
                    - - value: "32"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 19
                  path: compiler-test
                  content: "function main(data: [u8; 32]) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Binary:
                              left:
                                Binary:
                                  left:
                                    Binary:
                                      left:
                                        CircuitMemberAccess:
                                          circuit:
                                            CircuitMemberAccess:
                                              circuit:
                                                Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.value_balance == 0u64\\\"}\"}"
                                              name: "{\"name\":\"registers\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":18,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.value_balance == 0u64\\\"}\"}"
                                              span:
                                                line_start: 4
                                                line_stop: 4
                                                col_start: 12
                                                col_stop: 27
                                                path: compiler-test
                                                content: "    return input.registers.value_balance == 0u64"
                                          name: "{\"name\":\"value_balance\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":28,\\\"col_stop\\\":41,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.value_balance == 0u64\\\"}\"}"
                                          span:
                                            line_start: 4
                                            line_stop: 4
                                            col_start: 12
                                            col_stop: 41
                                            path: compiler-test
                                            content: "    return input.registers.value_balance == 0u64"
                                      right:
                                        Value:
                                          Integer:
                                            - U64
                                            - "0"
                                            - line_start: 4
                                              line_stop: 4
                                              col_start: 45
                                              col_stop: 49
                                              path: compiler-test
                                              content: "    return input.registers.value_balance == 0u64"
                                      op: Eq
                                      span:
                                        line_start: 4
                                        line_stop: 4
                                        col_start: 12
                                        col_stop: 49
                                        path: compiler-test
                                        content: "    return input.registers.value_balance == 0u64"
                                  right:
                                    Binary:
                                      left:
                                        CircuitMemberAccess:
                                          circuit:
                                            CircuitMemberAccess:
                                              circuit:
                                                Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state.leaf_index == 0u32\\\"}\"}"
                                              name: "{\"name\":\"state\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":18,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state.leaf_index == 0u32\\\"}\"}"
                                              span:
                                                line_start: 5
                                                line_stop: 5
                                                col_start: 12
                                                col_stop: 23
                                                path: compiler-test
                                                content: "        && input.state.leaf_index == 0u32"
                                          name: "{\"name\":\"leaf_index\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":24,\\\"col_stop\\\":34,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state.leaf_index == 0u32\\\"}\"}"
                                          span:
                                            line_start: 5
                                            line_stop: 5
                                            col_start: 12
                                            col_stop: 34
                                            path: compiler-test
                                            content: "        && input.state.leaf_index == 0u32"
                                      right:
                                        Value:
                                          Integer:
                                            - U32
                                            - "0"
                                            - line_start: 5
                                              line_stop: 5
                                              col_start: 38
                                              col_stop: 42
                                              path: compiler-test
                                              content: "        && input.state.leaf_index == 0u32"
                                      op: Eq
                                      span:
                                        line_start: 5
                                        line_stop: 5
                                        col_start: 12
                                        col_stop: 42
                                        path: compiler-test
                                        content: "        && input.state.leaf_index == 0u32"
                                  op: And
                                  span:
                                    line_start: 4
                                    line_stop: 5
                                    col_start: 12
                                    col_stop: 42
                                    path: compiler-test
                                    content: "    return input.registers.value_balance == 0u64\n        && input.state.leaf_index == 0u32"
                              right:
                                Binary:
                                  left:
                                    CircuitMemberAccess:
                                      circuit:
                                        CircuitMemberAccess:
                                          circuit:
                                            Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.record.value == 5u64\\\"}\"}"
                                          name: "{\"name\":\"record\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":18,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.record.value == 5u64\\\"}\"}"
                                          span:
                                            line_start: 6
                                            line_stop: 6
                                            col_start: 12
                                            col_stop: 24
                                            path: compiler-test
                                            content: "        && input.record.value == 5u64"
                                      name: "{\"name\":\"value\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":25,\\\"col_stop\\\":30,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.record.value == 5u64\\\"}\"}"
                                      span:
                                        line_start: 6
                                        line_stop: 6
                                        col_start: 12
                                        col_stop: 30
                                        path: compiler-test
                                        content: "        && input.record.value == 5u64"
                                  right:
                                    Value:
                                      Integer:
                                        - U64
                                        - "5"
                                        - line_start: 6
                                          line_stop: 6
                                          col_start: 34
                                          col_stop: 38
                                          path: compiler-test
                                          content: "        && input.record.value == 5u64"
                                  op: Eq
                                  span:
                                    line_start: 6
                                    line_stop: 6
                                    col_start: 12
                                    col_stop: 38
                                    path: compiler-test
                                    content: "        && input.record.value == 5u64"
                              op: And
                              span:
                                line_start: 4
                                line_stop: 6
                                col_start: 12
                                col_stop: 38
                                path: compiler-test
                                content: "    return input.registers.value_balance == 0u64\n        && input.state.leaf_index == 0u32\n        && input.record.value == 5u64"
                          right:
                            Binary:
                              left:
                                CircuitMemberAccess:
                                  circuit:
                                    CircuitMemberAccess:
                                      circuit:
                                        Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state_leaf.network_id == 0u8\\\"}\"}"
                                      name: "{\"name\":\"state_leaf\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":18,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state_leaf.network_id == 0u8\\\"}\"}"
                                      span:
                                        line_start: 7
                                        line_stop: 7
                                        col_start: 12
                                        col_stop: 28
                                        path: compiler-test
                                        content: "        && input.state_leaf.network_id == 0u8"
                                  name: "{\"name\":\"network_id\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":29,\\\"col_stop\\\":39,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state_leaf.network_id == 0u8\\\"}\"}"
                                  span:
                                    line_start: 7
                                    line_stop: 7
                                    col_start: 12
                                    col_stop: 39
                                    path: compiler-test
                                    content: "        && input.state_leaf.network_id == 0u8"
                              right:
                                Value:
                                  Integer:
                                    - U8
                                    - "0"
                                    - line_start: 7
                                      line_stop: 7
                                      col_start: 43
                                      col_stop: 46
                                      path: compiler-test
                                      content: "        && input.state_leaf.network_id == 0u8"
                              op: Eq
                              span:
                                line_start: 7
                                line_stop: 7
                                col_start: 12
                                col_stop: 46
                                path: compiler-test
                                content: "        && input.state_leaf.network_id == 0u8"
                          op: And
                          span:
                            line_start: 4
                            line_stop: 7
                            col_start: 12
                            col_stop: 46
                            path: compiler-test
                            content: "    return input.registers.value_balance == 0u64\n        && input.state.leaf_index == 0u32\n        && input.record.value == 5u64\n        && input.state_leaf.network_id == 0u8"
                      right:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"data\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":12,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && data == [0u8; 32];\\\"}\"}"
                          right:
                            ArrayInit:
                              element:
                                Value:
                                  Integer:
                                    - U8
                                    - "0"
                                    - line_start: 8
                                      line_stop: 8
                                      col_start: 21
                                      col_stop: 24
                                      path: compiler-test
                                      content: "        && data == [0u8; 32];"
                              dimensions:
                                - value: "32"
                              span:
                                line_start: 8
                                line_stop: 8
                                col_start: 20
                                col_stop: 29
                                path: compiler-test
                                content: "        && data == [0u8; 32];"
                          op: Eq
                          span:
                            line_start: 8
                            line_stop: 8
                            col_start: 12
                            col_stop: 29
                            path: compiler-test
                            content: "        && data == [0u8; 32];"
                      op: And
                      span:
                        line_start: 4
                        line_stop: 8
                        col_start: 12
                        col_stop: 29
                        path: compiler-test
                        content: "    return input.registers.value_balance == 0u64\n        && input.state.leaf_index == 0u32\n        && input.record.value == 5u64\n        && input.state_leaf.network_id == 0u8\n        && data == [0u8; 32];"
                  span:
                    line_start: 4
                    line_stop: 8
                    col_start: 5
                    col_stop: 29
                    path: compiler-test
                    content: "    return input.registers.value_balance == 0u64\n        && input.state.leaf_index == 0u32\n        && input.record.value == 5u64\n        && input.state_leaf.network_id == 0u8\n        && data == [0u8; 32];"
            span:
              line_start: 3
              line_stop: 9
              col_start: 39
              col_stop: 2
              path: compiler-test
              content: "function main(data: [u8; 32]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(data: [u8; 32]) -> bool {\n...\n}\n\n\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(data: [u8; 32]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(data: [u8; 32]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"data\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(data: [u8; 32]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - IntegerType: U8
                    - - value: "32"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 19
                  path: compiler-test
                  content: "function main(data: [u8; 32]) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Binary:
                              left:
                                Binary:
                                  left:
                                    Binary:
                                      left:
                                        CircuitMemberAccess:
                                          circuit:
                                            CircuitMemberAccess:
                                              circuit:
                                                Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.value_balance == 0u64\\\"}\"}"
                                              name: "{\"name\":\"registers\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":18,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.value_balance == 0u64\\\"}\"}"
                                              span:
                                                line_start: 4
                                                line_stop: 4
                                                col_start: 12
                                                col_stop: 27
                                                path: compiler-test
                                                content: "    return input.registers.value_balance == 0u64"
                                          name: "{\"name\":\"value_balance\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":28,\\\"col_stop\\\":41,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.value_balance == 0u64\\\"}\"}"
                                          span:
                                            line_start: 4
                                            line_stop: 4
                                            col_start: 12
                                            col_stop: 41
                                            path: compiler-test
                                            content: "    return input.registers.value_balance == 0u64"
                                      right:
                                        Value:
                                          Integer:
                                            - U64
                                            - "0"
                                            - line_start: 4
                                              line_stop: 4
                                              col_start: 45
                                              col_stop: 49
                                              path: compiler-test
                                              content: "    return input.registers.value_balance == 0u64"
                                      op: Eq
                                      span:
                                        line_start: 4
                                        line_stop: 4
                                        col_start: 12
                                        col_stop: 49
                                        path: compiler-test
                                        content: "    return input.registers.value_balance == 0u64"
                                  right:
                                    Binary:
                                      left:
                                        CircuitMemberAccess:
                                          circuit:
                                            CircuitMemberAccess:
                                              circuit:
                                                Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state.leaf_index == 0u32\\\"}\"}"
                                              name: "{\"name\":\"state\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":18,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state.leaf_index == 0u32\\\"}\"}"
                                              span:
                                                line_start: 5
                                                line_stop: 5
                                                col_start: 12
                                                col_stop: 23
                                                path: compiler-test
                                                content: "        && input.state.leaf_index == 0u32"
                                          name: "{\"name\":\"leaf_index\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":24,\\\"col_stop\\\":34,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state.leaf_index == 0u32\\\"}\"}"
                                          span:
                                            line_start: 5
                                            line_stop: 5
                                            col_start: 12
                                            col_stop: 34
                                            path: compiler-test
                                            content: "        && input.state.leaf_index == 0u32"
                                      right:
                                        Value:
                                          Integer:
                                            - U32
                                            - "0"
                                            - line_start: 5
                                              line_stop: 5
                                              col_start: 38
                                              col_stop: 42
                                              path: compiler-test
                                              content: "        && input.state.leaf_index == 0u32"
                                      op: Eq
                                      span:
                                        line_start: 5
                                        line_stop: 5
                                        col_start: 12
                                        col_stop: 42
                                        path: compiler-test
                                        content: "        && input.state.leaf_index == 0u32"
                                  op: And
                                  span:
                                    line_start: 4
                                    line_stop: 5
                                    col_start: 12
                                    col_stop: 42
                                    path: compiler-test
                                    content: "    return input.registers.value_balance == 0u64\n        && input.state.leaf_index == 0u32"
                              right:
                                Binary:
                                  left:
                                    CircuitMemberAccess:
                                      circuit:
                                        CircuitMemberAccess:
                                          circuit:
                                            Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.record.value == 5u64\\\"}\"}"
                                          name: "{\"name\":\"record\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":18,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.record.value == 5u64\\\"}\"}"
                                          span:
                                            line_start: 6
                                            line_stop: 6
                                            col_start: 12
                                            col_stop: 24
                                            path: compiler-test
                                            content: "        && input.record.value == 5u64"
                                      name: "{\"name\":\"value\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":25,\\\"col_stop\\\":30,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.record.value == 5u64\\\"}\"}"
                                      span:
                                        line_start: 6
                                        line_stop: 6
                                        col_start: 12
                                        col_stop: 30
                                        path: compiler-test
                                        content: "        && input.record.value == 5u64"
                                  right:
                                    Value:
                                      Integer:
                                        - U64
                                        - "5"
                                        - line_start: 6
                                          line_stop: 6
                                          col_start: 34
                                          col_stop: 38
                                          path: compiler-test
                                          content: "        && input.record.value == 5u64"
                                  op: Eq
                                  span:
                                    line_start: 6
                                    line_stop: 6
                                    col_start: 12
                                    col_stop: 38
                                    path: compiler-test
                                    content: "        && input.record.value == 5u64"
                              op: And
                              span:
                                line_start: 4
                                line_stop: 6
                                col_start: 12
                                col_stop: 38
                                path: compiler-test
                                content: "    return input.registers.value_balance == 0u64\n        && input.state.leaf_index == 0u32\n        && input.record.value == 5u64"
                          right:
                            Binary:
                              left:
                                CircuitMemberAccess:
                                  circuit:
                                    CircuitMemberAccess:
                                      circuit:
                                        Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state_leaf.network_id == 0u8\\\"}\"}"
                                      name: "{\"name\":\"state_leaf\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":18,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state_leaf.network_id == 0u8\\\"}\"}"
                                      span:
                                        line_start: 7
                                        line_stop: 7
                                        col_start: 12
                                        col_stop: 28
                                        path: compiler-test
                                        content: "        && input.state_leaf.network_id == 0u8"
                                  name: "{\"name\":\"network_id\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":29,\\\"col_stop\\\":39,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state_leaf.network_id == 0u8\\\"}\"}"
                                  span:
                                    line_start: 7
                                    line_stop: 7
                                    col_start: 12
                                    col_stop: 39
                                    path: compiler-test
                                    content: "        && input.state_leaf.network_id == 0u8"
                              right:
                                Value:
                                  Integer:
                                    - U8
                                    - "0"
                                    - line_start: 7
                                      line_stop: 7
                                      col_start: 43
                                      col_stop: 46
                                      path: compiler-test
                                      content: "        && input.state_leaf.network_id == 0u8"
                              op: Eq
                              span:
                                line_start: 7
                                line_stop: 7
                                col_start: 12
                                col_stop: 46
                                path: compiler-test
                                content: "        && input.state_leaf.network_id == 0u8"
                          op: And
                          span:
                            line_start: 4
                            line_stop: 7
                            col_start: 12
                            col_stop: 46
                            path: compiler-test
                            content: "    return input.registers.value_balance == 0u64\n        && input.state.leaf_index == 0u32\n        && input.record.value == 5u64\n        && input.state_leaf.network_id == 0u8"
                      right:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"data\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":12,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && data == [0u8; 32];\\\"}\"}"
                          right:
                            ArrayInit:
                              element:
                                Value:
                                  Integer:
                                    - U8
                                    - "0"
                                    - line_start: 8
                                      line_stop: 8
                                      col_start: 21
                                      col_stop: 24
                                      path: compiler-test
                                      content: "        && data == [0u8; 32];"
                              dimensions:
                                - value: "32"
                              span:
                                line_start: 8
                                line_stop: 8
                                col_start: 20
                                col_stop: 29
                                path: compiler-test
                                content: "        && data == [0u8; 32];"
                          op: Eq
                          span:
                            line_start: 8
                            line_stop: 8
                            col_start: 12
                            col_stop: 29
                            path: compiler-test
                            content: "        && data == [0u8; 32];"
                      op: And
                      span:
                        line_start: 4
                        line_stop: 8
                        col_start: 12
                        col_stop: 29
                        path: compiler-test
                        content: "    return input.registers.value_balance == 0u64\n        && input.state.leaf_index == 0u32\n        && input.record.value == 5u64\n        && input.state_leaf.network_id == 0u8\n        && data == [0u8; 32];"
                  span:
                    line_start: 4
                    line_stop: 8
                    col_start: 5
                    col_stop: 29
                    path: compiler-test
                    content: "    return input.registers.value_balance == 0u64\n        && input.state.leaf_index == 0u32\n        && input.record.value == 5u64\n        && input.state_leaf.network_id == 0u8\n        && data == [0u8; 32];"
            span:
              line_start: 3
              line_stop: 9
              col_start: 39
              col_stop: 2
              path: compiler-test
              content: "function main(data: [u8; 32]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(data: [u8; 32]) -> bool {\n...\n}\n\n\n\n"
