---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 3
      num_constraints: 3
      at: 83b1bd5868cfd70d986276428ff81a9120e0848a6f44d7bd6d5a25d6063c7669
      bt: 5a01b0726c5b948a3b336179b77081865f51dc2f1de630ce95b03424a5ae7998
      ct: 7ca43d5c34997f3c866631161cb33186cc016972238c07771ae105ca1b05320d
    output:
      - input_file: input/basic.in
        output:
          registers:
            b:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == input.registers.b;\\\"}\"}"
                      right:
                        CircuitMemberAccess:
                          circuit:
                            CircuitMemberAccess:
                              circuit:
                                Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":17,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == input.registers.b;\\\"}\"}"
                              name: "{\"name\":\"registers\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":23,\\\"col_stop\\\":32,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == input.registers.b;\\\"}\"}"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 17
                                col_stop: 32
                                path: compiler-test
                                content: "    return a == input.registers.b;"
                          name: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":33,\\\"col_stop\\\":34,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == input.registers.b;\\\"}\"}"
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 17
                            col_stop: 34
                            path: compiler-test
                            content: "    return a == input.registers.b;"
                      op: Eq
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 34
                        path: compiler-test
                        content: "    return a == input.registers.b;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 34
                    path: compiler-test
                    content: "    return a == input.registers.b;"
            span:
              line_start: 3
              line_stop: 5
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(a: bool) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: bool) -> bool {\n...\n}"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == input.registers.b;\\\"}\"}"
                      right:
                        CircuitMemberAccess:
                          circuit:
                            CircuitMemberAccess:
                              circuit:
                                Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":17,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == input.registers.b;\\\"}\"}"
                              name: "{\"name\":\"registers\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":23,\\\"col_stop\\\":32,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == input.registers.b;\\\"}\"}"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 17
                                col_stop: 32
                                path: compiler-test
                                content: "    return a == input.registers.b;"
                          name: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":33,\\\"col_stop\\\":34,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == input.registers.b;\\\"}\"}"
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 17
                            col_stop: 34
                            path: compiler-test
                            content: "    return a == input.registers.b;"
                      op: Eq
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 34
                        path: compiler-test
                        content: "    return a == input.registers.b;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 34
                    path: compiler-test
                    content: "    return a == input.registers.b;"
            span:
              line_start: 3
              line_stop: 5
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(a: bool) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: bool) -> bool {\n...\n}"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == input.registers.b;\\\"}\"}"
                      right:
                        CircuitMemberAccess:
                          circuit:
                            CircuitMemberAccess:
                              circuit:
                                Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":17,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == input.registers.b;\\\"}\"}"
                              name: "{\"name\":\"registers\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":23,\\\"col_stop\\\":32,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == input.registers.b;\\\"}\"}"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 17
                                col_stop: 32
                                path: compiler-test
                                content: "    return a == input.registers.b;"
                          name: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":33,\\\"col_stop\\\":34,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == input.registers.b;\\\"}\"}"
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 17
                            col_stop: 34
                            path: compiler-test
                            content: "    return a == input.registers.b;"
                      op: Eq
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 34
                        path: compiler-test
                        content: "    return a == input.registers.b;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 34
                    path: compiler-test
                    content: "    return a == input.registers.b;"
            span:
              line_start: 3
              line_stop: 5
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(a: bool) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: bool) -> bool {\n...\n}"
