---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 33
      num_constraints: 33
      at: 16cd2aaf51f97f0d967f934facd55d3da0f128b5548ca7d9033099dabb8755aa
      bt: 13ce6219d223223b0e2a5b8bab43bda704fb2509e20143c1c8dc28238c65a0c3
      ct: 1a2cc6ebebf9b0d70351fb54db6ab269bfec125b7d84dea8450ee1566d937a38
    output:
      - input_file: input/main_tuple.in
        output:
          registers:
            r0:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: (u8, bool, u8)) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: (u8, bool, u8)) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: (u8, bool, u8)) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Tuple:
                    - IntegerType: U8
                    - Boolean
                    - IntegerType: U8
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: (u8, bool, u8)) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Binary:
                              left:
                                TupleAccess:
                                  tuple:
                                    Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x.0 == 10 && x.1 == true && x.2 == 10;\\\"}\"}"
                                  index:
                                    value: "0"
                                  span:
                                    line_start: 4
                                    line_stop: 4
                                    col_start: 12
                                    col_stop: 15
                                    path: compiler-test
                                    content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                              right:
                                Value:
                                  Implicit:
                                    - "10"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 19
                                      col_stop: 21
                                      path: compiler-test
                                      content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                              op: Eq
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 12
                                col_stop: 21
                                path: compiler-test
                                content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                          right:
                            Binary:
                              left:
                                TupleAccess:
                                  tuple:
                                    Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":25,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x.0 == 10 && x.1 == true && x.2 == 10;\\\"}\"}"
                                  index:
                                    value: "1"
                                  span:
                                    line_start: 4
                                    line_stop: 4
                                    col_start: 25
                                    col_stop: 28
                                    path: compiler-test
                                    content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                              right:
                                Value:
                                  Boolean:
                                    - "true"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 32
                                      col_stop: 36
                                      path: compiler-test
                                      content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                              op: Eq
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 25
                                col_stop: 36
                                path: compiler-test
                                content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                          op: And
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 12
                            col_stop: 36
                            path: compiler-test
                            content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                      right:
                        Binary:
                          left:
                            TupleAccess:
                              tuple:
                                Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":40,\\\"col_stop\\\":41,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x.0 == 10 && x.1 == true && x.2 == 10;\\\"}\"}"
                              index:
                                value: "2"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 40
                                col_stop: 43
                                path: compiler-test
                                content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                          right:
                            Value:
                              Implicit:
                                - "10"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 47
                                  col_stop: 49
                                  path: compiler-test
                                  content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                          op: Eq
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 40
                            col_stop: 49
                            path: compiler-test
                            content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                      op: And
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 49
                        path: compiler-test
                        content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 49
                    path: compiler-test
                    content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
            span:
              line_start: 3
              line_stop: 5
              col_start: 42
              col_stop: 2
              path: compiler-test
              content: "function main(x: (u8, bool, u8)) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: (u8, bool, u8)) -> bool {\n...\n}"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: (u8, bool, u8)) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: (u8, bool, u8)) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: (u8, bool, u8)) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Tuple:
                    - IntegerType: U8
                    - Boolean
                    - IntegerType: U8
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: (u8, bool, u8)) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Binary:
                              left:
                                TupleAccess:
                                  tuple:
                                    Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x.0 == 10 && x.1 == true && x.2 == 10;\\\"}\"}"
                                  index:
                                    value: "0"
                                  span:
                                    line_start: 4
                                    line_stop: 4
                                    col_start: 12
                                    col_stop: 15
                                    path: compiler-test
                                    content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                              right:
                                Value:
                                  Implicit:
                                    - "10"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 19
                                      col_stop: 21
                                      path: compiler-test
                                      content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                              op: Eq
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 12
                                col_stop: 21
                                path: compiler-test
                                content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                          right:
                            Binary:
                              left:
                                TupleAccess:
                                  tuple:
                                    Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":25,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x.0 == 10 && x.1 == true && x.2 == 10;\\\"}\"}"
                                  index:
                                    value: "1"
                                  span:
                                    line_start: 4
                                    line_stop: 4
                                    col_start: 25
                                    col_stop: 28
                                    path: compiler-test
                                    content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                              right:
                                Value:
                                  Boolean:
                                    - "true"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 32
                                      col_stop: 36
                                      path: compiler-test
                                      content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                              op: Eq
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 25
                                col_stop: 36
                                path: compiler-test
                                content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                          op: And
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 12
                            col_stop: 36
                            path: compiler-test
                            content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                      right:
                        Binary:
                          left:
                            TupleAccess:
                              tuple:
                                Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":40,\\\"col_stop\\\":41,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x.0 == 10 && x.1 == true && x.2 == 10;\\\"}\"}"
                              index:
                                value: "2"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 40
                                col_stop: 43
                                path: compiler-test
                                content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                          right:
                            Value:
                              Implicit:
                                - "10"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 47
                                  col_stop: 49
                                  path: compiler-test
                                  content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                          op: Eq
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 40
                            col_stop: 49
                            path: compiler-test
                            content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                      op: And
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 49
                        path: compiler-test
                        content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 49
                    path: compiler-test
                    content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
            span:
              line_start: 3
              line_stop: 5
              col_start: 42
              col_stop: 2
              path: compiler-test
              content: "function main(x: (u8, bool, u8)) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: (u8, bool, u8)) -> bool {\n...\n}"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: (u8, bool, u8)) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: (u8, bool, u8)) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: (u8, bool, u8)) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Tuple:
                    - IntegerType: U8
                    - Boolean
                    - IntegerType: U8
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: (u8, bool, u8)) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Binary:
                              left:
                                TupleAccess:
                                  tuple:
                                    Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x.0 == 10 && x.1 == true && x.2 == 10;\\\"}\"}"
                                  index:
                                    value: "0"
                                  span:
                                    line_start: 4
                                    line_stop: 4
                                    col_start: 12
                                    col_stop: 15
                                    path: compiler-test
                                    content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                              right:
                                Value:
                                  Integer:
                                    - U8
                                    - "10"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 19
                                      col_stop: 21
                                      path: compiler-test
                                      content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                              op: Eq
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 12
                                col_stop: 21
                                path: compiler-test
                                content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                          right:
                            Binary:
                              left:
                                TupleAccess:
                                  tuple:
                                    Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":25,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x.0 == 10 && x.1 == true && x.2 == 10;\\\"}\"}"
                                  index:
                                    value: "1"
                                  span:
                                    line_start: 4
                                    line_stop: 4
                                    col_start: 25
                                    col_stop: 28
                                    path: compiler-test
                                    content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                              right:
                                Value:
                                  Boolean:
                                    - "true"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 32
                                      col_stop: 36
                                      path: compiler-test
                                      content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                              op: Eq
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 25
                                col_stop: 36
                                path: compiler-test
                                content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                          op: And
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 12
                            col_stop: 36
                            path: compiler-test
                            content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                      right:
                        Binary:
                          left:
                            TupleAccess:
                              tuple:
                                Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":40,\\\"col_stop\\\":41,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x.0 == 10 && x.1 == true && x.2 == 10;\\\"}\"}"
                              index:
                                value: "2"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 40
                                col_stop: 43
                                path: compiler-test
                                content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                          right:
                            Value:
                              Integer:
                                - U8
                                - "10"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 47
                                  col_stop: 49
                                  path: compiler-test
                                  content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                          op: Eq
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 40
                            col_stop: 49
                            path: compiler-test
                            content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                      op: And
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 49
                        path: compiler-test
                        content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 49
                    path: compiler-test
                    content: "    return x.0 == 10 && x.1 == true && x.2 == 10;"
            span:
              line_start: 3
              line_stop: 5
              col_start: 42
              col_stop: 2
              path: compiler-test
              content: "function main(x: (u8, bool, u8)) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: (u8, bool, u8)) -> bool {\n...\n}"
