---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 223
      num_constraints: 223
      at: 87fe022f8971e90450cc219824d04ea84f08040429143393193aa2de0321759f
      bt: 65e18f4e1e32d72f87d238401f8397b5d8ba20e7da7d50cc5930faa5673cdb77
      ct: 389354117abccc4ef9f4822705889f64f1d16b7e0d2adae52005c7b91b0ccabb
    output:
      - input_file: input/main_multi_dimension_array.in
        output:
          registers:
            r0:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: [i16; (2, 2, 3)]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: [i16; (2, 2, 3)]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: [i16; (2, 2, 3)]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - IntegerType: I16
                    - - value: "2"
                      - value: "2"
                      - value: "3"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: [i16; (2, 2, 3)]) -> bool {"
          output: Boolean
          block:
            statements:
              - Console:
                  function:
                    Log:
                      parts:
                        - Const: "x: "
                        - Container
                      parameters:
                        - Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":26,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    console.log(\\\\\\\"x: {}\\\\\\\", x);\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 17
                        col_stop: 27
                        path: compiler-test
                        content: "    console.log(\"x: {}\", x);"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 27
                    path: compiler-test
                    content: "    console.log(\"x: {}\", x);"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const y: [i16; (2, 2, 3)] = [0i16; (2, 2, 3)];\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const y: [i16; (2, 2, 3)] = [0i16; (2, 2, 3)];"
                  type_:
                    Array:
                      - IntegerType: I16
                      - - value: "2"
                        - value: "2"
                        - value: "3"
                  value:
                    ArrayInit:
                      element:
                        Value:
                          Integer:
                            - I16
                            - "0"
                            - line_start: 6
                              line_stop: 6
                              col_start: 34
                              col_stop: 38
                              path: compiler-test
                              content: "    const y: [i16; (2, 2, 3)] = [0i16; (2, 2, 3)];"
                      dimensions:
                        - value: "2"
                        - value: "2"
                        - value: "3"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 33
                        col_stop: 50
                        path: compiler-test
                        content: "    const y: [i16; (2, 2, 3)] = [0i16; (2, 2, 3)];"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 50
                    path: compiler-test
                    content: "    const y: [i16; (2, 2, 3)] = [0i16; (2, 2, 3)];"
              - Console:
                  function:
                    Log:
                      parts:
                        - Const: "y: "
                        - Container
                      parameters:
                        - Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":26,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    console.log(\\\\\\\"y: {}\\\\\\\", y);\\\"}\"}"
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 17
                        col_stop: 27
                        path: compiler-test
                        content: "    console.log(\"y: {}\", y);"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 27
                    path: compiler-test
                    content: "    console.log(\"y: {}\", y);"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            ArrayAccess:
                              array:
                                ArrayAccess:
                                  array:
                                    ArrayAccess:
                                      array:
                                        Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];\\\"}\"}"
                                      index:
                                        Value:
                                          Implicit:
                                            - "0"
                                            - line_start: 9
                                              line_stop: 9
                                              col_start: 14
                                              col_stop: 15
                                              path: compiler-test
                                              content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                      span:
                                        line_start: 9
                                        line_stop: 9
                                        col_start: 12
                                        col_stop: 16
                                        path: compiler-test
                                        content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  index:
                                    Value:
                                      Implicit:
                                        - "0"
                                        - line_start: 9
                                          line_stop: 9
                                          col_start: 17
                                          col_stop: 18
                                          path: compiler-test
                                          content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  span:
                                    line_start: 9
                                    line_stop: 9
                                    col_start: 12
                                    col_stop: 19
                                    path: compiler-test
                                    content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              index:
                                Value:
                                  Implicit:
                                    - "0"
                                    - line_start: 9
                                      line_stop: 9
                                      col_start: 20
                                      col_stop: 21
                                      path: compiler-test
                                      content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              span:
                                line_start: 9
                                line_stop: 9
                                col_start: 12
                                col_stop: 22
                                path: compiler-test
                                content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                          right:
                            ArrayAccess:
                              array:
                                ArrayAccess:
                                  array:
                                    ArrayAccess:
                                      array:
                                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":26,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];\\\"}\"}"
                                      index:
                                        Value:
                                          Implicit:
                                            - "0"
                                            - line_start: 9
                                              line_stop: 9
                                              col_start: 28
                                              col_stop: 29
                                              path: compiler-test
                                              content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                      span:
                                        line_start: 9
                                        line_stop: 9
                                        col_start: 26
                                        col_stop: 30
                                        path: compiler-test
                                        content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  index:
                                    Value:
                                      Implicit:
                                        - "0"
                                        - line_start: 9
                                          line_stop: 9
                                          col_start: 31
                                          col_stop: 32
                                          path: compiler-test
                                          content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  span:
                                    line_start: 9
                                    line_stop: 9
                                    col_start: 26
                                    col_stop: 33
                                    path: compiler-test
                                    content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              index:
                                Value:
                                  Implicit:
                                    - "0"
                                    - line_start: 9
                                      line_stop: 9
                                      col_start: 34
                                      col_stop: 35
                                      path: compiler-test
                                      content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              span:
                                line_start: 9
                                line_stop: 9
                                col_start: 26
                                col_stop: 36
                                path: compiler-test
                                content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                          op: Eq
                          span:
                            line_start: 9
                            line_stop: 9
                            col_start: 12
                            col_stop: 36
                            path: compiler-test
                            content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                      right:
                        Binary:
                          left:
                            ArrayAccess:
                              array:
                                ArrayAccess:
                                  array:
                                    ArrayAccess:
                                      array:
                                        Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":40,\\\"col_stop\\\":41,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];\\\"}\"}"
                                      index:
                                        Value:
                                          Implicit:
                                            - "1"
                                            - line_start: 9
                                              line_stop: 9
                                              col_start: 42
                                              col_stop: 43
                                              path: compiler-test
                                              content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                      span:
                                        line_start: 9
                                        line_stop: 9
                                        col_start: 40
                                        col_stop: 44
                                        path: compiler-test
                                        content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  index:
                                    Value:
                                      Implicit:
                                        - "1"
                                        - line_start: 9
                                          line_stop: 9
                                          col_start: 45
                                          col_stop: 46
                                          path: compiler-test
                                          content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  span:
                                    line_start: 9
                                    line_stop: 9
                                    col_start: 40
                                    col_stop: 47
                                    path: compiler-test
                                    content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              index:
                                Value:
                                  Implicit:
                                    - "2"
                                    - line_start: 9
                                      line_stop: 9
                                      col_start: 48
                                      col_stop: 49
                                      path: compiler-test
                                      content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              span:
                                line_start: 9
                                line_stop: 9
                                col_start: 40
                                col_stop: 50
                                path: compiler-test
                                content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                          right:
                            ArrayAccess:
                              array:
                                ArrayAccess:
                                  array:
                                    ArrayAccess:
                                      array:
                                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":54,\\\"col_stop\\\":55,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];\\\"}\"}"
                                      index:
                                        Value:
                                          Implicit:
                                            - "1"
                                            - line_start: 9
                                              line_stop: 9
                                              col_start: 56
                                              col_stop: 57
                                              path: compiler-test
                                              content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                      span:
                                        line_start: 9
                                        line_stop: 9
                                        col_start: 54
                                        col_stop: 58
                                        path: compiler-test
                                        content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  index:
                                    Value:
                                      Implicit:
                                        - "1"
                                        - line_start: 9
                                          line_stop: 9
                                          col_start: 59
                                          col_stop: 60
                                          path: compiler-test
                                          content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  span:
                                    line_start: 9
                                    line_stop: 9
                                    col_start: 54
                                    col_stop: 61
                                    path: compiler-test
                                    content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              index:
                                Value:
                                  Implicit:
                                    - "2"
                                    - line_start: 9
                                      line_stop: 9
                                      col_start: 62
                                      col_stop: 63
                                      path: compiler-test
                                      content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              span:
                                line_start: 9
                                line_stop: 9
                                col_start: 54
                                col_stop: 64
                                path: compiler-test
                                content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                          op: Eq
                          span:
                            line_start: 9
                            line_stop: 9
                            col_start: 40
                            col_stop: 64
                            path: compiler-test
                            content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                      op: And
                      span:
                        line_start: 9
                        line_stop: 9
                        col_start: 12
                        col_stop: 64
                        path: compiler-test
                        content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                  span:
                    line_start: 9
                    line_stop: 9
                    col_start: 5
                    col_stop: 64
                    path: compiler-test
                    content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
            span:
              line_start: 3
              line_stop: 10
              col_start: 44
              col_stop: 2
              path: compiler-test
              content: "function main(x: [i16; (2, 2, 3)]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 10
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: [i16; (2, 2, 3)]) -> bool {\n...\n}\n\n\n\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: [i16; (2, 2, 3)]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: [i16; (2, 2, 3)]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: [i16; (2, 2, 3)]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Array:
                        - Array:
                            - IntegerType: I16
                            - - value: "3"
                        - - value: "2"
                    - - value: "2"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: [i16; (2, 2, 3)]) -> bool {"
          output: Boolean
          block:
            statements:
              - Console:
                  function:
                    Log:
                      parts:
                        - Const: "x: "
                        - Container
                      parameters:
                        - Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":26,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    console.log(\\\\\\\"x: {}\\\\\\\", x);\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 17
                        col_stop: 27
                        path: compiler-test
                        content: "    console.log(\"x: {}\", x);"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 27
                    path: compiler-test
                    content: "    console.log(\"x: {}\", x);"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const y: [i16; (2, 2, 3)] = [0i16; (2, 2, 3)];\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const y: [i16; (2, 2, 3)] = [0i16; (2, 2, 3)];"
                  type_:
                    Array:
                      - Array:
                          - Array:
                              - IntegerType: I16
                              - - value: "3"
                          - - value: "2"
                      - - value: "2"
                  value:
                    ArrayInit:
                      element:
                        ArrayInit:
                          element:
                            ArrayInit:
                              element:
                                Value:
                                  Integer:
                                    - I16
                                    - "0"
                                    - line_start: 6
                                      line_stop: 6
                                      col_start: 34
                                      col_stop: 38
                                      path: compiler-test
                                      content: "    const y: [i16; (2, 2, 3)] = [0i16; (2, 2, 3)];"
                              dimensions:
                                - value: "3"
                              span:
                                line_start: 6
                                line_stop: 6
                                col_start: 33
                                col_stop: 50
                                path: compiler-test
                                content: "    const y: [i16; (2, 2, 3)] = [0i16; (2, 2, 3)];"
                          dimensions:
                            - value: "2"
                          span:
                            line_start: 6
                            line_stop: 6
                            col_start: 33
                            col_stop: 50
                            path: compiler-test
                            content: "    const y: [i16; (2, 2, 3)] = [0i16; (2, 2, 3)];"
                      dimensions:
                        - value: "2"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 33
                        col_stop: 50
                        path: compiler-test
                        content: "    const y: [i16; (2, 2, 3)] = [0i16; (2, 2, 3)];"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 50
                    path: compiler-test
                    content: "    const y: [i16; (2, 2, 3)] = [0i16; (2, 2, 3)];"
              - Console:
                  function:
                    Log:
                      parts:
                        - Const: "y: "
                        - Container
                      parameters:
                        - Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":26,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    console.log(\\\\\\\"y: {}\\\\\\\", y);\\\"}\"}"
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 17
                        col_stop: 27
                        path: compiler-test
                        content: "    console.log(\"y: {}\", y);"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 27
                    path: compiler-test
                    content: "    console.log(\"y: {}\", y);"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            ArrayAccess:
                              array:
                                ArrayAccess:
                                  array:
                                    ArrayAccess:
                                      array:
                                        Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];\\\"}\"}"
                                      index:
                                        Value:
                                          Implicit:
                                            - "0"
                                            - line_start: 9
                                              line_stop: 9
                                              col_start: 14
                                              col_stop: 15
                                              path: compiler-test
                                              content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                      span:
                                        line_start: 9
                                        line_stop: 9
                                        col_start: 12
                                        col_stop: 16
                                        path: compiler-test
                                        content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  index:
                                    Value:
                                      Implicit:
                                        - "0"
                                        - line_start: 9
                                          line_stop: 9
                                          col_start: 17
                                          col_stop: 18
                                          path: compiler-test
                                          content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  span:
                                    line_start: 9
                                    line_stop: 9
                                    col_start: 12
                                    col_stop: 19
                                    path: compiler-test
                                    content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              index:
                                Value:
                                  Implicit:
                                    - "0"
                                    - line_start: 9
                                      line_stop: 9
                                      col_start: 20
                                      col_stop: 21
                                      path: compiler-test
                                      content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              span:
                                line_start: 9
                                line_stop: 9
                                col_start: 12
                                col_stop: 22
                                path: compiler-test
                                content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                          right:
                            ArrayAccess:
                              array:
                                ArrayAccess:
                                  array:
                                    ArrayAccess:
                                      array:
                                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":26,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];\\\"}\"}"
                                      index:
                                        Value:
                                          Implicit:
                                            - "0"
                                            - line_start: 9
                                              line_stop: 9
                                              col_start: 28
                                              col_stop: 29
                                              path: compiler-test
                                              content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                      span:
                                        line_start: 9
                                        line_stop: 9
                                        col_start: 26
                                        col_stop: 30
                                        path: compiler-test
                                        content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  index:
                                    Value:
                                      Implicit:
                                        - "0"
                                        - line_start: 9
                                          line_stop: 9
                                          col_start: 31
                                          col_stop: 32
                                          path: compiler-test
                                          content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  span:
                                    line_start: 9
                                    line_stop: 9
                                    col_start: 26
                                    col_stop: 33
                                    path: compiler-test
                                    content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              index:
                                Value:
                                  Implicit:
                                    - "0"
                                    - line_start: 9
                                      line_stop: 9
                                      col_start: 34
                                      col_stop: 35
                                      path: compiler-test
                                      content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              span:
                                line_start: 9
                                line_stop: 9
                                col_start: 26
                                col_stop: 36
                                path: compiler-test
                                content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                          op: Eq
                          span:
                            line_start: 9
                            line_stop: 9
                            col_start: 12
                            col_stop: 36
                            path: compiler-test
                            content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                      right:
                        Binary:
                          left:
                            ArrayAccess:
                              array:
                                ArrayAccess:
                                  array:
                                    ArrayAccess:
                                      array:
                                        Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":40,\\\"col_stop\\\":41,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];\\\"}\"}"
                                      index:
                                        Value:
                                          Implicit:
                                            - "1"
                                            - line_start: 9
                                              line_stop: 9
                                              col_start: 42
                                              col_stop: 43
                                              path: compiler-test
                                              content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                      span:
                                        line_start: 9
                                        line_stop: 9
                                        col_start: 40
                                        col_stop: 44
                                        path: compiler-test
                                        content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  index:
                                    Value:
                                      Implicit:
                                        - "1"
                                        - line_start: 9
                                          line_stop: 9
                                          col_start: 45
                                          col_stop: 46
                                          path: compiler-test
                                          content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  span:
                                    line_start: 9
                                    line_stop: 9
                                    col_start: 40
                                    col_stop: 47
                                    path: compiler-test
                                    content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              index:
                                Value:
                                  Implicit:
                                    - "2"
                                    - line_start: 9
                                      line_stop: 9
                                      col_start: 48
                                      col_stop: 49
                                      path: compiler-test
                                      content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              span:
                                line_start: 9
                                line_stop: 9
                                col_start: 40
                                col_stop: 50
                                path: compiler-test
                                content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                          right:
                            ArrayAccess:
                              array:
                                ArrayAccess:
                                  array:
                                    ArrayAccess:
                                      array:
                                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":54,\\\"col_stop\\\":55,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];\\\"}\"}"
                                      index:
                                        Value:
                                          Implicit:
                                            - "1"
                                            - line_start: 9
                                              line_stop: 9
                                              col_start: 56
                                              col_stop: 57
                                              path: compiler-test
                                              content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                      span:
                                        line_start: 9
                                        line_stop: 9
                                        col_start: 54
                                        col_stop: 58
                                        path: compiler-test
                                        content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  index:
                                    Value:
                                      Implicit:
                                        - "1"
                                        - line_start: 9
                                          line_stop: 9
                                          col_start: 59
                                          col_stop: 60
                                          path: compiler-test
                                          content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  span:
                                    line_start: 9
                                    line_stop: 9
                                    col_start: 54
                                    col_stop: 61
                                    path: compiler-test
                                    content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              index:
                                Value:
                                  Implicit:
                                    - "2"
                                    - line_start: 9
                                      line_stop: 9
                                      col_start: 62
                                      col_stop: 63
                                      path: compiler-test
                                      content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              span:
                                line_start: 9
                                line_stop: 9
                                col_start: 54
                                col_stop: 64
                                path: compiler-test
                                content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                          op: Eq
                          span:
                            line_start: 9
                            line_stop: 9
                            col_start: 40
                            col_stop: 64
                            path: compiler-test
                            content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                      op: And
                      span:
                        line_start: 9
                        line_stop: 9
                        col_start: 12
                        col_stop: 64
                        path: compiler-test
                        content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                  span:
                    line_start: 9
                    line_stop: 9
                    col_start: 5
                    col_stop: 64
                    path: compiler-test
                    content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
            span:
              line_start: 3
              line_stop: 10
              col_start: 44
              col_stop: 2
              path: compiler-test
              content: "function main(x: [i16; (2, 2, 3)]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 10
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: [i16; (2, 2, 3)]) -> bool {\n...\n}\n\n\n\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: [i16; (2, 2, 3)]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: [i16; (2, 2, 3)]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: [i16; (2, 2, 3)]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Array:
                        - Array:
                            - IntegerType: I16
                            - - value: "3"
                        - - value: "2"
                    - - value: "2"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: [i16; (2, 2, 3)]) -> bool {"
          output: Boolean
          block:
            statements:
              - Console:
                  function:
                    Log:
                      parts:
                        - Const: "x: "
                        - Container
                      parameters:
                        - Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":26,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    console.log(\\\\\\\"x: {}\\\\\\\", x);\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 17
                        col_stop: 27
                        path: compiler-test
                        content: "    console.log(\"x: {}\", x);"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 27
                    path: compiler-test
                    content: "    console.log(\"x: {}\", x);"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const y: [i16; (2, 2, 3)] = [0i16; (2, 2, 3)];\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const y: [i16; (2, 2, 3)] = [0i16; (2, 2, 3)];"
                  type_:
                    Array:
                      - Array:
                          - Array:
                              - IntegerType: I16
                              - - value: "3"
                          - - value: "2"
                      - - value: "2"
                  value:
                    ArrayInit:
                      element:
                        ArrayInit:
                          element:
                            ArrayInit:
                              element:
                                Value:
                                  Integer:
                                    - I16
                                    - "0"
                                    - line_start: 6
                                      line_stop: 6
                                      col_start: 34
                                      col_stop: 38
                                      path: compiler-test
                                      content: "    const y: [i16; (2, 2, 3)] = [0i16; (2, 2, 3)];"
                              dimensions:
                                - value: "3"
                              span:
                                line_start: 6
                                line_stop: 6
                                col_start: 33
                                col_stop: 50
                                path: compiler-test
                                content: "    const y: [i16; (2, 2, 3)] = [0i16; (2, 2, 3)];"
                          dimensions:
                            - value: "2"
                          span:
                            line_start: 6
                            line_stop: 6
                            col_start: 33
                            col_stop: 50
                            path: compiler-test
                            content: "    const y: [i16; (2, 2, 3)] = [0i16; (2, 2, 3)];"
                      dimensions:
                        - value: "2"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 33
                        col_stop: 50
                        path: compiler-test
                        content: "    const y: [i16; (2, 2, 3)] = [0i16; (2, 2, 3)];"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 50
                    path: compiler-test
                    content: "    const y: [i16; (2, 2, 3)] = [0i16; (2, 2, 3)];"
              - Console:
                  function:
                    Log:
                      parts:
                        - Const: "y: "
                        - Container
                      parameters:
                        - Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":26,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    console.log(\\\\\\\"y: {}\\\\\\\", y);\\\"}\"}"
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 17
                        col_stop: 27
                        path: compiler-test
                        content: "    console.log(\"y: {}\", y);"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 27
                    path: compiler-test
                    content: "    console.log(\"y: {}\", y);"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            ArrayAccess:
                              array:
                                ArrayAccess:
                                  array:
                                    ArrayAccess:
                                      array:
                                        Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];\\\"}\"}"
                                      index:
                                        Value:
                                          Integer:
                                            - U32
                                            - "0"
                                            - line_start: 9
                                              line_stop: 9
                                              col_start: 14
                                              col_stop: 15
                                              path: compiler-test
                                              content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                      span:
                                        line_start: 9
                                        line_stop: 9
                                        col_start: 12
                                        col_stop: 16
                                        path: compiler-test
                                        content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  index:
                                    Value:
                                      Integer:
                                        - U32
                                        - "0"
                                        - line_start: 9
                                          line_stop: 9
                                          col_start: 17
                                          col_stop: 18
                                          path: compiler-test
                                          content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  span:
                                    line_start: 9
                                    line_stop: 9
                                    col_start: 12
                                    col_stop: 19
                                    path: compiler-test
                                    content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              index:
                                Value:
                                  Integer:
                                    - U32
                                    - "0"
                                    - line_start: 9
                                      line_stop: 9
                                      col_start: 20
                                      col_stop: 21
                                      path: compiler-test
                                      content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              span:
                                line_start: 9
                                line_stop: 9
                                col_start: 12
                                col_stop: 22
                                path: compiler-test
                                content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                          right:
                            ArrayAccess:
                              array:
                                ArrayAccess:
                                  array:
                                    ArrayAccess:
                                      array:
                                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":26,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];\\\"}\"}"
                                      index:
                                        Value:
                                          Integer:
                                            - U32
                                            - "0"
                                            - line_start: 9
                                              line_stop: 9
                                              col_start: 28
                                              col_stop: 29
                                              path: compiler-test
                                              content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                      span:
                                        line_start: 9
                                        line_stop: 9
                                        col_start: 26
                                        col_stop: 30
                                        path: compiler-test
                                        content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  index:
                                    Value:
                                      Integer:
                                        - U32
                                        - "0"
                                        - line_start: 9
                                          line_stop: 9
                                          col_start: 31
                                          col_stop: 32
                                          path: compiler-test
                                          content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  span:
                                    line_start: 9
                                    line_stop: 9
                                    col_start: 26
                                    col_stop: 33
                                    path: compiler-test
                                    content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              index:
                                Value:
                                  Integer:
                                    - U32
                                    - "0"
                                    - line_start: 9
                                      line_stop: 9
                                      col_start: 34
                                      col_stop: 35
                                      path: compiler-test
                                      content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              span:
                                line_start: 9
                                line_stop: 9
                                col_start: 26
                                col_stop: 36
                                path: compiler-test
                                content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                          op: Eq
                          span:
                            line_start: 9
                            line_stop: 9
                            col_start: 12
                            col_stop: 36
                            path: compiler-test
                            content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                      right:
                        Binary:
                          left:
                            ArrayAccess:
                              array:
                                ArrayAccess:
                                  array:
                                    ArrayAccess:
                                      array:
                                        Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":40,\\\"col_stop\\\":41,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];\\\"}\"}"
                                      index:
                                        Value:
                                          Integer:
                                            - U32
                                            - "1"
                                            - line_start: 9
                                              line_stop: 9
                                              col_start: 42
                                              col_stop: 43
                                              path: compiler-test
                                              content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                      span:
                                        line_start: 9
                                        line_stop: 9
                                        col_start: 40
                                        col_stop: 44
                                        path: compiler-test
                                        content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  index:
                                    Value:
                                      Integer:
                                        - U32
                                        - "1"
                                        - line_start: 9
                                          line_stop: 9
                                          col_start: 45
                                          col_stop: 46
                                          path: compiler-test
                                          content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  span:
                                    line_start: 9
                                    line_stop: 9
                                    col_start: 40
                                    col_stop: 47
                                    path: compiler-test
                                    content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              index:
                                Value:
                                  Integer:
                                    - U32
                                    - "2"
                                    - line_start: 9
                                      line_stop: 9
                                      col_start: 48
                                      col_stop: 49
                                      path: compiler-test
                                      content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              span:
                                line_start: 9
                                line_stop: 9
                                col_start: 40
                                col_stop: 50
                                path: compiler-test
                                content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                          right:
                            ArrayAccess:
                              array:
                                ArrayAccess:
                                  array:
                                    ArrayAccess:
                                      array:
                                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":54,\\\"col_stop\\\":55,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];\\\"}\"}"
                                      index:
                                        Value:
                                          Integer:
                                            - U32
                                            - "1"
                                            - line_start: 9
                                              line_stop: 9
                                              col_start: 56
                                              col_stop: 57
                                              path: compiler-test
                                              content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                      span:
                                        line_start: 9
                                        line_stop: 9
                                        col_start: 54
                                        col_stop: 58
                                        path: compiler-test
                                        content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  index:
                                    Value:
                                      Integer:
                                        - U32
                                        - "1"
                                        - line_start: 9
                                          line_stop: 9
                                          col_start: 59
                                          col_stop: 60
                                          path: compiler-test
                                          content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                                  span:
                                    line_start: 9
                                    line_stop: 9
                                    col_start: 54
                                    col_stop: 61
                                    path: compiler-test
                                    content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              index:
                                Value:
                                  Integer:
                                    - U32
                                    - "2"
                                    - line_start: 9
                                      line_stop: 9
                                      col_start: 62
                                      col_stop: 63
                                      path: compiler-test
                                      content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                              span:
                                line_start: 9
                                line_stop: 9
                                col_start: 54
                                col_stop: 64
                                path: compiler-test
                                content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                          op: Eq
                          span:
                            line_start: 9
                            line_stop: 9
                            col_start: 40
                            col_stop: 64
                            path: compiler-test
                            content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                      op: And
                      span:
                        line_start: 9
                        line_stop: 9
                        col_start: 12
                        col_stop: 64
                        path: compiler-test
                        content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
                  span:
                    line_start: 9
                    line_stop: 9
                    col_start: 5
                    col_stop: 64
                    path: compiler-test
                    content: "    return x[0][0][0] == y[0][0][0] && x[1][1][2] == y[1][1][2];"
            span:
              line_start: 3
              line_stop: 10
              col_start: 44
              col_stop: 2
              path: compiler-test
              content: "function main(x: [i16; (2, 2, 3)]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 10
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: [i16; (2, 2, 3)]) -> bool {\n...\n}\n\n\n\n\n"
