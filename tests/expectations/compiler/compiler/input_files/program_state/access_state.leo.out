---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 511
      num_constraints: 511
      at: bb121a0b56bee9895a337644cf8ece2f09dcf9113cd75c29f9bf26d635ba6d22
      bt: 4a54bb6ffc0c9de1f8f349449b9071745f3db6985adb9b1d657e8aaa4309cc41
      ct: a0736e8c8f3bb1c39a147348754e53dfd31fd76a1df9cd9960472841bcc531df
    output:
      - input_file: input/dummy.in
        output:
          registers:
            r0:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main() -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main() -> bool {\\\"}\"}"
          input: []
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        CircuitMemberAccess:
                          circuit:
                            CircuitMemberAccess:
                              circuit:
                                Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.state.root == [0u8; 32];\\\"}\"}"
                              name: "{\"name\":\"state\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":18,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.state.root == [0u8; 32];\\\"}\"}"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 12
                                col_stop: 23
                                path: compiler-test
                                content: "    return input.state.root == [0u8; 32];"
                          name: "{\"name\":\"root\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":24,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.state.root == [0u8; 32];\\\"}\"}"
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 12
                            col_stop: 28
                            path: compiler-test
                            content: "    return input.state.root == [0u8; 32];"
                      right:
                        ArrayInit:
                          element:
                            Value:
                              Integer:
                                - U8
                                - "0"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 33
                                  col_stop: 36
                                  path: compiler-test
                                  content: "    return input.state.root == [0u8; 32];"
                          dimensions:
                            - value: "32"
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 32
                            col_stop: 41
                            path: compiler-test
                            content: "    return input.state.root == [0u8; 32];"
                      op: Eq
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 41
                        path: compiler-test
                        content: "    return input.state.root == [0u8; 32];"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 41
                    path: compiler-test
                    content: "    return input.state.root == [0u8; 32];"
            span:
              line_start: 3
              line_stop: 5
              col_start: 25
              col_stop: 2
              path: compiler-test
              content: "function main() -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main() -> bool {\n...\n}"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main() -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main() -> bool {\\\"}\"}"
          input: []
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        CircuitMemberAccess:
                          circuit:
                            CircuitMemberAccess:
                              circuit:
                                Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.state.root == [0u8; 32];\\\"}\"}"
                              name: "{\"name\":\"state\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":18,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.state.root == [0u8; 32];\\\"}\"}"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 12
                                col_stop: 23
                                path: compiler-test
                                content: "    return input.state.root == [0u8; 32];"
                          name: "{\"name\":\"root\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":24,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.state.root == [0u8; 32];\\\"}\"}"
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 12
                            col_stop: 28
                            path: compiler-test
                            content: "    return input.state.root == [0u8; 32];"
                      right:
                        ArrayInit:
                          element:
                            Value:
                              Integer:
                                - U8
                                - "0"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 33
                                  col_stop: 36
                                  path: compiler-test
                                  content: "    return input.state.root == [0u8; 32];"
                          dimensions:
                            - value: "32"
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 32
                            col_stop: 41
                            path: compiler-test
                            content: "    return input.state.root == [0u8; 32];"
                      op: Eq
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 41
                        path: compiler-test
                        content: "    return input.state.root == [0u8; 32];"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 41
                    path: compiler-test
                    content: "    return input.state.root == [0u8; 32];"
            span:
              line_start: 3
              line_stop: 5
              col_start: 25
              col_stop: 2
              path: compiler-test
              content: "function main() -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main() -> bool {\n...\n}"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main() -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main() -> bool {\\\"}\"}"
          input: []
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        CircuitMemberAccess:
                          circuit:
                            CircuitMemberAccess:
                              circuit:
                                Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.state.root == [0u8; 32];\\\"}\"}"
                              name: "{\"name\":\"state\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":18,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.state.root == [0u8; 32];\\\"}\"}"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 12
                                col_stop: 23
                                path: compiler-test
                                content: "    return input.state.root == [0u8; 32];"
                          name: "{\"name\":\"root\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":24,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.state.root == [0u8; 32];\\\"}\"}"
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 12
                            col_stop: 28
                            path: compiler-test
                            content: "    return input.state.root == [0u8; 32];"
                      right:
                        ArrayInit:
                          element:
                            Value:
                              Integer:
                                - U8
                                - "0"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 33
                                  col_stop: 36
                                  path: compiler-test
                                  content: "    return input.state.root == [0u8; 32];"
                          dimensions:
                            - value: "32"
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 32
                            col_stop: 41
                            path: compiler-test
                            content: "    return input.state.root == [0u8; 32];"
                      op: Eq
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 41
                        path: compiler-test
                        content: "    return input.state.root == [0u8; 32];"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 41
                    path: compiler-test
                    content: "    return input.state.root == [0u8; 32];"
            span:
              line_start: 3
              line_stop: 5
              col_start: 25
              col_stop: 2
              path: compiler-test
              content: "function main() -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main() -> bool {\n...\n}"
