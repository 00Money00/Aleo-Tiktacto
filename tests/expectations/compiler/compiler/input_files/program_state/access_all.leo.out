---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 527
      num_constraints: 527
      at: 7f6c7713392a44fa83a3fbffafd830d6e20356d72aff3d67f78c70ea5439a735
      bt: b21f2049f4ae8c11dff5de8b33d532f3ea7637bfdbd09395d056495472c1853a
      ct: 096693f8f4f40acd0e3f82bd256738e157f33989bcc68a7b8eabe44e8449bbb0
    output:
      - input_file: input/dummy.in
        output:
          registers:
            r0:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main() -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main() -> bool {\\\"}\"}"
          input: []
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"expected\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const expected: address = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 19
                        path: compiler-test
                        content: "    const expected: address = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
                  type_: Address
                  value:
                    Value:
                      Address:
                        - aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8
                        - line_start: 4
                          line_stop: 4
                          col_start: 31
                          col_stop: 94
                          path: compiler-test
                          content: "    const expected: address = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 94
                    path: compiler-test
                    content: "    const expected: address = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            CircuitMemberAccess:
                              circuit:
                                CircuitMemberAccess:
                                  circuit:
                                    Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.state.root == [0u8; 32] \\\"}\"}"
                                  name: "{\"name\":\"state\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":18,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.state.root == [0u8; 32] \\\"}\"}"
                                  span:
                                    line_start: 6
                                    line_stop: 6
                                    col_start: 12
                                    col_stop: 23
                                    path: compiler-test
                                    content: "    return input.state.root == [0u8; 32] "
                              name: "{\"name\":\"root\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":24,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.state.root == [0u8; 32] \\\"}\"}"
                              span:
                                line_start: 6
                                line_stop: 6
                                col_start: 12
                                col_stop: 28
                                path: compiler-test
                                content: "    return input.state.root == [0u8; 32] "
                          right:
                            ArrayInit:
                              element:
                                Value:
                                  Integer:
                                    - U8
                                    - "0"
                                    - line_start: 6
                                      line_stop: 6
                                      col_start: 33
                                      col_stop: 36
                                      path: compiler-test
                                      content: "    return input.state.root == [0u8; 32] "
                              dimensions:
                                - value: "32"
                              span:
                                line_start: 6
                                line_stop: 6
                                col_start: 32
                                col_stop: 41
                                path: compiler-test
                                content: "    return input.state.root == [0u8; 32] "
                          op: Eq
                          span:
                            line_start: 6
                            line_stop: 6
                            col_start: 12
                            col_stop: 41
                            path: compiler-test
                            content: "    return input.state.root == [0u8; 32] "
                      right:
                        Binary:
                          left:
                            CircuitMemberAccess:
                              circuit:
                                CircuitMemberAccess:
                                  circuit:
                                    Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state_leaf.network_id == 0u8;\\\"}\"}"
                                  name: "{\"name\":\"state_leaf\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":18,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state_leaf.network_id == 0u8;\\\"}\"}"
                                  span:
                                    line_start: 7
                                    line_stop: 7
                                    col_start: 12
                                    col_stop: 28
                                    path: compiler-test
                                    content: "        && input.state_leaf.network_id == 0u8;"
                              name: "{\"name\":\"network_id\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":29,\\\"col_stop\\\":39,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state_leaf.network_id == 0u8;\\\"}\"}"
                              span:
                                line_start: 7
                                line_stop: 7
                                col_start: 12
                                col_stop: 39
                                path: compiler-test
                                content: "        && input.state_leaf.network_id == 0u8;"
                          right:
                            Value:
                              Integer:
                                - U8
                                - "0"
                                - line_start: 7
                                  line_stop: 7
                                  col_start: 43
                                  col_stop: 46
                                  path: compiler-test
                                  content: "        && input.state_leaf.network_id == 0u8;"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 12
                            col_stop: 46
                            path: compiler-test
                            content: "        && input.state_leaf.network_id == 0u8;"
                      op: And
                      span:
                        line_start: 6
                        line_stop: 7
                        col_start: 12
                        col_stop: 46
                        path: compiler-test
                        content: "    return input.state.root == [0u8; 32] \n        && input.state_leaf.network_id == 0u8;"
                  span:
                    line_start: 6
                    line_stop: 7
                    col_start: 5
                    col_stop: 46
                    path: compiler-test
                    content: "    return input.state.root == [0u8; 32] \n        && input.state_leaf.network_id == 0u8;"
            span:
              line_start: 3
              line_stop: 8
              col_start: 25
              col_stop: 2
              path: compiler-test
              content: "function main() -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 8
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main() -> bool {\n...\n}\n\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main() -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main() -> bool {\\\"}\"}"
          input: []
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"expected\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const expected: address = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 19
                        path: compiler-test
                        content: "    const expected: address = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
                  type_: Address
                  value:
                    Value:
                      Address:
                        - aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8
                        - line_start: 4
                          line_stop: 4
                          col_start: 31
                          col_stop: 94
                          path: compiler-test
                          content: "    const expected: address = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 94
                    path: compiler-test
                    content: "    const expected: address = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            CircuitMemberAccess:
                              circuit:
                                CircuitMemberAccess:
                                  circuit:
                                    Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.state.root == [0u8; 32] \\\"}\"}"
                                  name: "{\"name\":\"state\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":18,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.state.root == [0u8; 32] \\\"}\"}"
                                  span:
                                    line_start: 6
                                    line_stop: 6
                                    col_start: 12
                                    col_stop: 23
                                    path: compiler-test
                                    content: "    return input.state.root == [0u8; 32] "
                              name: "{\"name\":\"root\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":24,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.state.root == [0u8; 32] \\\"}\"}"
                              span:
                                line_start: 6
                                line_stop: 6
                                col_start: 12
                                col_stop: 28
                                path: compiler-test
                                content: "    return input.state.root == [0u8; 32] "
                          right:
                            ArrayInit:
                              element:
                                Value:
                                  Integer:
                                    - U8
                                    - "0"
                                    - line_start: 6
                                      line_stop: 6
                                      col_start: 33
                                      col_stop: 36
                                      path: compiler-test
                                      content: "    return input.state.root == [0u8; 32] "
                              dimensions:
                                - value: "32"
                              span:
                                line_start: 6
                                line_stop: 6
                                col_start: 32
                                col_stop: 41
                                path: compiler-test
                                content: "    return input.state.root == [0u8; 32] "
                          op: Eq
                          span:
                            line_start: 6
                            line_stop: 6
                            col_start: 12
                            col_stop: 41
                            path: compiler-test
                            content: "    return input.state.root == [0u8; 32] "
                      right:
                        Binary:
                          left:
                            CircuitMemberAccess:
                              circuit:
                                CircuitMemberAccess:
                                  circuit:
                                    Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state_leaf.network_id == 0u8;\\\"}\"}"
                                  name: "{\"name\":\"state_leaf\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":18,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state_leaf.network_id == 0u8;\\\"}\"}"
                                  span:
                                    line_start: 7
                                    line_stop: 7
                                    col_start: 12
                                    col_stop: 28
                                    path: compiler-test
                                    content: "        && input.state_leaf.network_id == 0u8;"
                              name: "{\"name\":\"network_id\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":29,\\\"col_stop\\\":39,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state_leaf.network_id == 0u8;\\\"}\"}"
                              span:
                                line_start: 7
                                line_stop: 7
                                col_start: 12
                                col_stop: 39
                                path: compiler-test
                                content: "        && input.state_leaf.network_id == 0u8;"
                          right:
                            Value:
                              Integer:
                                - U8
                                - "0"
                                - line_start: 7
                                  line_stop: 7
                                  col_start: 43
                                  col_stop: 46
                                  path: compiler-test
                                  content: "        && input.state_leaf.network_id == 0u8;"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 12
                            col_stop: 46
                            path: compiler-test
                            content: "        && input.state_leaf.network_id == 0u8;"
                      op: And
                      span:
                        line_start: 6
                        line_stop: 7
                        col_start: 12
                        col_stop: 46
                        path: compiler-test
                        content: "    return input.state.root == [0u8; 32] \n        && input.state_leaf.network_id == 0u8;"
                  span:
                    line_start: 6
                    line_stop: 7
                    col_start: 5
                    col_stop: 46
                    path: compiler-test
                    content: "    return input.state.root == [0u8; 32] \n        && input.state_leaf.network_id == 0u8;"
            span:
              line_start: 3
              line_stop: 8
              col_start: 25
              col_stop: 2
              path: compiler-test
              content: "function main() -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 8
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main() -> bool {\n...\n}\n\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main() -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main() -> bool {\\\"}\"}"
          input: []
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"expected\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const expected: address = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 19
                        path: compiler-test
                        content: "    const expected: address = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
                  type_: Address
                  value:
                    Value:
                      Address:
                        - aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8
                        - line_start: 4
                          line_stop: 4
                          col_start: 31
                          col_stop: 94
                          path: compiler-test
                          content: "    const expected: address = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 94
                    path: compiler-test
                    content: "    const expected: address = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            CircuitMemberAccess:
                              circuit:
                                CircuitMemberAccess:
                                  circuit:
                                    Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.state.root == [0u8; 32] \\\"}\"}"
                                  name: "{\"name\":\"state\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":18,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.state.root == [0u8; 32] \\\"}\"}"
                                  span:
                                    line_start: 6
                                    line_stop: 6
                                    col_start: 12
                                    col_stop: 23
                                    path: compiler-test
                                    content: "    return input.state.root == [0u8; 32] "
                              name: "{\"name\":\"root\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":24,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.state.root == [0u8; 32] \\\"}\"}"
                              span:
                                line_start: 6
                                line_stop: 6
                                col_start: 12
                                col_stop: 28
                                path: compiler-test
                                content: "    return input.state.root == [0u8; 32] "
                          right:
                            ArrayInit:
                              element:
                                Value:
                                  Integer:
                                    - U8
                                    - "0"
                                    - line_start: 6
                                      line_stop: 6
                                      col_start: 33
                                      col_stop: 36
                                      path: compiler-test
                                      content: "    return input.state.root == [0u8; 32] "
                              dimensions:
                                - value: "32"
                              span:
                                line_start: 6
                                line_stop: 6
                                col_start: 32
                                col_stop: 41
                                path: compiler-test
                                content: "    return input.state.root == [0u8; 32] "
                          op: Eq
                          span:
                            line_start: 6
                            line_stop: 6
                            col_start: 12
                            col_stop: 41
                            path: compiler-test
                            content: "    return input.state.root == [0u8; 32] "
                      right:
                        Binary:
                          left:
                            CircuitMemberAccess:
                              circuit:
                                CircuitMemberAccess:
                                  circuit:
                                    Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state_leaf.network_id == 0u8;\\\"}\"}"
                                  name: "{\"name\":\"state_leaf\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":18,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state_leaf.network_id == 0u8;\\\"}\"}"
                                  span:
                                    line_start: 7
                                    line_stop: 7
                                    col_start: 12
                                    col_stop: 28
                                    path: compiler-test
                                    content: "        && input.state_leaf.network_id == 0u8;"
                              name: "{\"name\":\"network_id\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":29,\\\"col_stop\\\":39,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"        && input.state_leaf.network_id == 0u8;\\\"}\"}"
                              span:
                                line_start: 7
                                line_stop: 7
                                col_start: 12
                                col_stop: 39
                                path: compiler-test
                                content: "        && input.state_leaf.network_id == 0u8;"
                          right:
                            Value:
                              Integer:
                                - U8
                                - "0"
                                - line_start: 7
                                  line_stop: 7
                                  col_start: 43
                                  col_stop: 46
                                  path: compiler-test
                                  content: "        && input.state_leaf.network_id == 0u8;"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 12
                            col_stop: 46
                            path: compiler-test
                            content: "        && input.state_leaf.network_id == 0u8;"
                      op: And
                      span:
                        line_start: 6
                        line_stop: 7
                        col_start: 12
                        col_stop: 46
                        path: compiler-test
                        content: "    return input.state.root == [0u8; 32] \n        && input.state_leaf.network_id == 0u8;"
                  span:
                    line_start: 6
                    line_stop: 7
                    col_start: 5
                    col_stop: 46
                    path: compiler-test
                    content: "    return input.state.root == [0u8; 32] \n        && input.state_leaf.network_id == 0u8;"
            span:
              line_start: 3
              line_stop: 8
              col_start: 25
              col_stop: 2
              path: compiler-test
              content: "function main() -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 8
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main() -> bool {\n...\n}\n\n\n"
