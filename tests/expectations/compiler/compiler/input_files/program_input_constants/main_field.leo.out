---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 1
      num_constraints: 1
      at: 042610d0fd1fe6d6ac112138f8755752f44c7d2a00f1b5960574d6da5cda393f
      bt: e97756698880ab7555a959a5fb5c6b4e15bd64612aa677adbfe2d0bd91f0a83c
      ct: cf1cbb66a638b4860a516671fb74850e6ccf787fe6c4c8d29e9c04efe880bd05
    output:
      - input_file: input/main_field.in
        output:
          registers:
            r0:
              type: bool
              value: "false"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(const a: field, const b: field, y: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(const a: field, const b: field, y: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":21,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(const a: field, const b: field, y: bool) -> bool {\\\"}\"}"
                const_: true
                mutable: false
                type_: Field
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 21
                  col_stop: 22
                  path: compiler-test
                  content: "function main(const a: field, const b: field, y: bool) -> bool {"
            - Variable:
                identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":37,\\\"col_stop\\\":38,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(const a: field, const b: field, y: bool) -> bool {\\\"}\"}"
                const_: true
                mutable: false
                type_: Field
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 37
                  col_stop: 38
                  path: compiler-test
                  content: "function main(const a: field, const b: field, y: bool) -> bool {"
            - Variable:
                identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":47,\\\"col_stop\\\":48,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(const a: field, const b: field, y: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 47
                  col_stop: 48
                  path: compiler-test
                  content: "function main(const a: field, const b: field, y: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return y == true && a == b;\\\"}\"}"
                          right:
                            Value:
                              Boolean:
                                - "true"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 17
                                  col_stop: 21
                                  path: compiler-test
                                  content: "    return y == true && a == b;"
                          op: Eq
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 12
                            col_stop: 21
                            path: compiler-test
                            content: "    return y == true && a == b;"
                      right:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":25,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return y == true && a == b;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":30,\\\"col_stop\\\":31,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return y == true && a == b;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 25
                            col_stop: 31
                            path: compiler-test
                            content: "    return y == true && a == b;"
                      op: And
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 31
                        path: compiler-test
                        content: "    return y == true && a == b;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 31
                    path: compiler-test
                    content: "    return y == true && a == b;"
            span:
              line_start: 3
              line_stop: 5
              col_start: 64
              col_stop: 2
              path: compiler-test
              content: "function main(const a: field, const b: field, y: bool) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(const a: field, const b: field, y: bool) -> bool {\n...\n}"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(const a: field, const b: field, y: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(const a: field, const b: field, y: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":21,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(const a: field, const b: field, y: bool) -> bool {\\\"}\"}"
                const_: true
                mutable: false
                type_: Field
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 21
                  col_stop: 22
                  path: compiler-test
                  content: "function main(const a: field, const b: field, y: bool) -> bool {"
            - Variable:
                identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":37,\\\"col_stop\\\":38,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(const a: field, const b: field, y: bool) -> bool {\\\"}\"}"
                const_: true
                mutable: false
                type_: Field
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 37
                  col_stop: 38
                  path: compiler-test
                  content: "function main(const a: field, const b: field, y: bool) -> bool {"
            - Variable:
                identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":47,\\\"col_stop\\\":48,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(const a: field, const b: field, y: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 47
                  col_stop: 48
                  path: compiler-test
                  content: "function main(const a: field, const b: field, y: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return y == true && a == b;\\\"}\"}"
                          right:
                            Value:
                              Boolean:
                                - "true"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 17
                                  col_stop: 21
                                  path: compiler-test
                                  content: "    return y == true && a == b;"
                          op: Eq
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 12
                            col_stop: 21
                            path: compiler-test
                            content: "    return y == true && a == b;"
                      right:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":25,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return y == true && a == b;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":30,\\\"col_stop\\\":31,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return y == true && a == b;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 25
                            col_stop: 31
                            path: compiler-test
                            content: "    return y == true && a == b;"
                      op: And
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 31
                        path: compiler-test
                        content: "    return y == true && a == b;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 31
                    path: compiler-test
                    content: "    return y == true && a == b;"
            span:
              line_start: 3
              line_stop: 5
              col_start: 64
              col_stop: 2
              path: compiler-test
              content: "function main(const a: field, const b: field, y: bool) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(const a: field, const b: field, y: bool) -> bool {\n...\n}"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(const a: field, const b: field, y: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(const a: field, const b: field, y: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":21,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(const a: field, const b: field, y: bool) -> bool {\\\"}\"}"
                const_: true
                mutable: false
                type_: Field
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 21
                  col_stop: 22
                  path: compiler-test
                  content: "function main(const a: field, const b: field, y: bool) -> bool {"
            - Variable:
                identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":37,\\\"col_stop\\\":38,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(const a: field, const b: field, y: bool) -> bool {\\\"}\"}"
                const_: true
                mutable: false
                type_: Field
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 37
                  col_stop: 38
                  path: compiler-test
                  content: "function main(const a: field, const b: field, y: bool) -> bool {"
            - Variable:
                identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":47,\\\"col_stop\\\":48,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(const a: field, const b: field, y: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 47
                  col_stop: 48
                  path: compiler-test
                  content: "function main(const a: field, const b: field, y: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return y == true && a == b;\\\"}\"}"
                          right:
                            Value:
                              Boolean:
                                - "true"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 17
                                  col_stop: 21
                                  path: compiler-test
                                  content: "    return y == true && a == b;"
                          op: Eq
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 12
                            col_stop: 21
                            path: compiler-test
                            content: "    return y == true && a == b;"
                      right:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":25,\\\"col_stop\\\":26,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return y == true && a == b;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":30,\\\"col_stop\\\":31,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return y == true && a == b;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 25
                            col_stop: 31
                            path: compiler-test
                            content: "    return y == true && a == b;"
                      op: And
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 31
                        path: compiler-test
                        content: "    return y == true && a == b;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 31
                    path: compiler-test
                    content: "    return y == true && a == b;"
            span:
              line_start: 3
              line_stop: 5
              col_start: 64
              col_stop: 2
              path: compiler-test
              content: "function main(const a: field, const b: field, y: bool) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(const a: field, const b: field, y: bool) -> bool {\n...\n}"
