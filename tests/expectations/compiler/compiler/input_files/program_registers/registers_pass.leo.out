---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 17
      num_constraints: 18
      at: 54a6bab98206b1a92fff5ae07a6838e5ec25365afa7756a58b492f7a288c8654
      bt: 322eda19d0ceaeddbc296d56bce789cf038e440fd8fbd6e118606a4248844b2c
      ct: 748f424d53dc4319858b691a3c593aec6165ed4e67847b32285a436b9e2e7cc1
    output:
      - input_file: input/main.in
        output:
          registers:
            r:
              type: u8
              value: "101"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u8) -> u8 {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u8) -> u8 {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u8) -> u8 {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U8
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: u8) -> u8 {"
          output:
            IntegerType: U8
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Value:
                          Integer:
                            - U8
                            - "1"
                            - line_start: 4
                              line_stop: 4
                              col_start: 12
                              col_stop: 15
                              path: compiler-test
                              content: "    return 1u8 + a;"
                      right:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":18,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return 1u8 + a;\\\"}\"}"
                      op: Add
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 19
                        path: compiler-test
                        content: "    return 1u8 + a;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 19
                    path: compiler-test
                    content: "    return 1u8 + a;"
            span:
              line_start: 3
              line_stop: 5
              col_start: 28
              col_stop: 2
              path: compiler-test
              content: "function main(a: u8) -> u8 {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: u8) -> u8 {\n...\n}"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u8) -> u8 {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u8) -> u8 {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u8) -> u8 {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U8
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: u8) -> u8 {"
          output:
            IntegerType: U8
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Value:
                          Integer:
                            - U8
                            - "1"
                            - line_start: 4
                              line_stop: 4
                              col_start: 12
                              col_stop: 15
                              path: compiler-test
                              content: "    return 1u8 + a;"
                      right:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":18,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return 1u8 + a;\\\"}\"}"
                      op: Add
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 19
                        path: compiler-test
                        content: "    return 1u8 + a;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 19
                    path: compiler-test
                    content: "    return 1u8 + a;"
            span:
              line_start: 3
              line_stop: 5
              col_start: 28
              col_stop: 2
              path: compiler-test
              content: "function main(a: u8) -> u8 {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: u8) -> u8 {\n...\n}"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u8) -> u8 {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u8) -> u8 {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u8) -> u8 {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U8
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: u8) -> u8 {"
          output:
            IntegerType: U8
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Value:
                          Integer:
                            - U8
                            - "1"
                            - line_start: 4
                              line_stop: 4
                              col_start: 12
                              col_stop: 15
                              path: compiler-test
                              content: "    return 1u8 + a;"
                      right:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":18,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return 1u8 + a;\\\"}\"}"
                      op: Add
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 19
                        path: compiler-test
                        content: "    return 1u8 + a;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 19
                    path: compiler-test
                    content: "    return 1u8 + a;"
            span:
              line_start: 3
              line_stop: 5
              col_start: 28
              col_stop: 2
              path: compiler-test
              content: "function main(a: u8) -> u8 {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: u8) -> u8 {\n...\n}"
