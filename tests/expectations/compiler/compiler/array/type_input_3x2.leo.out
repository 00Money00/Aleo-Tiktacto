---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 95
      num_constraints: 95
      at: 5884e806c47756fa1d12f47e5cc5249843d8de4e2fafcb373c5a0d67dfe22d69
      bt: 983c734b40e342144d6b4d52e315da9ff9f97580f019f606403924bb977a5be7
      ct: 49f0db71bd29b80dbe5f2f96573a5959b1df339c92350e16f111bade214037aa
    output:
      - input_file: input/input_tuple_3x2.in
        output:
          registers:
            x:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [[u8; 2]; 3]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [[u8; 2]; 3]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [[u8; 2]; 3]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Array:
                        - IntegerType: U8
                        - - value: "2"
                    - - value: "3"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: [[u8; 2]; 3]) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                  type_: ~
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 17
                                          col_stop: 20
                                          path: compiler-test
                                          content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 22
                                          col_stop: 25
                                          path: compiler-test
                                          content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 16
                                col_stop: 26
                                path: compiler-test
                                content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 29
                                          col_stop: 32
                                          path: compiler-test
                                          content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 34
                                          col_stop: 37
                                          path: compiler-test
                                          content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 28
                                col_stop: 38
                                path: compiler-test
                                content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 41
                                          col_stop: 44
                                          path: compiler-test
                                          content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 46
                                          col_stop: 49
                                          path: compiler-test
                                          content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 40
                                col_stop: 50
                                path: compiler-test
                                content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 15
                        col_stop: 51
                        path: compiler-test
                        content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 51
                    path: compiler-test
                    content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b;\\\"}\"}"
                      right:
                        Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 12
                        col_stop: 18
                        path: compiler-test
                        content: "    return a == b;"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return a == b;"
            span:
              line_start: 3
              line_stop: 7
              col_start: 40
              col_stop: 2
              path: compiler-test
              content: "function main(a: [[u8; 2]; 3]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 7
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: [[u8; 2]; 3]) -> bool {\n...\n}\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [[u8; 2]; 3]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [[u8; 2]; 3]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [[u8; 2]; 3]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Array:
                        - IntegerType: U8
                        - - value: "2"
                    - - value: "3"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: [[u8; 2]; 3]) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                  type_: ~
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 17
                                          col_stop: 20
                                          path: compiler-test
                                          content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 22
                                          col_stop: 25
                                          path: compiler-test
                                          content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 16
                                col_stop: 26
                                path: compiler-test
                                content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 29
                                          col_stop: 32
                                          path: compiler-test
                                          content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 34
                                          col_stop: 37
                                          path: compiler-test
                                          content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 28
                                col_stop: 38
                                path: compiler-test
                                content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 41
                                          col_stop: 44
                                          path: compiler-test
                                          content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 46
                                          col_stop: 49
                                          path: compiler-test
                                          content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 40
                                col_stop: 50
                                path: compiler-test
                                content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 15
                        col_stop: 51
                        path: compiler-test
                        content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 51
                    path: compiler-test
                    content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b;\\\"}\"}"
                      right:
                        Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 12
                        col_stop: 18
                        path: compiler-test
                        content: "    return a == b;"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return a == b;"
            span:
              line_start: 3
              line_stop: 7
              col_start: 40
              col_stop: 2
              path: compiler-test
              content: "function main(a: [[u8; 2]; 3]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 7
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: [[u8; 2]; 3]) -> bool {\n...\n}\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [[u8; 2]; 3]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [[u8; 2]; 3]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [[u8; 2]; 3]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Array:
                        - IntegerType: U8
                        - - value: "2"
                    - - value: "3"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: [[u8; 2]; 3]) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                  type_:
                    Array:
                      - Array:
                          - IntegerType: U8
                          - - value: "2"
                      - - value: "3"
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 17
                                          col_stop: 20
                                          path: compiler-test
                                          content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 22
                                          col_stop: 25
                                          path: compiler-test
                                          content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 16
                                col_stop: 26
                                path: compiler-test
                                content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 29
                                          col_stop: 32
                                          path: compiler-test
                                          content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 34
                                          col_stop: 37
                                          path: compiler-test
                                          content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 28
                                col_stop: 38
                                path: compiler-test
                                content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 41
                                          col_stop: 44
                                          path: compiler-test
                                          content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 46
                                          col_stop: 49
                                          path: compiler-test
                                          content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 40
                                col_stop: 50
                                path: compiler-test
                                content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 15
                        col_stop: 51
                        path: compiler-test
                        content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 51
                    path: compiler-test
                    content: "    const b = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b;\\\"}\"}"
                      right:
                        Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 12
                        col_stop: 18
                        path: compiler-test
                        content: "    return a == b;"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return a == b;"
            span:
              line_start: 3
              line_stop: 7
              col_start: 40
              col_stop: 2
              path: compiler-test
              content: "function main(a: [[u8; 2]; 3]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 7
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: [[u8; 2]; 3]) -> bool {\n...\n}\n\n"
