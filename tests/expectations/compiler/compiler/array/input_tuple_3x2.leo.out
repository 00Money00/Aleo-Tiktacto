---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 95
      num_constraints: 95
      at: 5884e806c47756fa1d12f47e5cc5249843d8de4e2fafcb373c5a0d67dfe22d69
      bt: 983c734b40e342144d6b4d52e315da9ff9f97580f019f606403924bb977a5be7
      ct: 49f0db71bd29b80dbe5f2f96573a5959b1df339c92350e16f111bade214037aa
    output:
      - input_file: input/input_tuple_3x2.in
        output:
          registers:
            x:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; (3, 2)]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; (3, 2)]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; (3, 2)]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - IntegerType: U8
                    - - value: "3"
                      - value: "2"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: [u8; (3, 2)]) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == [0u8; (3, 2)];\\\"}\"}"
                      right:
                        ArrayInit:
                          element:
                            Value:
                              Integer:
                                - U8
                                - "0"
                                - line_start: 4
                                  line_stop: 4
                                  col_start: 18
                                  col_stop: 21
                                  path: compiler-test
                                  content: "    return a == [0u8; (3, 2)];"
                          dimensions:
                            - value: "3"
                            - value: "2"
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 17
                            col_stop: 30
                            path: compiler-test
                            content: "    return a == [0u8; (3, 2)];"
                      op: Eq
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 30
                        path: compiler-test
                        content: "    return a == [0u8; (3, 2)];"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 30
                    path: compiler-test
                    content: "    return a == [0u8; (3, 2)];"
            span:
              line_start: 3
              line_stop: 5
              col_start: 40
              col_stop: 2
              path: compiler-test
              content: "function main(a: [u8; (3, 2)]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: [u8; (3, 2)]) -> bool {\n...\n}"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; (3, 2)]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; (3, 2)]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; (3, 2)]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Array:
                        - IntegerType: U8
                        - - value: "2"
                    - - value: "3"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: [u8; (3, 2)]) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == [0u8; (3, 2)];\\\"}\"}"
                      right:
                        ArrayInit:
                          element:
                            ArrayInit:
                              element:
                                Value:
                                  Integer:
                                    - U8
                                    - "0"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 18
                                      col_stop: 21
                                      path: compiler-test
                                      content: "    return a == [0u8; (3, 2)];"
                              dimensions:
                                - value: "2"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 17
                                col_stop: 30
                                path: compiler-test
                                content: "    return a == [0u8; (3, 2)];"
                          dimensions:
                            - value: "3"
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 17
                            col_stop: 30
                            path: compiler-test
                            content: "    return a == [0u8; (3, 2)];"
                      op: Eq
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 30
                        path: compiler-test
                        content: "    return a == [0u8; (3, 2)];"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 30
                    path: compiler-test
                    content: "    return a == [0u8; (3, 2)];"
            span:
              line_start: 3
              line_stop: 5
              col_start: 40
              col_stop: 2
              path: compiler-test
              content: "function main(a: [u8; (3, 2)]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: [u8; (3, 2)]) -> bool {\n...\n}"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; (3, 2)]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; (3, 2)]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; (3, 2)]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Array:
                        - IntegerType: U8
                        - - value: "2"
                    - - value: "3"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: [u8; (3, 2)]) -> bool {"
          output: Boolean
          block:
            statements:
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == [0u8; (3, 2)];\\\"}\"}"
                      right:
                        ArrayInit:
                          element:
                            ArrayInit:
                              element:
                                Value:
                                  Integer:
                                    - U8
                                    - "0"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 18
                                      col_stop: 21
                                      path: compiler-test
                                      content: "    return a == [0u8; (3, 2)];"
                              dimensions:
                                - value: "2"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 17
                                col_stop: 30
                                path: compiler-test
                                content: "    return a == [0u8; (3, 2)];"
                          dimensions:
                            - value: "3"
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 17
                            col_stop: 30
                            path: compiler-test
                            content: "    return a == [0u8; (3, 2)];"
                      op: Eq
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 30
                        path: compiler-test
                        content: "    return a == [0u8; (3, 2)];"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 30
                    path: compiler-test
                    content: "    return a == [0u8; (3, 2)];"
            span:
              line_start: 3
              line_stop: 5
              col_start: 40
              col_stop: 2
              path: compiler-test
              content: "function main(a: [u8; (3, 2)]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: [u8; (3, 2)]) -> bool {\n...\n}"
