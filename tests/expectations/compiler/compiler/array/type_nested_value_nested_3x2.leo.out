---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 143
      num_constraints: 143
      at: f09e0b896fb2cb30fe4bbcf791b4695de26287361de6def1e75e861643d12714
      bt: f97a8f270a0603d5674319afa5e572f5f146f02a36f9387f860a6cf1f8a786cc
      ct: 88cc1bad895de526a15b231e1fe8065848e8008bda5e2662f7c9eec9a976ff98
    output:
      - input_file: input/type_nested_value_nested_3x2.in
        output:
          registers:
            x:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [[u8; 2]; 3]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [[u8; 2]; 3]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [[u8; 2]; 3]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Array:
                        - IntegerType: U8
                        - - value: "2"
                    - - value: "3"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: [[u8; 2]; 3]) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"c\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                  type_: ~
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 17
                                          col_stop: 20
                                          path: compiler-test
                                          content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 22
                                          col_stop: 25
                                          path: compiler-test
                                          content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 16
                                col_stop: 26
                                path: compiler-test
                                content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 29
                                          col_stop: 32
                                          path: compiler-test
                                          content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 34
                                          col_stop: 37
                                          path: compiler-test
                                          content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 28
                                col_stop: 38
                                path: compiler-test
                                content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 41
                                          col_stop: 44
                                          path: compiler-test
                                          content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 46
                                          col_stop: 49
                                          path: compiler-test
                                          content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 40
                                col_stop: 50
                                path: compiler-test
                                content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 15
                        col_stop: 51
                        path: compiler-test
                        content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 51
                    path: compiler-test
                    content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const b: [[u8; 2]; 3] = [[0; 2]; 3]; // initializer\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const b: [[u8; 2]; 3] = [[0; 2]; 3]; // initializer"
                  type_:
                    Array:
                      - Array:
                          - IntegerType: U8
                          - - value: "2"
                      - - value: "3"
                  value:
                    ArrayInit:
                      element:
                        ArrayInit:
                          element:
                            Value:
                              Implicit:
                                - "0"
                                - line_start: 5
                                  line_stop: 5
                                  col_start: 31
                                  col_stop: 32
                                  path: compiler-test
                                  content: "    const b: [[u8; 2]; 3] = [[0; 2]; 3]; // initializer"
                          dimensions:
                            - value: "2"
                          span:
                            line_start: 5
                            line_stop: 5
                            col_start: 30
                            col_stop: 36
                            path: compiler-test
                            content: "    const b: [[u8; 2]; 3] = [[0; 2]; 3]; // initializer"
                      dimensions:
                        - value: "3"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 29
                        col_stop: 40
                        path: compiler-test
                        content: "    const b: [[u8; 2]; 3] = [[0; 2]; 3]; // initializer"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 40
                    path: compiler-test
                    content: "    const b: [[u8; 2]; 3] = [[0; 2]; 3]; // initializer"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return b == a && a == c;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return b == a && a == c;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 12
                            col_stop: 18
                            path: compiler-test
                            content: "    return b == a && a == c;"
                      right:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":22,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return b == a && a == c;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"c\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":27,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return b == a && a == c;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 22
                            col_stop: 28
                            path: compiler-test
                            content: "    return b == a && a == c;"
                      op: And
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 12
                        col_stop: 28
                        path: compiler-test
                        content: "    return b == a && a == c;"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 28
                    path: compiler-test
                    content: "    return b == a && a == c;"
            span:
              line_start: 3
              line_stop: 8
              col_start: 40
              col_stop: 2
              path: compiler-test
              content: "function main(a: [[u8; 2]; 3]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 8
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: [[u8; 2]; 3]) -> bool {\n...\n}\n\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [[u8; 2]; 3]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [[u8; 2]; 3]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [[u8; 2]; 3]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Array:
                        - IntegerType: U8
                        - - value: "2"
                    - - value: "3"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: [[u8; 2]; 3]) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"c\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                  type_: ~
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 17
                                          col_stop: 20
                                          path: compiler-test
                                          content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 22
                                          col_stop: 25
                                          path: compiler-test
                                          content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 16
                                col_stop: 26
                                path: compiler-test
                                content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 29
                                          col_stop: 32
                                          path: compiler-test
                                          content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 34
                                          col_stop: 37
                                          path: compiler-test
                                          content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 28
                                col_stop: 38
                                path: compiler-test
                                content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 41
                                          col_stop: 44
                                          path: compiler-test
                                          content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 46
                                          col_stop: 49
                                          path: compiler-test
                                          content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 40
                                col_stop: 50
                                path: compiler-test
                                content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 15
                        col_stop: 51
                        path: compiler-test
                        content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 51
                    path: compiler-test
                    content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const b: [[u8; 2]; 3] = [[0; 2]; 3]; // initializer\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const b: [[u8; 2]; 3] = [[0; 2]; 3]; // initializer"
                  type_:
                    Array:
                      - Array:
                          - IntegerType: U8
                          - - value: "2"
                      - - value: "3"
                  value:
                    ArrayInit:
                      element:
                        ArrayInit:
                          element:
                            Value:
                              Implicit:
                                - "0"
                                - line_start: 5
                                  line_stop: 5
                                  col_start: 31
                                  col_stop: 32
                                  path: compiler-test
                                  content: "    const b: [[u8; 2]; 3] = [[0; 2]; 3]; // initializer"
                          dimensions:
                            - value: "2"
                          span:
                            line_start: 5
                            line_stop: 5
                            col_start: 30
                            col_stop: 36
                            path: compiler-test
                            content: "    const b: [[u8; 2]; 3] = [[0; 2]; 3]; // initializer"
                      dimensions:
                        - value: "3"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 29
                        col_stop: 40
                        path: compiler-test
                        content: "    const b: [[u8; 2]; 3] = [[0; 2]; 3]; // initializer"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 40
                    path: compiler-test
                    content: "    const b: [[u8; 2]; 3] = [[0; 2]; 3]; // initializer"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return b == a && a == c;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return b == a && a == c;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 12
                            col_stop: 18
                            path: compiler-test
                            content: "    return b == a && a == c;"
                      right:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":22,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return b == a && a == c;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"c\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":27,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return b == a && a == c;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 22
                            col_stop: 28
                            path: compiler-test
                            content: "    return b == a && a == c;"
                      op: And
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 12
                        col_stop: 28
                        path: compiler-test
                        content: "    return b == a && a == c;"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 28
                    path: compiler-test
                    content: "    return b == a && a == c;"
            span:
              line_start: 3
              line_stop: 8
              col_start: 40
              col_stop: 2
              path: compiler-test
              content: "function main(a: [[u8; 2]; 3]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 8
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: [[u8; 2]; 3]) -> bool {\n...\n}\n\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [[u8; 2]; 3]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [[u8; 2]; 3]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [[u8; 2]; 3]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - Array:
                        - IntegerType: U8
                        - - value: "2"
                    - - value: "3"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: [[u8; 2]; 3]) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"c\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                  type_:
                    Array:
                      - Array:
                          - IntegerType: U8
                          - - value: "2"
                      - - value: "3"
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 17
                                          col_stop: 20
                                          path: compiler-test
                                          content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 22
                                          col_stop: 25
                                          path: compiler-test
                                          content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 16
                                col_stop: 26
                                path: compiler-test
                                content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 29
                                          col_stop: 32
                                          path: compiler-test
                                          content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 34
                                          col_stop: 37
                                          path: compiler-test
                                          content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 28
                                col_stop: 38
                                path: compiler-test
                                content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 41
                                          col_stop: 44
                                          path: compiler-test
                                          content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 46
                                          col_stop: 49
                                          path: compiler-test
                                          content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 40
                                col_stop: 50
                                path: compiler-test
                                content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 15
                        col_stop: 51
                        path: compiler-test
                        content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 51
                    path: compiler-test
                    content: "    const c = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const b: [[u8; 2]; 3] = [[0; 2]; 3]; // initializer\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const b: [[u8; 2]; 3] = [[0; 2]; 3]; // initializer"
                  type_:
                    Array:
                      - Array:
                          - IntegerType: U8
                          - - value: "2"
                      - - value: "3"
                  value:
                    ArrayInit:
                      element:
                        ArrayInit:
                          element:
                            Value:
                              Integer:
                                - U8
                                - "0"
                                - line_start: 5
                                  line_stop: 5
                                  col_start: 31
                                  col_stop: 32
                                  path: compiler-test
                                  content: "    const b: [[u8; 2]; 3] = [[0; 2]; 3]; // initializer"
                          dimensions:
                            - value: "2"
                          span:
                            line_start: 5
                            line_stop: 5
                            col_start: 30
                            col_stop: 36
                            path: compiler-test
                            content: "    const b: [[u8; 2]; 3] = [[0; 2]; 3]; // initializer"
                      dimensions:
                        - value: "3"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 29
                        col_stop: 40
                        path: compiler-test
                        content: "    const b: [[u8; 2]; 3] = [[0; 2]; 3]; // initializer"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 40
                    path: compiler-test
                    content: "    const b: [[u8; 2]; 3] = [[0; 2]; 3]; // initializer"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return b == a && a == c;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return b == a && a == c;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 12
                            col_stop: 18
                            path: compiler-test
                            content: "    return b == a && a == c;"
                      right:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":22,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return b == a && a == c;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"c\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":27,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return b == a && a == c;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 22
                            col_stop: 28
                            path: compiler-test
                            content: "    return b == a && a == c;"
                      op: And
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 12
                        col_stop: 28
                        path: compiler-test
                        content: "    return b == a && a == c;"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 28
                    path: compiler-test
                    content: "    return b == a && a == c;"
            span:
              line_start: 3
              line_stop: 8
              col_start: 40
              col_stop: 2
              path: compiler-test
              content: "function main(a: [[u8; 2]; 3]) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 8
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: [[u8; 2]; 3]) -> bool {\n...\n}\n\n\n"
