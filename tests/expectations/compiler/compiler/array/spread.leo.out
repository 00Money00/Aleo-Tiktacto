---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 71
      num_constraints: 71
      at: a08e2e54701e419ba564483a59fb3f6cc30614b8a7c903f9ff6f4b85e63da5c6
      bt: 65113b6e5dc0f7d88f04b7e60a519801a313d2e9d4129db502ccef0dfdb14988
      ct: 7a28ca50094ed4577eef8066cf1a814affa63139e6cc3d7ccf8d65c69499de60
    output:
      - input_file: input/three_ones.in
        output:
          registers:
            x:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; 3]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; 3]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; 3]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - IntegerType: U8
                    - - value: "3"
                span:
                  line_start: 4
                  line_stop: 4
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: [u8; 3]) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const b = [1u8, 1u8];\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const b = [1u8, 1u8];"
                  type_: ~
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            Value:
                              Integer:
                                - U8
                                - "1"
                                - line_start: 5
                                  line_stop: 5
                                  col_start: 16
                                  col_stop: 19
                                  path: compiler-test
                                  content: "    const b = [1u8, 1u8];"
                        - Expression:
                            Value:
                              Integer:
                                - U8
                                - "1"
                                - line_start: 5
                                  line_stop: 5
                                  col_start: 21
                                  col_stop: 24
                                  path: compiler-test
                                  content: "    const b = [1u8, 1u8];"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 15
                        col_stop: 25
                        path: compiler-test
                        content: "    const b = [1u8, 1u8];"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 25
                    path: compiler-test
                    content: "    const b = [1u8, 1u8];"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"c\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const c = [1u8, ...b];\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const c = [1u8, ...b];"
                  type_: ~
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            Value:
                              Integer:
                                - U8
                                - "1"
                                - line_start: 6
                                  line_stop: 6
                                  col_start: 16
                                  col_stop: 19
                                  path: compiler-test
                                  content: "    const c = [1u8, ...b];"
                        - Spread:
                            Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":24,\\\"col_stop\\\":25,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const c = [1u8, ...b];\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 15
                        col_stop: 26
                        path: compiler-test
                        content: "    const c = [1u8, ...b];"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 26
                    path: compiler-test
                    content: "    const c = [1u8, ...b];"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"d\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const d = [...b, 1u8];\\\"}\"}"
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const d = [...b, 1u8];"
                  type_: ~
                  value:
                    ArrayInline:
                      elements:
                        - Spread:
                            Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":19,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const d = [...b, 1u8];\\\"}\"}"
                        - Expression:
                            Value:
                              Integer:
                                - U8
                                - "1"
                                - line_start: 7
                                  line_stop: 7
                                  col_start: 22
                                  col_stop: 25
                                  path: compiler-test
                                  content: "    const d = [...b, 1u8];"
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 15
                        col_stop: 26
                        path: compiler-test
                        content: "    const d = [...b, 1u8];"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 26
                    path: compiler-test
                    content: "    const d = [...b, 1u8];"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == c && d == a;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"c\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == c && d == a;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 9
                            line_stop: 9
                            col_start: 12
                            col_stop: 18
                            path: compiler-test
                            content: "    return a == c && d == a;"
                      right:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"d\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":22,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == c && d == a;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":27,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == c && d == a;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 9
                            line_stop: 9
                            col_start: 22
                            col_stop: 28
                            path: compiler-test
                            content: "    return a == c && d == a;"
                      op: And
                      span:
                        line_start: 9
                        line_stop: 9
                        col_start: 12
                        col_stop: 28
                        path: compiler-test
                        content: "    return a == c && d == a;"
                  span:
                    line_start: 9
                    line_stop: 9
                    col_start: 5
                    col_stop: 28
                    path: compiler-test
                    content: "    return a == c && d == a;"
            span:
              line_start: 4
              line_stop: 10
              col_start: 35
              col_stop: 2
              path: compiler-test
              content: "function main(a: [u8; 3]) -> bool {\n...\n}"
          span:
            line_start: 4
            line_stop: 10
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: [u8; 3]) -> bool {\n...\n}\n\n\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; 3]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; 3]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; 3]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - IntegerType: U8
                    - - value: "3"
                span:
                  line_start: 4
                  line_stop: 4
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: [u8; 3]) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const b = [1u8, 1u8];\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const b = [1u8, 1u8];"
                  type_: ~
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            Value:
                              Integer:
                                - U8
                                - "1"
                                - line_start: 5
                                  line_stop: 5
                                  col_start: 16
                                  col_stop: 19
                                  path: compiler-test
                                  content: "    const b = [1u8, 1u8];"
                        - Expression:
                            Value:
                              Integer:
                                - U8
                                - "1"
                                - line_start: 5
                                  line_stop: 5
                                  col_start: 21
                                  col_stop: 24
                                  path: compiler-test
                                  content: "    const b = [1u8, 1u8];"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 15
                        col_stop: 25
                        path: compiler-test
                        content: "    const b = [1u8, 1u8];"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 25
                    path: compiler-test
                    content: "    const b = [1u8, 1u8];"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"c\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const c = [1u8, ...b];\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const c = [1u8, ...b];"
                  type_: ~
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            Value:
                              Integer:
                                - U8
                                - "1"
                                - line_start: 6
                                  line_stop: 6
                                  col_start: 16
                                  col_stop: 19
                                  path: compiler-test
                                  content: "    const c = [1u8, ...b];"
                        - Spread:
                            Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":24,\\\"col_stop\\\":25,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const c = [1u8, ...b];\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 15
                        col_stop: 26
                        path: compiler-test
                        content: "    const c = [1u8, ...b];"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 26
                    path: compiler-test
                    content: "    const c = [1u8, ...b];"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"d\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const d = [...b, 1u8];\\\"}\"}"
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const d = [...b, 1u8];"
                  type_: ~
                  value:
                    ArrayInline:
                      elements:
                        - Spread:
                            Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":19,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const d = [...b, 1u8];\\\"}\"}"
                        - Expression:
                            Value:
                              Integer:
                                - U8
                                - "1"
                                - line_start: 7
                                  line_stop: 7
                                  col_start: 22
                                  col_stop: 25
                                  path: compiler-test
                                  content: "    const d = [...b, 1u8];"
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 15
                        col_stop: 26
                        path: compiler-test
                        content: "    const d = [...b, 1u8];"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 26
                    path: compiler-test
                    content: "    const d = [...b, 1u8];"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == c && d == a;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"c\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == c && d == a;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 9
                            line_stop: 9
                            col_start: 12
                            col_stop: 18
                            path: compiler-test
                            content: "    return a == c && d == a;"
                      right:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"d\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":22,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == c && d == a;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":27,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == c && d == a;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 9
                            line_stop: 9
                            col_start: 22
                            col_stop: 28
                            path: compiler-test
                            content: "    return a == c && d == a;"
                      op: And
                      span:
                        line_start: 9
                        line_stop: 9
                        col_start: 12
                        col_stop: 28
                        path: compiler-test
                        content: "    return a == c && d == a;"
                  span:
                    line_start: 9
                    line_stop: 9
                    col_start: 5
                    col_stop: 28
                    path: compiler-test
                    content: "    return a == c && d == a;"
            span:
              line_start: 4
              line_stop: 10
              col_start: 35
              col_stop: 2
              path: compiler-test
              content: "function main(a: [u8; 3]) -> bool {\n...\n}"
          span:
            line_start: 4
            line_stop: 10
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: [u8; 3]) -> bool {\n...\n}\n\n\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; 3]) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; 3]) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; 3]) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - IntegerType: U8
                    - - value: "3"
                span:
                  line_start: 4
                  line_stop: 4
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: [u8; 3]) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const b = [1u8, 1u8];\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const b = [1u8, 1u8];"
                  type_:
                    Array:
                      - IntegerType: U8
                      - - value: "2"
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            Value:
                              Integer:
                                - U8
                                - "1"
                                - line_start: 5
                                  line_stop: 5
                                  col_start: 16
                                  col_stop: 19
                                  path: compiler-test
                                  content: "    const b = [1u8, 1u8];"
                        - Expression:
                            Value:
                              Integer:
                                - U8
                                - "1"
                                - line_start: 5
                                  line_stop: 5
                                  col_start: 21
                                  col_stop: 24
                                  path: compiler-test
                                  content: "    const b = [1u8, 1u8];"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 15
                        col_stop: 25
                        path: compiler-test
                        content: "    const b = [1u8, 1u8];"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 25
                    path: compiler-test
                    content: "    const b = [1u8, 1u8];"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"c\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const c = [1u8, ...b];\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const c = [1u8, ...b];"
                  type_:
                    Array:
                      - IntegerType: U8
                      - - value: "3"
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            Value:
                              Integer:
                                - U8
                                - "1"
                                - line_start: 6
                                  line_stop: 6
                                  col_start: 16
                                  col_stop: 19
                                  path: compiler-test
                                  content: "    const c = [1u8, ...b];"
                        - Spread:
                            Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":24,\\\"col_stop\\\":25,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const c = [1u8, ...b];\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 15
                        col_stop: 26
                        path: compiler-test
                        content: "    const c = [1u8, ...b];"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 26
                    path: compiler-test
                    content: "    const c = [1u8, ...b];"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"d\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const d = [...b, 1u8];\\\"}\"}"
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const d = [...b, 1u8];"
                  type_:
                    Array:
                      - IntegerType: U8
                      - - value: "3"
                  value:
                    ArrayInline:
                      elements:
                        - Spread:
                            Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":19,\\\"col_stop\\\":20,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const d = [...b, 1u8];\\\"}\"}"
                        - Expression:
                            Value:
                              Integer:
                                - U8
                                - "1"
                                - line_start: 7
                                  line_stop: 7
                                  col_start: 22
                                  col_stop: 25
                                  path: compiler-test
                                  content: "    const d = [...b, 1u8];"
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 15
                        col_stop: 26
                        path: compiler-test
                        content: "    const d = [...b, 1u8];"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 26
                    path: compiler-test
                    content: "    const d = [...b, 1u8];"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == c && d == a;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"c\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == c && d == a;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 9
                            line_stop: 9
                            col_start: 12
                            col_stop: 18
                            path: compiler-test
                            content: "    return a == c && d == a;"
                      right:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"d\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":22,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == c && d == a;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":9,\\\"line_stop\\\":9,\\\"col_start\\\":27,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == c && d == a;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 9
                            line_stop: 9
                            col_start: 22
                            col_stop: 28
                            path: compiler-test
                            content: "    return a == c && d == a;"
                      op: And
                      span:
                        line_start: 9
                        line_stop: 9
                        col_start: 12
                        col_stop: 28
                        path: compiler-test
                        content: "    return a == c && d == a;"
                  span:
                    line_start: 9
                    line_stop: 9
                    col_start: 5
                    col_stop: 28
                    path: compiler-test
                    content: "    return a == c && d == a;"
            span:
              line_start: 4
              line_stop: 10
              col_start: 35
              col_stop: 2
              path: compiler-test
              content: "function main(a: [u8; 3]) -> bool {\n...\n}"
          span:
            line_start: 4
            line_stop: 10
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: [u8; 3]) -> bool {\n...\n}\n\n\n\n"
