---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 119
      num_constraints: 143
      at: 144d1bd1f6756ac172ddddf3ca5cf4358ba8fc053fd754b56a425ab6566af47a
      bt: 43972815ec9d0ab821613fde2cd6a5df9ee42f50758a27a0fed6dc111b44f3ee
      ct: 5ed7a755b881aa851f3d3e966a4bd18dd48ce59be71b4ada39c9c891f8297201
    output:
      - input_file: input/registers_ones.in
        output:
          registers:
            r:
              type: "[u8; 3]"
              value: "\"321\""
      - input_file: input/registers_zeros.in
        output:
          registers:
            r:
              type: "[u8; 3]"
              value: "\"123\""
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; 3]) -> [u8; 3] {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; 3]) -> [u8; 3] {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; 3]) -> [u8; 3] {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - IntegerType: U8
                    - - value: "3"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: [u8; 3]) -> [u8; 3] {"
          output:
            Array:
              - IntegerType: U8
              - - value: "3"
          block:
            statements:
              - Return:
                  expression:
                    Ternary:
                      condition:
                        Binary:
                          left:
                            CircuitMemberAccess:
                              circuit:
                                CircuitMemberAccess:
                                  circuit:
                                    Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.r == a ? [3,2,1] : [1,2,3];\\\"}\"}"
                                  name: "{\"name\":\"registers\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":18,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.r == a ? [3,2,1] : [1,2,3];\\\"}\"}"
                                  span:
                                    line_start: 4
                                    line_stop: 4
                                    col_start: 12
                                    col_stop: 27
                                    path: compiler-test
                                    content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                              name: "{\"name\":\"r\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":28,\\\"col_stop\\\":29,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.r == a ? [3,2,1] : [1,2,3];\\\"}\"}"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 12
                                col_stop: 29
                                path: compiler-test
                                content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                          right:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":33,\\\"col_stop\\\":34,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.r == a ? [3,2,1] : [1,2,3];\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 12
                            col_stop: 34
                            path: compiler-test
                            content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                      if_true:
                        ArrayInline:
                          elements:
                            - Expression:
                                Value:
                                  Implicit:
                                    - "3"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 38
                                      col_stop: 39
                                      path: compiler-test
                                      content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                            - Expression:
                                Value:
                                  Implicit:
                                    - "2"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 40
                                      col_stop: 41
                                      path: compiler-test
                                      content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                            - Expression:
                                Value:
                                  Implicit:
                                    - "1"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 42
                                      col_stop: 43
                                      path: compiler-test
                                      content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 37
                            col_stop: 44
                            path: compiler-test
                            content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                      if_false:
                        ArrayInline:
                          elements:
                            - Expression:
                                Value:
                                  Implicit:
                                    - "1"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 48
                                      col_stop: 49
                                      path: compiler-test
                                      content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                            - Expression:
                                Value:
                                  Implicit:
                                    - "2"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 50
                                      col_stop: 51
                                      path: compiler-test
                                      content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                            - Expression:
                                Value:
                                  Implicit:
                                    - "3"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 52
                                      col_stop: 53
                                      path: compiler-test
                                      content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 47
                            col_stop: 54
                            path: compiler-test
                            content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 54
                        path: compiler-test
                        content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 54
                    path: compiler-test
                    content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
            span:
              line_start: 3
              line_stop: 5
              col_start: 38
              col_stop: 2
              path: compiler-test
              content: "function main(a: [u8; 3]) -> [u8; 3] {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: [u8; 3]) -> [u8; 3] {\n...\n}"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; 3]) -> [u8; 3] {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; 3]) -> [u8; 3] {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; 3]) -> [u8; 3] {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - IntegerType: U8
                    - - value: "3"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: [u8; 3]) -> [u8; 3] {"
          output:
            Array:
              - IntegerType: U8
              - - value: "3"
          block:
            statements:
              - Return:
                  expression:
                    Ternary:
                      condition:
                        Binary:
                          left:
                            CircuitMemberAccess:
                              circuit:
                                CircuitMemberAccess:
                                  circuit:
                                    Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.r == a ? [3,2,1] : [1,2,3];\\\"}\"}"
                                  name: "{\"name\":\"registers\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":18,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.r == a ? [3,2,1] : [1,2,3];\\\"}\"}"
                                  span:
                                    line_start: 4
                                    line_stop: 4
                                    col_start: 12
                                    col_stop: 27
                                    path: compiler-test
                                    content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                              name: "{\"name\":\"r\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":28,\\\"col_stop\\\":29,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.r == a ? [3,2,1] : [1,2,3];\\\"}\"}"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 12
                                col_stop: 29
                                path: compiler-test
                                content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                          right:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":33,\\\"col_stop\\\":34,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.r == a ? [3,2,1] : [1,2,3];\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 12
                            col_stop: 34
                            path: compiler-test
                            content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                      if_true:
                        ArrayInline:
                          elements:
                            - Expression:
                                Value:
                                  Implicit:
                                    - "3"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 38
                                      col_stop: 39
                                      path: compiler-test
                                      content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                            - Expression:
                                Value:
                                  Implicit:
                                    - "2"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 40
                                      col_stop: 41
                                      path: compiler-test
                                      content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                            - Expression:
                                Value:
                                  Implicit:
                                    - "1"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 42
                                      col_stop: 43
                                      path: compiler-test
                                      content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 37
                            col_stop: 44
                            path: compiler-test
                            content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                      if_false:
                        ArrayInline:
                          elements:
                            - Expression:
                                Value:
                                  Implicit:
                                    - "1"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 48
                                      col_stop: 49
                                      path: compiler-test
                                      content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                            - Expression:
                                Value:
                                  Implicit:
                                    - "2"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 50
                                      col_stop: 51
                                      path: compiler-test
                                      content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                            - Expression:
                                Value:
                                  Implicit:
                                    - "3"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 52
                                      col_stop: 53
                                      path: compiler-test
                                      content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 47
                            col_stop: 54
                            path: compiler-test
                            content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 54
                        path: compiler-test
                        content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 54
                    path: compiler-test
                    content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
            span:
              line_start: 3
              line_stop: 5
              col_start: 38
              col_stop: 2
              path: compiler-test
              content: "function main(a: [u8; 3]) -> [u8; 3] {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: [u8; 3]) -> [u8; 3] {\n...\n}"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; 3]) -> [u8; 3] {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; 3]) -> [u8; 3] {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: [u8; 3]) -> [u8; 3] {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Array:
                    - IntegerType: U8
                    - - value: "3"
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: [u8; 3]) -> [u8; 3] {"
          output:
            Array:
              - IntegerType: U8
              - - value: "3"
          block:
            statements:
              - Return:
                  expression:
                    Ternary:
                      condition:
                        Binary:
                          left:
                            CircuitMemberAccess:
                              circuit:
                                CircuitMemberAccess:
                                  circuit:
                                    Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.r == a ? [3,2,1] : [1,2,3];\\\"}\"}"
                                  name: "{\"name\":\"registers\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":18,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.r == a ? [3,2,1] : [1,2,3];\\\"}\"}"
                                  span:
                                    line_start: 4
                                    line_stop: 4
                                    col_start: 12
                                    col_stop: 27
                                    path: compiler-test
                                    content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                              name: "{\"name\":\"r\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":28,\\\"col_stop\\\":29,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.r == a ? [3,2,1] : [1,2,3];\\\"}\"}"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 12
                                col_stop: 29
                                path: compiler-test
                                content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                          right:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":33,\\\"col_stop\\\":34,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return input.registers.r == a ? [3,2,1] : [1,2,3];\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 12
                            col_stop: 34
                            path: compiler-test
                            content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                      if_true:
                        ArrayInline:
                          elements:
                            - Expression:
                                Value:
                                  Integer:
                                    - U8
                                    - "3"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 38
                                      col_stop: 39
                                      path: compiler-test
                                      content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                            - Expression:
                                Value:
                                  Integer:
                                    - U8
                                    - "2"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 40
                                      col_stop: 41
                                      path: compiler-test
                                      content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                            - Expression:
                                Value:
                                  Integer:
                                    - U8
                                    - "1"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 42
                                      col_stop: 43
                                      path: compiler-test
                                      content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 37
                            col_stop: 44
                            path: compiler-test
                            content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                      if_false:
                        ArrayInline:
                          elements:
                            - Expression:
                                Value:
                                  Integer:
                                    - U8
                                    - "1"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 48
                                      col_stop: 49
                                      path: compiler-test
                                      content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                            - Expression:
                                Value:
                                  Integer:
                                    - U8
                                    - "2"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 50
                                      col_stop: 51
                                      path: compiler-test
                                      content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                            - Expression:
                                Value:
                                  Integer:
                                    - U8
                                    - "3"
                                    - line_start: 4
                                      line_stop: 4
                                      col_start: 52
                                      col_stop: 53
                                      path: compiler-test
                                      content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 47
                            col_stop: 54
                            path: compiler-test
                            content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 54
                        path: compiler-test
                        content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 54
                    path: compiler-test
                    content: "    return input.registers.r == a ? [3,2,1] : [1,2,3];"
            span:
              line_start: 3
              line_stop: 5
              col_start: 38
              col_stop: 2
              path: compiler-test
              content: "function main(a: [u8; 3]) -> [u8; 3] {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: [u8; 3]) -> [u8; 3] {\n...\n}"
