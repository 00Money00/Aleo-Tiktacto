---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 1
      num_constraints: 1
      at: 042610d0fd1fe6d6ac112138f8755752f44c7d2a00f1b5960574d6da5cda393f
      bt: e97756698880ab7555a959a5fb5c6b4e15bd64612aa677adbfe2d0bd91f0a83c
      ct: cf1cbb66a638b4860a516671fb74850e6ccf787fe6c4c8d29e9c04efe880bd05
    output:
      - input_file: input/dummy.in
        output:
          registers:
            r0:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(y: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                  type_: ~
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 17
                                          col_stop: 20
                                          path: compiler-test
                                          content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 22
                                          col_stop: 25
                                          path: compiler-test
                                          content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 16
                                col_stop: 26
                                path: compiler-test
                                content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 29
                                          col_stop: 32
                                          path: compiler-test
                                          content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 34
                                          col_stop: 37
                                          path: compiler-test
                                          content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 28
                                col_stop: 38
                                path: compiler-test
                                content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 41
                                          col_stop: 44
                                          path: compiler-test
                                          content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 46
                                          col_stop: 49
                                          path: compiler-test
                                          content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 40
                                col_stop: 50
                                path: compiler-test
                                content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 15
                        col_stop: 51
                        path: compiler-test
                        content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 51
                    path: compiler-test
                    content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const b: [u8; (3, 2)] = [[0; 2]; 3]; // initializer\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const b: [u8; (3, 2)] = [[0; 2]; 3]; // initializer"
                  type_:
                    Array:
                      - IntegerType: U8
                      - - value: "3"
                        - value: "2"
                  value:
                    ArrayInit:
                      element:
                        ArrayInit:
                          element:
                            Value:
                              Implicit:
                                - "0"
                                - line_start: 6
                                  line_stop: 6
                                  col_start: 31
                                  col_stop: 32
                                  path: compiler-test
                                  content: "    const b: [u8; (3, 2)] = [[0; 2]; 3]; // initializer"
                          dimensions:
                            - value: "2"
                          span:
                            line_start: 6
                            line_stop: 6
                            col_start: 30
                            col_stop: 36
                            path: compiler-test
                            content: "    const b: [u8; (3, 2)] = [[0; 2]; 3]; // initializer"
                      dimensions:
                        - value: "3"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 29
                        col_stop: 40
                        path: compiler-test
                        content: "    const b: [u8; (3, 2)] = [[0; 2]; 3]; // initializer"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 40
                    path: compiler-test
                    content: "    const b: [u8; (3, 2)] = [[0; 2]; 3]; // initializer"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b == y;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b == y;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 8
                            line_stop: 8
                            col_start: 12
                            col_stop: 18
                            path: compiler-test
                            content: "    return a == b == y;"
                      right:
                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":22,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b == y;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 12
                        col_stop: 23
                        path: compiler-test
                        content: "    return a == b == y;"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    return a == b == y;"
            span:
              line_start: 3
              line_stop: 9
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(y: bool) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(y: bool) -> bool {\n...\n}\n\n\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(y: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                  type_: ~
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 17
                                          col_stop: 20
                                          path: compiler-test
                                          content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 22
                                          col_stop: 25
                                          path: compiler-test
                                          content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 16
                                col_stop: 26
                                path: compiler-test
                                content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 29
                                          col_stop: 32
                                          path: compiler-test
                                          content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 34
                                          col_stop: 37
                                          path: compiler-test
                                          content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 28
                                col_stop: 38
                                path: compiler-test
                                content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 41
                                          col_stop: 44
                                          path: compiler-test
                                          content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 46
                                          col_stop: 49
                                          path: compiler-test
                                          content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 40
                                col_stop: 50
                                path: compiler-test
                                content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 15
                        col_stop: 51
                        path: compiler-test
                        content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 51
                    path: compiler-test
                    content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const b: [u8; (3, 2)] = [[0; 2]; 3]; // initializer\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const b: [u8; (3, 2)] = [[0; 2]; 3]; // initializer"
                  type_:
                    Array:
                      - Array:
                          - IntegerType: U8
                          - - value: "2"
                      - - value: "3"
                  value:
                    ArrayInit:
                      element:
                        ArrayInit:
                          element:
                            Value:
                              Implicit:
                                - "0"
                                - line_start: 6
                                  line_stop: 6
                                  col_start: 31
                                  col_stop: 32
                                  path: compiler-test
                                  content: "    const b: [u8; (3, 2)] = [[0; 2]; 3]; // initializer"
                          dimensions:
                            - value: "2"
                          span:
                            line_start: 6
                            line_stop: 6
                            col_start: 30
                            col_stop: 36
                            path: compiler-test
                            content: "    const b: [u8; (3, 2)] = [[0; 2]; 3]; // initializer"
                      dimensions:
                        - value: "3"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 29
                        col_stop: 40
                        path: compiler-test
                        content: "    const b: [u8; (3, 2)] = [[0; 2]; 3]; // initializer"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 40
                    path: compiler-test
                    content: "    const b: [u8; (3, 2)] = [[0; 2]; 3]; // initializer"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b == y;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b == y;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 8
                            line_stop: 8
                            col_start: 12
                            col_stop: 18
                            path: compiler-test
                            content: "    return a == b == y;"
                      right:
                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":22,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b == y;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 12
                        col_stop: 23
                        path: compiler-test
                        content: "    return a == b == y;"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    return a == b == y;"
            span:
              line_start: 3
              line_stop: 9
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(y: bool) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(y: bool) -> bool {\n...\n}\n\n\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(y: bool) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Boolean
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(y: bool) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                  type_:
                    Array:
                      - Array:
                          - IntegerType: U8
                          - - value: "2"
                      - - value: "3"
                  value:
                    ArrayInline:
                      elements:
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 17
                                          col_stop: 20
                                          path: compiler-test
                                          content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 22
                                          col_stop: 25
                                          path: compiler-test
                                          content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 16
                                col_stop: 26
                                path: compiler-test
                                content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 29
                                          col_stop: 32
                                          path: compiler-test
                                          content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 34
                                          col_stop: 37
                                          path: compiler-test
                                          content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 28
                                col_stop: 38
                                path: compiler-test
                                content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                        - Expression:
                            ArrayInline:
                              elements:
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 41
                                          col_stop: 44
                                          path: compiler-test
                                          content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                                - Expression:
                                    Value:
                                      Integer:
                                        - U8
                                        - "0"
                                        - line_start: 4
                                          line_stop: 4
                                          col_start: 46
                                          col_stop: 49
                                          path: compiler-test
                                          content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                              span:
                                line_start: 4
                                line_stop: 4
                                col_start: 40
                                col_stop: 50
                                path: compiler-test
                                content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 15
                        col_stop: 51
                        path: compiler-test
                        content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 51
                    path: compiler-test
                    content: "    const a = [[0u8, 0u8], [0u8, 0u8], [0u8, 0u8]]; // inline"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const b: [u8; (3, 2)] = [[0; 2]; 3]; // initializer\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const b: [u8; (3, 2)] = [[0; 2]; 3]; // initializer"
                  type_:
                    Array:
                      - Array:
                          - IntegerType: U8
                          - - value: "2"
                      - - value: "3"
                  value:
                    ArrayInit:
                      element:
                        ArrayInit:
                          element:
                            Value:
                              Integer:
                                - U8
                                - "0"
                                - line_start: 6
                                  line_stop: 6
                                  col_start: 31
                                  col_stop: 32
                                  path: compiler-test
                                  content: "    const b: [u8; (3, 2)] = [[0; 2]; 3]; // initializer"
                          dimensions:
                            - value: "2"
                          span:
                            line_start: 6
                            line_stop: 6
                            col_start: 30
                            col_stop: 36
                            path: compiler-test
                            content: "    const b: [u8; (3, 2)] = [[0; 2]; 3]; // initializer"
                      dimensions:
                        - value: "3"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 29
                        col_stop: 40
                        path: compiler-test
                        content: "    const b: [u8; (3, 2)] = [[0; 2]; 3]; // initializer"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 40
                    path: compiler-test
                    content: "    const b: [u8; (3, 2)] = [[0; 2]; 3]; // initializer"
              - Return:
                  expression:
                    Binary:
                      left:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b == y;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b == y;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 8
                            line_stop: 8
                            col_start: 12
                            col_stop: 18
                            path: compiler-test
                            content: "    return a == b == y;"
                      right:
                        Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":22,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return a == b == y;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 12
                        col_stop: 23
                        path: compiler-test
                        content: "    return a == b == y;"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    return a == b == y;"
            span:
              line_start: 3
              line_stop: 9
              col_start: 32
              col_stop: 2
              path: compiler-test
              content: "function main(y: bool) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(y: bool) -> bool {\n...\n}\n\n\n\n"
