---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 2
      num_constraints: 2
      at: 401937c524c61a28b4fab76d7a1f85bb628850012af62362a0922610372faf92
      bt: cdf9a9cee4f2edf55111a95ae60bde9801080f6bde638a5c79273a39a2f9f7f5
      ct: 643d5437104296e21d906ecb15b2c96ad278f20cfc4af53b12bb6069bd853726
    output:
      - input_file: input/dummy.in
        output:
          registers:
            r0:
              type: bool
              value: "true"
            r1:
              type: bool
              value: "true"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main() -> (bool, bool) {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main() -> (bool, bool) {\\\"}\"}"
          input: []
          output:
            Tuple:
              - Boolean
              - Boolean
          block:
            statements:
              - Return:
                  expression:
                    TupleInit:
                      elements:
                        - CircuitMemberAccess:
                            circuit:
                              CircuitMemberAccess:
                                circuit:
                                  Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":13,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (input.registers.r0, input.registers.r1);\\\"}\"}"
                                name: "{\"name\":\"registers\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":19,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (input.registers.r0, input.registers.r1);\\\"}\"}"
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 13
                                  col_stop: 28
                                  path: compiler-test
                                  content: "    return (input.registers.r0, input.registers.r1);"
                            name: "{\"name\":\"r0\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":29,\\\"col_stop\\\":31,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (input.registers.r0, input.registers.r1);\\\"}\"}"
                            span:
                              line_start: 4
                              line_stop: 4
                              col_start: 13
                              col_stop: 31
                              path: compiler-test
                              content: "    return (input.registers.r0, input.registers.r1);"
                        - CircuitMemberAccess:
                            circuit:
                              CircuitMemberAccess:
                                circuit:
                                  Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":33,\\\"col_stop\\\":38,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (input.registers.r0, input.registers.r1);\\\"}\"}"
                                name: "{\"name\":\"registers\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":39,\\\"col_stop\\\":48,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (input.registers.r0, input.registers.r1);\\\"}\"}"
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 33
                                  col_stop: 48
                                  path: compiler-test
                                  content: "    return (input.registers.r0, input.registers.r1);"
                            name: "{\"name\":\"r1\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":49,\\\"col_stop\\\":51,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (input.registers.r0, input.registers.r1);\\\"}\"}"
                            span:
                              line_start: 4
                              line_stop: 4
                              col_start: 33
                              col_stop: 51
                              path: compiler-test
                              content: "    return (input.registers.r0, input.registers.r1);"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 52
                        path: compiler-test
                        content: "    return (input.registers.r0, input.registers.r1);"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 52
                    path: compiler-test
                    content: "    return (input.registers.r0, input.registers.r1);"
            span:
              line_start: 3
              line_stop: 5
              col_start: 33
              col_stop: 2
              path: compiler-test
              content: "function main() -> (bool, bool) {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main() -> (bool, bool) {\n...\n}"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main() -> (bool, bool) {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main() -> (bool, bool) {\\\"}\"}"
          input: []
          output:
            Tuple:
              - Boolean
              - Boolean
          block:
            statements:
              - Return:
                  expression:
                    TupleInit:
                      elements:
                        - CircuitMemberAccess:
                            circuit:
                              CircuitMemberAccess:
                                circuit:
                                  Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":13,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (input.registers.r0, input.registers.r1);\\\"}\"}"
                                name: "{\"name\":\"registers\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":19,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (input.registers.r0, input.registers.r1);\\\"}\"}"
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 13
                                  col_stop: 28
                                  path: compiler-test
                                  content: "    return (input.registers.r0, input.registers.r1);"
                            name: "{\"name\":\"r0\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":29,\\\"col_stop\\\":31,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (input.registers.r0, input.registers.r1);\\\"}\"}"
                            span:
                              line_start: 4
                              line_stop: 4
                              col_start: 13
                              col_stop: 31
                              path: compiler-test
                              content: "    return (input.registers.r0, input.registers.r1);"
                        - CircuitMemberAccess:
                            circuit:
                              CircuitMemberAccess:
                                circuit:
                                  Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":33,\\\"col_stop\\\":38,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (input.registers.r0, input.registers.r1);\\\"}\"}"
                                name: "{\"name\":\"registers\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":39,\\\"col_stop\\\":48,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (input.registers.r0, input.registers.r1);\\\"}\"}"
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 33
                                  col_stop: 48
                                  path: compiler-test
                                  content: "    return (input.registers.r0, input.registers.r1);"
                            name: "{\"name\":\"r1\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":49,\\\"col_stop\\\":51,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (input.registers.r0, input.registers.r1);\\\"}\"}"
                            span:
                              line_start: 4
                              line_stop: 4
                              col_start: 33
                              col_stop: 51
                              path: compiler-test
                              content: "    return (input.registers.r0, input.registers.r1);"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 52
                        path: compiler-test
                        content: "    return (input.registers.r0, input.registers.r1);"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 52
                    path: compiler-test
                    content: "    return (input.registers.r0, input.registers.r1);"
            span:
              line_start: 3
              line_stop: 5
              col_start: 33
              col_stop: 2
              path: compiler-test
              content: "function main() -> (bool, bool) {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main() -> (bool, bool) {\n...\n}"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main() -> (bool, bool) {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main() -> (bool, bool) {\\\"}\"}"
          input: []
          output:
            Tuple:
              - Boolean
              - Boolean
          block:
            statements:
              - Return:
                  expression:
                    TupleInit:
                      elements:
                        - CircuitMemberAccess:
                            circuit:
                              CircuitMemberAccess:
                                circuit:
                                  Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":13,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (input.registers.r0, input.registers.r1);\\\"}\"}"
                                name: "{\"name\":\"registers\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":19,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (input.registers.r0, input.registers.r1);\\\"}\"}"
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 13
                                  col_stop: 28
                                  path: compiler-test
                                  content: "    return (input.registers.r0, input.registers.r1);"
                            name: "{\"name\":\"r0\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":29,\\\"col_stop\\\":31,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (input.registers.r0, input.registers.r1);\\\"}\"}"
                            span:
                              line_start: 4
                              line_stop: 4
                              col_start: 13
                              col_stop: 31
                              path: compiler-test
                              content: "    return (input.registers.r0, input.registers.r1);"
                        - CircuitMemberAccess:
                            circuit:
                              CircuitMemberAccess:
                                circuit:
                                  Identifier: "{\"name\":\"input\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":33,\\\"col_stop\\\":38,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (input.registers.r0, input.registers.r1);\\\"}\"}"
                                name: "{\"name\":\"registers\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":39,\\\"col_stop\\\":48,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (input.registers.r0, input.registers.r1);\\\"}\"}"
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 33
                                  col_stop: 48
                                  path: compiler-test
                                  content: "    return (input.registers.r0, input.registers.r1);"
                            name: "{\"name\":\"r1\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":49,\\\"col_stop\\\":51,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (input.registers.r0, input.registers.r1);\\\"}\"}"
                            span:
                              line_start: 4
                              line_stop: 4
                              col_start: 33
                              col_stop: 51
                              path: compiler-test
                              content: "    return (input.registers.r0, input.registers.r1);"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 52
                        path: compiler-test
                        content: "    return (input.registers.r0, input.registers.r1);"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 52
                    path: compiler-test
                    content: "    return (input.registers.r0, input.registers.r1);"
            span:
              line_start: 3
              line_stop: 5
              col_start: 33
              col_stop: 2
              path: compiler-test
              content: "function main() -> (bool, bool) {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main() -> (bool, bool) {\n...\n}"
