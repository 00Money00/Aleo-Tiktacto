---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 65
      num_constraints: 66
      at: 0c8cb242ee3815f5ea6fdd08873577a6cc51fcfbda8cb5671f0b4dc851939d07
      bt: 32bbce55a7ed95a5b0277ef5ddfa171ad065c5c7c743031d8b0bd8e50e51b0af
      ct: 1390f763c4329cb5c51853b83d8d5d6e92d8ea8fed8fc7299285908d14c9d3b4
    output:
      - input_file: tuple.in
        output:
          registers:
            r0:
              type: "(u8, u8)"
              value: "(1, 2)"
            r1:
              type: u32
              value: "103"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"tuples\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function tuples() -> ((u8, u8), u32) {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"tuples\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function tuples() -> ((u8, u8), u32) {\\\"}\"}"
          input: []
          output:
            Tuple:
              - Tuple:
                  - IntegerType: U8
                  - IntegerType: U8
              - IntegerType: U32
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const a: (u8, u8) = (1, 2);\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const a: (u8, u8) = (1, 2);"
                  type_:
                    Tuple:
                      - IntegerType: U8
                      - IntegerType: U8
                  value:
                    TupleInit:
                      elements:
                        - Value:
                            Implicit:
                              - "1"
                              - line_start: 5
                                line_stop: 5
                                col_start: 26
                                col_stop: 27
                                path: compiler-test
                                content: "    const a: (u8, u8) = (1, 2);"
                        - Value:
                            Implicit:
                              - "2"
                              - line_start: 5
                                line_stop: 5
                                col_start: 29
                                col_stop: 30
                                path: compiler-test
                                content: "    const a: (u8, u8) = (1, 2);"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 25
                        col_stop: 31
                        path: compiler-test
                        content: "    const a: (u8, u8) = (1, 2);"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 31
                    path: compiler-test
                    content: "    const a: (u8, u8) = (1, 2);"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const b: u32 = 3;\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const b: u32 = 3;"
                  type_:
                    IntegerType: U32
                  value:
                    Value:
                      Implicit:
                        - "3"
                        - line_start: 6
                          line_stop: 6
                          col_start: 20
                          col_stop: 21
                          path: compiler-test
                          content: "    const b: u32 = 3;"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 21
                    path: compiler-test
                    content: "    const b: u32 = 3;"
              - Return:
                  expression:
                    TupleInit:
                      elements:
                        - Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (a, b);\\\"}\"}"
                        - Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":16,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (a, b);\\\"}\"}"
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 12
                        col_stop: 18
                        path: compiler-test
                        content: "    return (a, b);"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return (a, b);"
            span:
              line_start: 4
              line_stop: 9
              col_start: 38
              col_stop: 2
              path: compiler-test
              content: "function tuples() -> ((u8, u8), u32) {\n...\n}"
          span:
            line_start: 4
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function tuples() -> ((u8, u8), u32) {\n...\n}\n\n\n"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> ((u8, u8), u32) {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> ((u8, u8), u32) {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> ((u8, u8), u32) {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 11
                  line_stop: 11
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: u32) -> ((u8, u8), u32) {"
          output:
            Tuple:
              - Tuple:
                  - IntegerType: U8
                  - IntegerType: U8
              - IntegerType: U32
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"t1\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":12,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const (t1, b) = tuples();\\\"}\"}"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 12
                        col_stop: 14
                        path: compiler-test
                        content: "    const (t1, b) = tuples();"
                    - mutable: false
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":16,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const (t1, b) = tuples();\\\"}\"}"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 16
                        col_stop: 17
                        path: compiler-test
                        content: "    const (t1, b) = tuples();"
                  type_: ~
                  value:
                    Call:
                      function:
                        Identifier: "{\"name\":\"tuples\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":21,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const (t1, b) = tuples();\\\"}\"}"
                      arguments: []
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 21
                        col_stop: 29
                        path: compiler-test
                        content: "    const (t1, b) = tuples();"
                  span:
                    line_start: 12
                    line_stop: 12
                    col_start: 5
                    col_stop: 29
                    path: compiler-test
                    content: "    const (t1, b) = tuples();"
              - Return:
                  expression:
                    TupleInit:
                      elements:
                        - Identifier: "{\"name\":\"t1\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":13,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (t1, a + b);\\\"}\"}"
                        - Binary:
                            left:
                              Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (t1, a + b);\\\"}\"}"
                            right:
                              Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":21,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (t1, a + b);\\\"}\"}"
                            op: Add
                            span:
                              line_start: 13
                              line_stop: 13
                              col_start: 17
                              col_stop: 22
                              path: compiler-test
                              content: "    return (t1, a + b);"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 12
                        col_stop: 23
                        path: compiler-test
                        content: "    return (t1, a + b);"
                  span:
                    line_start: 13
                    line_stop: 13
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    return (t1, a + b);"
            span:
              line_start: 11
              line_stop: 14
              col_start: 42
              col_stop: 2
              path: compiler-test
              content: "function main(a: u32) -> ((u8, u8), u32) {\n...\n}"
          span:
            line_start: 11
            line_stop: 14
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: u32) -> ((u8, u8), u32) {\n...\n}\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"tuples\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function tuples() -> ((u8, u8), u32) {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"tuples\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function tuples() -> ((u8, u8), u32) {\\\"}\"}"
          input: []
          output:
            Tuple:
              - Tuple:
                  - IntegerType: U8
                  - IntegerType: U8
              - IntegerType: U32
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const a: (u8, u8) = (1, 2);\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const a: (u8, u8) = (1, 2);"
                  type_:
                    Tuple:
                      - IntegerType: U8
                      - IntegerType: U8
                  value:
                    TupleInit:
                      elements:
                        - Value:
                            Implicit:
                              - "1"
                              - line_start: 5
                                line_stop: 5
                                col_start: 26
                                col_stop: 27
                                path: compiler-test
                                content: "    const a: (u8, u8) = (1, 2);"
                        - Value:
                            Implicit:
                              - "2"
                              - line_start: 5
                                line_stop: 5
                                col_start: 29
                                col_stop: 30
                                path: compiler-test
                                content: "    const a: (u8, u8) = (1, 2);"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 25
                        col_stop: 31
                        path: compiler-test
                        content: "    const a: (u8, u8) = (1, 2);"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 31
                    path: compiler-test
                    content: "    const a: (u8, u8) = (1, 2);"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const b: u32 = 3;\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const b: u32 = 3;"
                  type_:
                    IntegerType: U32
                  value:
                    Value:
                      Implicit:
                        - "3"
                        - line_start: 6
                          line_stop: 6
                          col_start: 20
                          col_stop: 21
                          path: compiler-test
                          content: "    const b: u32 = 3;"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 21
                    path: compiler-test
                    content: "    const b: u32 = 3;"
              - Return:
                  expression:
                    TupleInit:
                      elements:
                        - Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (a, b);\\\"}\"}"
                        - Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":16,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (a, b);\\\"}\"}"
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 12
                        col_stop: 18
                        path: compiler-test
                        content: "    return (a, b);"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return (a, b);"
            span:
              line_start: 4
              line_stop: 9
              col_start: 38
              col_stop: 2
              path: compiler-test
              content: "function tuples() -> ((u8, u8), u32) {\n...\n}"
          span:
            line_start: 4
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function tuples() -> ((u8, u8), u32) {\n...\n}\n\n\n"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> ((u8, u8), u32) {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> ((u8, u8), u32) {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> ((u8, u8), u32) {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 11
                  line_stop: 11
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: u32) -> ((u8, u8), u32) {"
          output:
            Tuple:
              - Tuple:
                  - IntegerType: U8
                  - IntegerType: U8
              - IntegerType: U32
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"t1\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":12,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const (t1, b) = tuples();\\\"}\"}"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 12
                        col_stop: 14
                        path: compiler-test
                        content: "    const (t1, b) = tuples();"
                    - mutable: false
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":16,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const (t1, b) = tuples();\\\"}\"}"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 16
                        col_stop: 17
                        path: compiler-test
                        content: "    const (t1, b) = tuples();"
                  type_: ~
                  value:
                    Call:
                      function:
                        Identifier: "{\"name\":\"tuples\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":21,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const (t1, b) = tuples();\\\"}\"}"
                      arguments: []
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 21
                        col_stop: 29
                        path: compiler-test
                        content: "    const (t1, b) = tuples();"
                  span:
                    line_start: 12
                    line_stop: 12
                    col_start: 5
                    col_stop: 29
                    path: compiler-test
                    content: "    const (t1, b) = tuples();"
              - Return:
                  expression:
                    TupleInit:
                      elements:
                        - Identifier: "{\"name\":\"t1\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":13,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (t1, a + b);\\\"}\"}"
                        - Binary:
                            left:
                              Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (t1, a + b);\\\"}\"}"
                            right:
                              Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":21,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (t1, a + b);\\\"}\"}"
                            op: Add
                            span:
                              line_start: 13
                              line_stop: 13
                              col_start: 17
                              col_stop: 22
                              path: compiler-test
                              content: "    return (t1, a + b);"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 12
                        col_stop: 23
                        path: compiler-test
                        content: "    return (t1, a + b);"
                  span:
                    line_start: 13
                    line_stop: 13
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    return (t1, a + b);"
            span:
              line_start: 11
              line_stop: 14
              col_start: 42
              col_stop: 2
              path: compiler-test
              content: "function main(a: u32) -> ((u8, u8), u32) {\n...\n}"
          span:
            line_start: 11
            line_stop: 14
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: u32) -> ((u8, u8), u32) {\n...\n}\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"tuples\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function tuples() -> ((u8, u8), u32) {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"tuples\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function tuples() -> ((u8, u8), u32) {\\\"}\"}"
          input: []
          output:
            Tuple:
              - Tuple:
                  - IntegerType: U8
                  - IntegerType: U8
              - IntegerType: U32
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const a: (u8, u8) = (1, 2);\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const a: (u8, u8) = (1, 2);"
                  type_:
                    Tuple:
                      - IntegerType: U8
                      - IntegerType: U8
                  value:
                    TupleInit:
                      elements:
                        - Value:
                            Integer:
                              - U8
                              - "1"
                              - line_start: 5
                                line_stop: 5
                                col_start: 26
                                col_stop: 27
                                path: compiler-test
                                content: "    const a: (u8, u8) = (1, 2);"
                        - Value:
                            Integer:
                              - U8
                              - "2"
                              - line_start: 5
                                line_stop: 5
                                col_start: 29
                                col_stop: 30
                                path: compiler-test
                                content: "    const a: (u8, u8) = (1, 2);"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 25
                        col_stop: 31
                        path: compiler-test
                        content: "    const a: (u8, u8) = (1, 2);"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 31
                    path: compiler-test
                    content: "    const a: (u8, u8) = (1, 2);"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":11,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const b: u32 = 3;\\\"}\"}"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 11
                        col_stop: 12
                        path: compiler-test
                        content: "    const b: u32 = 3;"
                  type_:
                    IntegerType: U32
                  value:
                    Value:
                      Integer:
                        - U32
                        - "3"
                        - line_start: 6
                          line_stop: 6
                          col_start: 20
                          col_stop: 21
                          path: compiler-test
                          content: "    const b: u32 = 3;"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 21
                    path: compiler-test
                    content: "    const b: u32 = 3;"
              - Return:
                  expression:
                    TupleInit:
                      elements:
                        - Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (a, b);\\\"}\"}"
                        - Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":8,\\\"line_stop\\\":8,\\\"col_start\\\":16,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (a, b);\\\"}\"}"
                      span:
                        line_start: 8
                        line_stop: 8
                        col_start: 12
                        col_stop: 18
                        path: compiler-test
                        content: "    return (a, b);"
                  span:
                    line_start: 8
                    line_stop: 8
                    col_start: 5
                    col_stop: 18
                    path: compiler-test
                    content: "    return (a, b);"
            span:
              line_start: 4
              line_stop: 9
              col_start: 38
              col_stop: 2
              path: compiler-test
              content: "function tuples() -> ((u8, u8), u32) {\n...\n}"
          span:
            line_start: 4
            line_stop: 9
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function tuples() -> ((u8, u8), u32) {\n...\n}\n\n\n"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> ((u8, u8), u32) {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> ((u8, u8), u32) {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":11,\\\"line_stop\\\":11,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32) -> ((u8, u8), u32) {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 11
                  line_stop: 11
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: u32) -> ((u8, u8), u32) {"
          output:
            Tuple:
              - Tuple:
                  - IntegerType: U8
                  - IntegerType: U8
              - IntegerType: U32
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"t1\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":12,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const (t1, b) = tuples();\\\"}\"}"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 12
                        col_stop: 14
                        path: compiler-test
                        content: "    const (t1, b) = tuples();"
                    - mutable: false
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":16,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const (t1, b) = tuples();\\\"}\"}"
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 16
                        col_stop: 17
                        path: compiler-test
                        content: "    const (t1, b) = tuples();"
                  type_:
                    Tuple:
                      - Tuple:
                          - IntegerType: U8
                          - IntegerType: U8
                      - IntegerType: U32
                  value:
                    Call:
                      function:
                        Identifier: "{\"name\":\"tuples\",\"span\":\"{\\\"line_start\\\":12,\\\"line_stop\\\":12,\\\"col_start\\\":21,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const (t1, b) = tuples();\\\"}\"}"
                      arguments: []
                      span:
                        line_start: 12
                        line_stop: 12
                        col_start: 21
                        col_stop: 29
                        path: compiler-test
                        content: "    const (t1, b) = tuples();"
                  span:
                    line_start: 12
                    line_stop: 12
                    col_start: 5
                    col_stop: 29
                    path: compiler-test
                    content: "    const (t1, b) = tuples();"
              - Return:
                  expression:
                    TupleInit:
                      elements:
                        - Identifier: "{\"name\":\"t1\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":13,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (t1, a + b);\\\"}\"}"
                        - Binary:
                            left:
                              Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":17,\\\"col_stop\\\":18,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (t1, a + b);\\\"}\"}"
                            right:
                              Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":13,\\\"line_stop\\\":13,\\\"col_start\\\":21,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (t1, a + b);\\\"}\"}"
                            op: Add
                            span:
                              line_start: 13
                              line_stop: 13
                              col_start: 17
                              col_stop: 22
                              path: compiler-test
                              content: "    return (t1, a + b);"
                      span:
                        line_start: 13
                        line_stop: 13
                        col_start: 12
                        col_stop: 23
                        path: compiler-test
                        content: "    return (t1, a + b);"
                  span:
                    line_start: 13
                    line_stop: 13
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    return (t1, a + b);"
            span:
              line_start: 11
              line_stop: 14
              col_start: 42
              col_stop: 2
              path: compiler-test
              content: "function main(a: u32) -> ((u8, u8), u32) {\n...\n}"
          span:
            line_start: 11
            line_stop: 14
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: u32) -> ((u8, u8), u32) {\n...\n}\n"
