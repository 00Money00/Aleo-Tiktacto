---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 130
      num_constraints: 132
      at: 7836d2e1325fb4703563ba9378382f72310a39dff412635938abf6aa59e3e316
      bt: ba2c8bf85cf2734ed977cbe9aa29422a1e6f91a3ac9384a66de46152c5a0dae9
      ct: d3a10973b5ff8e5b494994d909dc9de72e93f8a9d2de5fd5fca1cd3a4a9e1e77
    output:
      - input_file: input/integers.in
        output:
          registers:
            a:
              type: u32
              value: "1"
            b:
              type: u32
              value: "1"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"tuple_conditional\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function tuple_conditional () -> (\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"tuple_conditional\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function tuple_conditional () -> (\\\"}\"}"
          input: []
          output:
            Tuple:
              - IntegerType: U32
              - IntegerType: U32
          block:
            statements:
              - Conditional:
                  condition:
                    Value:
                      Boolean:
                        - "true"
                        - line_start: 8
                          line_stop: 8
                          col_start: 8
                          col_stop: 12
                          path: compiler-test
                          content: "    if true {"
                  block:
                    statements:
                      - Return:
                          expression:
                            TupleInit:
                              elements:
                                - Value:
                                    Implicit:
                                      - "1"
                                      - line_start: 9
                                        line_stop: 9
                                        col_start: 17
                                        col_stop: 18
                                        path: compiler-test
                                        content: "        return (1, 1);"
                                - Value:
                                    Implicit:
                                      - "1"
                                      - line_start: 9
                                        line_stop: 9
                                        col_start: 20
                                        col_stop: 21
                                        path: compiler-test
                                        content: "        return (1, 1);"
                              span:
                                line_start: 9
                                line_stop: 9
                                col_start: 16
                                col_stop: 22
                                path: compiler-test
                                content: "        return (1, 1);"
                          span:
                            line_start: 9
                            line_stop: 9
                            col_start: 9
                            col_stop: 22
                            path: compiler-test
                            content: "        return (1, 1);"
                    span:
                      line_start: 8
                      line_stop: 10
                      col_start: 13
                      col_stop: 6
                      path: compiler-test
                      content: "    if true {\n...\n    } else {"
                  next:
                    Block:
                      statements:
                        - Return:
                            expression:
                              TupleInit:
                                elements:
                                  - Value:
                                      Implicit:
                                        - "2"
                                        - line_start: 11
                                          line_stop: 11
                                          col_start: 17
                                          col_stop: 18
                                          path: compiler-test
                                          content: "        return (2, 2);"
                                  - Value:
                                      Implicit:
                                        - "2"
                                        - line_start: 11
                                          line_stop: 11
                                          col_start: 20
                                          col_stop: 21
                                          path: compiler-test
                                          content: "        return (2, 2);"
                                span:
                                  line_start: 11
                                  line_stop: 11
                                  col_start: 16
                                  col_stop: 22
                                  path: compiler-test
                                  content: "        return (2, 2);"
                            span:
                              line_start: 11
                              line_stop: 11
                              col_start: 9
                              col_stop: 22
                              path: compiler-test
                              content: "        return (2, 2);"
                      span:
                        line_start: 10
                        line_stop: 12
                        col_start: 12
                        col_stop: 6
                        path: compiler-test
                        content: "    } else {\n...\n    }"
                  span:
                    line_start: 8
                    line_stop: 12
                    col_start: 5
                    col_stop: 6
                    path: compiler-test
                    content: "    if true {\n...\n    } else {\n...\n    }"
            span:
              line_start: 7
              line_stop: 13
              col_start: 3
              col_stop: 2
              path: compiler-test
              content: ") {\n...\n}"
          span:
            line_start: 4
            line_stop: 13
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function tuple_conditional () -> (\n...\n) {\n...\n}\n\n\n\n"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32, b: u32) -> (u32, u32) {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32, b: u32) -> (u32, u32) {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32, b: u32) -> (u32, u32) {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 15
                  line_stop: 15
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: u32, b: u32) -> (u32, u32) {"
            - Variable:
                identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":23,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32, b: u32) -> (u32, u32) {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 15
                  line_stop: 15
                  col_start: 23
                  col_stop: 24
                  path: compiler-test
                  content: "function main(a: u32, b: u32) -> (u32, u32) {"
          output:
            Tuple:
              - IntegerType: U32
              - IntegerType: U32
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"a1\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":10,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let (a1, b1) = tuple_conditional();\\\"}\"}"
                      span:
                        line_start: 16
                        line_stop: 16
                        col_start: 10
                        col_stop: 12
                        path: compiler-test
                        content: "    let (a1, b1) = tuple_conditional();"
                    - mutable: true
                      identifier: "{\"name\":\"b1\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":14,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let (a1, b1) = tuple_conditional();\\\"}\"}"
                      span:
                        line_start: 16
                        line_stop: 16
                        col_start: 14
                        col_stop: 16
                        path: compiler-test
                        content: "    let (a1, b1) = tuple_conditional();"
                  type_: ~
                  value:
                    Call:
                      function:
                        Identifier: "{\"name\":\"tuple_conditional\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":20,\\\"col_stop\\\":37,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let (a1, b1) = tuple_conditional();\\\"}\"}"
                      arguments: []
                      span:
                        line_start: 16
                        line_stop: 16
                        col_start: 20
                        col_stop: 39
                        path: compiler-test
                        content: "    let (a1, b1) = tuple_conditional();"
                  span:
                    line_start: 16
                    line_stop: 16
                    col_start: 5
                    col_stop: 39
                    path: compiler-test
                    content: "    let (a1, b1) = tuple_conditional();"
              - Return:
                  expression:
                    TupleInit:
                      elements:
                        - Binary:
                            left:
                              Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":18,\\\"line_stop\\\":18,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (a + a1, b + b1);\\\"}\"}"
                            right:
                              Identifier: "{\"name\":\"a1\",\"span\":\"{\\\"line_start\\\":18,\\\"line_stop\\\":18,\\\"col_start\\\":17,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (a + a1, b + b1);\\\"}\"}"
                            op: Add
                            span:
                              line_start: 18
                              line_stop: 18
                              col_start: 13
                              col_stop: 19
                              path: compiler-test
                              content: "    return (a + a1, b + b1);"
                        - Binary:
                            left:
                              Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":18,\\\"line_stop\\\":18,\\\"col_start\\\":21,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (a + a1, b + b1);\\\"}\"}"
                            right:
                              Identifier: "{\"name\":\"b1\",\"span\":\"{\\\"line_start\\\":18,\\\"line_stop\\\":18,\\\"col_start\\\":25,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (a + a1, b + b1);\\\"}\"}"
                            op: Add
                            span:
                              line_start: 18
                              line_stop: 18
                              col_start: 21
                              col_stop: 27
                              path: compiler-test
                              content: "    return (a + a1, b + b1);"
                      span:
                        line_start: 18
                        line_stop: 18
                        col_start: 12
                        col_stop: 28
                        path: compiler-test
                        content: "    return (a + a1, b + b1);"
                  span:
                    line_start: 18
                    line_stop: 18
                    col_start: 5
                    col_stop: 28
                    path: compiler-test
                    content: "    return (a + a1, b + b1);"
            span:
              line_start: 15
              line_stop: 19
              col_start: 45
              col_stop: 2
              path: compiler-test
              content: "function main(a: u32, b: u32) -> (u32, u32) {\n...\n}"
          span:
            line_start: 15
            line_stop: 19
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: u32, b: u32) -> (u32, u32) {\n...\n}\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"tuple_conditional\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function tuple_conditional () -> (\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"tuple_conditional\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function tuple_conditional () -> (\\\"}\"}"
          input: []
          output:
            Tuple:
              - IntegerType: U32
              - IntegerType: U32
          block:
            statements:
              - Conditional:
                  condition:
                    Value:
                      Boolean:
                        - "true"
                        - line_start: 8
                          line_stop: 8
                          col_start: 8
                          col_stop: 12
                          path: compiler-test
                          content: "    if true {"
                  block:
                    statements:
                      - Return:
                          expression:
                            TupleInit:
                              elements:
                                - Value:
                                    Implicit:
                                      - "1"
                                      - line_start: 9
                                        line_stop: 9
                                        col_start: 17
                                        col_stop: 18
                                        path: compiler-test
                                        content: "        return (1, 1);"
                                - Value:
                                    Implicit:
                                      - "1"
                                      - line_start: 9
                                        line_stop: 9
                                        col_start: 20
                                        col_stop: 21
                                        path: compiler-test
                                        content: "        return (1, 1);"
                              span:
                                line_start: 9
                                line_stop: 9
                                col_start: 16
                                col_stop: 22
                                path: compiler-test
                                content: "        return (1, 1);"
                          span:
                            line_start: 9
                            line_stop: 9
                            col_start: 9
                            col_stop: 22
                            path: compiler-test
                            content: "        return (1, 1);"
                    span:
                      line_start: 8
                      line_stop: 10
                      col_start: 13
                      col_stop: 6
                      path: compiler-test
                      content: "    if true {\n...\n    } else {"
                  next:
                    Block:
                      statements:
                        - Return:
                            expression:
                              TupleInit:
                                elements:
                                  - Value:
                                      Implicit:
                                        - "2"
                                        - line_start: 11
                                          line_stop: 11
                                          col_start: 17
                                          col_stop: 18
                                          path: compiler-test
                                          content: "        return (2, 2);"
                                  - Value:
                                      Implicit:
                                        - "2"
                                        - line_start: 11
                                          line_stop: 11
                                          col_start: 20
                                          col_stop: 21
                                          path: compiler-test
                                          content: "        return (2, 2);"
                                span:
                                  line_start: 11
                                  line_stop: 11
                                  col_start: 16
                                  col_stop: 22
                                  path: compiler-test
                                  content: "        return (2, 2);"
                            span:
                              line_start: 11
                              line_stop: 11
                              col_start: 9
                              col_stop: 22
                              path: compiler-test
                              content: "        return (2, 2);"
                      span:
                        line_start: 10
                        line_stop: 12
                        col_start: 12
                        col_stop: 6
                        path: compiler-test
                        content: "    } else {\n...\n    }"
                  span:
                    line_start: 8
                    line_stop: 12
                    col_start: 5
                    col_stop: 6
                    path: compiler-test
                    content: "    if true {\n...\n    } else {\n...\n    }"
            span:
              line_start: 7
              line_stop: 13
              col_start: 3
              col_stop: 2
              path: compiler-test
              content: ") {\n...\n}"
          span:
            line_start: 4
            line_stop: 13
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function tuple_conditional () -> (\n...\n) {\n...\n}\n\n\n\n"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32, b: u32) -> (u32, u32) {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32, b: u32) -> (u32, u32) {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32, b: u32) -> (u32, u32) {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 15
                  line_stop: 15
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: u32, b: u32) -> (u32, u32) {"
            - Variable:
                identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":23,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32, b: u32) -> (u32, u32) {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 15
                  line_stop: 15
                  col_start: 23
                  col_stop: 24
                  path: compiler-test
                  content: "function main(a: u32, b: u32) -> (u32, u32) {"
          output:
            Tuple:
              - IntegerType: U32
              - IntegerType: U32
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"a1\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":10,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let (a1, b1) = tuple_conditional();\\\"}\"}"
                      span:
                        line_start: 16
                        line_stop: 16
                        col_start: 10
                        col_stop: 12
                        path: compiler-test
                        content: "    let (a1, b1) = tuple_conditional();"
                    - mutable: true
                      identifier: "{\"name\":\"b1\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":14,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let (a1, b1) = tuple_conditional();\\\"}\"}"
                      span:
                        line_start: 16
                        line_stop: 16
                        col_start: 14
                        col_stop: 16
                        path: compiler-test
                        content: "    let (a1, b1) = tuple_conditional();"
                  type_: ~
                  value:
                    Call:
                      function:
                        Identifier: "{\"name\":\"tuple_conditional\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":20,\\\"col_stop\\\":37,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let (a1, b1) = tuple_conditional();\\\"}\"}"
                      arguments: []
                      span:
                        line_start: 16
                        line_stop: 16
                        col_start: 20
                        col_stop: 39
                        path: compiler-test
                        content: "    let (a1, b1) = tuple_conditional();"
                  span:
                    line_start: 16
                    line_stop: 16
                    col_start: 5
                    col_stop: 39
                    path: compiler-test
                    content: "    let (a1, b1) = tuple_conditional();"
              - Return:
                  expression:
                    TupleInit:
                      elements:
                        - Binary:
                            left:
                              Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":18,\\\"line_stop\\\":18,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (a + a1, b + b1);\\\"}\"}"
                            right:
                              Identifier: "{\"name\":\"a1\",\"span\":\"{\\\"line_start\\\":18,\\\"line_stop\\\":18,\\\"col_start\\\":17,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (a + a1, b + b1);\\\"}\"}"
                            op: Add
                            span:
                              line_start: 18
                              line_stop: 18
                              col_start: 13
                              col_stop: 19
                              path: compiler-test
                              content: "    return (a + a1, b + b1);"
                        - Binary:
                            left:
                              Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":18,\\\"line_stop\\\":18,\\\"col_start\\\":21,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (a + a1, b + b1);\\\"}\"}"
                            right:
                              Identifier: "{\"name\":\"b1\",\"span\":\"{\\\"line_start\\\":18,\\\"line_stop\\\":18,\\\"col_start\\\":25,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (a + a1, b + b1);\\\"}\"}"
                            op: Add
                            span:
                              line_start: 18
                              line_stop: 18
                              col_start: 21
                              col_stop: 27
                              path: compiler-test
                              content: "    return (a + a1, b + b1);"
                      span:
                        line_start: 18
                        line_stop: 18
                        col_start: 12
                        col_stop: 28
                        path: compiler-test
                        content: "    return (a + a1, b + b1);"
                  span:
                    line_start: 18
                    line_stop: 18
                    col_start: 5
                    col_stop: 28
                    path: compiler-test
                    content: "    return (a + a1, b + b1);"
            span:
              line_start: 15
              line_stop: 19
              col_start: 45
              col_stop: 2
              path: compiler-test
              content: "function main(a: u32, b: u32) -> (u32, u32) {\n...\n}"
          span:
            line_start: 15
            line_stop: 19
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: u32, b: u32) -> (u32, u32) {\n...\n}\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"tuple_conditional\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function tuple_conditional () -> (\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"tuple_conditional\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":10,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function tuple_conditional () -> (\\\"}\"}"
          input: []
          output:
            Tuple:
              - IntegerType: U32
              - IntegerType: U32
          block:
            statements:
              - Conditional:
                  condition:
                    Value:
                      Boolean:
                        - "true"
                        - line_start: 8
                          line_stop: 8
                          col_start: 8
                          col_stop: 12
                          path: compiler-test
                          content: "    if true {"
                  block:
                    statements:
                      - Return:
                          expression:
                            TupleInit:
                              elements:
                                - Value:
                                    Integer:
                                      - U32
                                      - "1"
                                      - line_start: 9
                                        line_stop: 9
                                        col_start: 17
                                        col_stop: 18
                                        path: compiler-test
                                        content: "        return (1, 1);"
                                - Value:
                                    Integer:
                                      - U32
                                      - "1"
                                      - line_start: 9
                                        line_stop: 9
                                        col_start: 20
                                        col_stop: 21
                                        path: compiler-test
                                        content: "        return (1, 1);"
                              span:
                                line_start: 9
                                line_stop: 9
                                col_start: 16
                                col_stop: 22
                                path: compiler-test
                                content: "        return (1, 1);"
                          span:
                            line_start: 9
                            line_stop: 9
                            col_start: 9
                            col_stop: 22
                            path: compiler-test
                            content: "        return (1, 1);"
                    span:
                      line_start: 8
                      line_stop: 10
                      col_start: 13
                      col_stop: 6
                      path: compiler-test
                      content: "    if true {\n...\n    } else {"
                  next:
                    Block:
                      statements:
                        - Return:
                            expression:
                              TupleInit:
                                elements:
                                  - Value:
                                      Integer:
                                        - U32
                                        - "2"
                                        - line_start: 11
                                          line_stop: 11
                                          col_start: 17
                                          col_stop: 18
                                          path: compiler-test
                                          content: "        return (2, 2);"
                                  - Value:
                                      Integer:
                                        - U32
                                        - "2"
                                        - line_start: 11
                                          line_stop: 11
                                          col_start: 20
                                          col_stop: 21
                                          path: compiler-test
                                          content: "        return (2, 2);"
                                span:
                                  line_start: 11
                                  line_stop: 11
                                  col_start: 16
                                  col_stop: 22
                                  path: compiler-test
                                  content: "        return (2, 2);"
                            span:
                              line_start: 11
                              line_stop: 11
                              col_start: 9
                              col_stop: 22
                              path: compiler-test
                              content: "        return (2, 2);"
                      span:
                        line_start: 10
                        line_stop: 12
                        col_start: 12
                        col_stop: 6
                        path: compiler-test
                        content: "    } else {\n...\n    }"
                  span:
                    line_start: 8
                    line_stop: 12
                    col_start: 5
                    col_stop: 6
                    path: compiler-test
                    content: "    if true {\n...\n    } else {\n...\n    }"
            span:
              line_start: 7
              line_stop: 13
              col_start: 3
              col_stop: 2
              path: compiler-test
              content: ") {\n...\n}"
          span:
            line_start: 4
            line_stop: 13
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function tuple_conditional () -> (\n...\n) {\n...\n}\n\n\n\n"
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32, b: u32) -> (u32, u32) {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32, b: u32) -> (u32, u32) {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32, b: u32) -> (u32, u32) {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 15
                  line_stop: 15
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: u32, b: u32) -> (u32, u32) {"
            - Variable:
                identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":15,\\\"line_stop\\\":15,\\\"col_start\\\":23,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: u32, b: u32) -> (u32, u32) {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  IntegerType: U32
                span:
                  line_start: 15
                  line_stop: 15
                  col_start: 23
                  col_stop: 24
                  path: compiler-test
                  content: "function main(a: u32, b: u32) -> (u32, u32) {"
          output:
            Tuple:
              - IntegerType: U32
              - IntegerType: U32
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"a1\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":10,\\\"col_stop\\\":12,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let (a1, b1) = tuple_conditional();\\\"}\"}"
                      span:
                        line_start: 16
                        line_stop: 16
                        col_start: 10
                        col_stop: 12
                        path: compiler-test
                        content: "    let (a1, b1) = tuple_conditional();"
                    - mutable: true
                      identifier: "{\"name\":\"b1\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":14,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let (a1, b1) = tuple_conditional();\\\"}\"}"
                      span:
                        line_start: 16
                        line_stop: 16
                        col_start: 14
                        col_stop: 16
                        path: compiler-test
                        content: "    let (a1, b1) = tuple_conditional();"
                  type_:
                    Tuple:
                      - IntegerType: U32
                      - IntegerType: U32
                  value:
                    Call:
                      function:
                        Identifier: "{\"name\":\"tuple_conditional\",\"span\":\"{\\\"line_start\\\":16,\\\"line_stop\\\":16,\\\"col_start\\\":20,\\\"col_stop\\\":37,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let (a1, b1) = tuple_conditional();\\\"}\"}"
                      arguments: []
                      span:
                        line_start: 16
                        line_stop: 16
                        col_start: 20
                        col_stop: 39
                        path: compiler-test
                        content: "    let (a1, b1) = tuple_conditional();"
                  span:
                    line_start: 16
                    line_stop: 16
                    col_start: 5
                    col_stop: 39
                    path: compiler-test
                    content: "    let (a1, b1) = tuple_conditional();"
              - Return:
                  expression:
                    TupleInit:
                      elements:
                        - Binary:
                            left:
                              Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":18,\\\"line_stop\\\":18,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (a + a1, b + b1);\\\"}\"}"
                            right:
                              Identifier: "{\"name\":\"a1\",\"span\":\"{\\\"line_start\\\":18,\\\"line_stop\\\":18,\\\"col_start\\\":17,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (a + a1, b + b1);\\\"}\"}"
                            op: Add
                            span:
                              line_start: 18
                              line_stop: 18
                              col_start: 13
                              col_stop: 19
                              path: compiler-test
                              content: "    return (a + a1, b + b1);"
                        - Binary:
                            left:
                              Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":18,\\\"line_stop\\\":18,\\\"col_start\\\":21,\\\"col_stop\\\":22,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (a + a1, b + b1);\\\"}\"}"
                            right:
                              Identifier: "{\"name\":\"b1\",\"span\":\"{\\\"line_start\\\":18,\\\"line_stop\\\":18,\\\"col_start\\\":25,\\\"col_stop\\\":27,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (a + a1, b + b1);\\\"}\"}"
                            op: Add
                            span:
                              line_start: 18
                              line_stop: 18
                              col_start: 21
                              col_stop: 27
                              path: compiler-test
                              content: "    return (a + a1, b + b1);"
                      span:
                        line_start: 18
                        line_stop: 18
                        col_start: 12
                        col_stop: 28
                        path: compiler-test
                        content: "    return (a + a1, b + b1);"
                  span:
                    line_start: 18
                    line_stop: 18
                    col_start: 5
                    col_stop: 28
                    path: compiler-test
                    content: "    return (a + a1, b + b1);"
            span:
              line_start: 15
              line_stop: 19
              col_start: 45
              col_stop: 2
              path: compiler-test
              content: "function main(a: u32, b: u32) -> (u32, u32) {\n...\n}"
          span:
            line_start: 15
            line_stop: 19
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: u32, b: u32) -> (u32, u32) {\n...\n}\n\n"
