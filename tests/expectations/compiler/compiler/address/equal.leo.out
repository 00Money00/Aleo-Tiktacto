---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 511
      num_constraints: 511
      at: 61e8ee994e9e7edc1f84fa3cbe8c421ade231189b9ddf6a9a75eeef9915c20f7
      bt: 2194515882da93c79fa24d47c40fddc44f0284da25da7b89efb935c0ea7382f8
      ct: a0736e8c8f3bb1c39a147348754e53dfd31fd76a1df9cd9960472841bcc531df
    output:
      - input_file: inputs/address1.in
        output:
          registers:
            a:
              type: bool
              value: "true"
      - input_file: inputs/address2.in
        output:
          registers:
            a:
              type: bool
              value: "false"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: address) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: address) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: address) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Address
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: address) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"sender\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 17
                        path: compiler-test
                        content: "    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
                  type_: ~
                  value:
                    Value:
                      Address:
                        - aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8
                        - line_start: 4
                          line_stop: 4
                          col_start: 20
                          col_stop: 83
                          path: compiler-test
                          content: "    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 83
                    path: compiler-test
                    content: "    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender;\\\"}\"}"
                      right:
                        Identifier: "{\"name\":\"sender\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":17,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 12
                        col_stop: 23
                        path: compiler-test
                        content: "    return x == sender;"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    return x == sender;"
            span:
              line_start: 3
              line_stop: 7
              col_start: 35
              col_stop: 2
              path: compiler-test
              content: "function main(x: address) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 7
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: address) -> bool {\n...\n}\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: address) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: address) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: address) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Address
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: address) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"sender\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 17
                        path: compiler-test
                        content: "    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
                  type_: ~
                  value:
                    Value:
                      Address:
                        - aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8
                        - line_start: 4
                          line_stop: 4
                          col_start: 20
                          col_stop: 83
                          path: compiler-test
                          content: "    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 83
                    path: compiler-test
                    content: "    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender;\\\"}\"}"
                      right:
                        Identifier: "{\"name\":\"sender\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":17,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 12
                        col_stop: 23
                        path: compiler-test
                        content: "    return x == sender;"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    return x == sender;"
            span:
              line_start: 3
              line_stop: 7
              col_start: 35
              col_stop: 2
              path: compiler-test
              content: "function main(x: address) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 7
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: address) -> bool {\n...\n}\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: address) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: address) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: address) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Address
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: address) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"sender\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 17
                        path: compiler-test
                        content: "    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
                  type_: Address
                  value:
                    Value:
                      Address:
                        - aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8
                        - line_start: 4
                          line_stop: 4
                          col_start: 20
                          col_stop: 83
                          path: compiler-test
                          content: "    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 83
                    path: compiler-test
                    content: "    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
              - Return:
                  expression:
                    Binary:
                      left:
                        Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender;\\\"}\"}"
                      right:
                        Identifier: "{\"name\":\"sender\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":17,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender;\\\"}\"}"
                      op: Eq
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 12
                        col_stop: 23
                        path: compiler-test
                        content: "    return x == sender;"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    return x == sender;"
            span:
              line_start: 3
              line_stop: 7
              col_start: 35
              col_stop: 2
              path: compiler-test
              content: "function main(x: address) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 7
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: address) -> bool {\n...\n}\n\n"
