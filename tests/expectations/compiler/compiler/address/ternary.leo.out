---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 1022
      num_constraints: 1022
      at: 1b42ef63a212d2ea51cab07171c8fb1438112afdbd14501470c2477b9eeb4c99
      bt: 15054154626f1ae748008fc4ed9a650c3873b608988ff31312fe4049957dfffb
      ct: dbda9de51fe9897456cbbcc3b450ed7d66185fb6018c7a0c72414784f29b2ad4
    output:
      - input_file: inputs/address1.in
        output:
          registers:
            a:
              type: bool
              value: "false"
      - input_file: inputs/address2.in
        output:
          registers:
            a:
              type: bool
              value: "false"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: address) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: address) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: address) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Address
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: address) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"sender\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 17
                        path: compiler-test
                        content: "    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
                  type_: ~
                  value:
                    Value:
                      Address:
                        - aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8
                        - line_start: 4
                          line_stop: 4
                          col_start: 20
                          col_stop: 83
                          path: compiler-test
                          content: "    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 83
                    path: compiler-test
                    content: "    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"receiver\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":11,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const receiver = aleo18qgam03qe483tdrcc3fkqwpp38ehff4a2xma6lu7hams6lfpgcpq3dq05r;\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 11
                        col_stop: 19
                        path: compiler-test
                        content: "    const receiver = aleo18qgam03qe483tdrcc3fkqwpp38ehff4a2xma6lu7hams6lfpgcpq3dq05r;"
                  type_: ~
                  value:
                    Value:
                      Address:
                        - aleo18qgam03qe483tdrcc3fkqwpp38ehff4a2xma6lu7hams6lfpgcpq3dq05r
                        - line_start: 5
                          line_stop: 5
                          col_start: 22
                          col_stop: 85
                          path: compiler-test
                          content: "    const receiver = aleo18qgam03qe483tdrcc3fkqwpp38ehff4a2xma6lu7hams6lfpgcpq3dq05r;"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 85
                    path: compiler-test
                    content: "    const receiver = aleo18qgam03qe483tdrcc3fkqwpp38ehff4a2xma6lu7hams6lfpgcpq3dq05r;"
              - Return:
                  expression:
                    Ternary:
                      condition:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender ? receiver == x : sender == x;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"sender\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":17,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender ? receiver == x : sender == x;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 12
                            col_stop: 23
                            path: compiler-test
                            content: "    return x == sender ? receiver == x : sender == x;"
                      if_true:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"receiver\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":26,\\\"col_stop\\\":34,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender ? receiver == x : sender == x;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":38,\\\"col_stop\\\":39,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender ? receiver == x : sender == x;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 26
                            col_stop: 39
                            path: compiler-test
                            content: "    return x == sender ? receiver == x : sender == x;"
                      if_false:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"sender\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":42,\\\"col_stop\\\":48,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender ? receiver == x : sender == x;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":52,\\\"col_stop\\\":53,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender ? receiver == x : sender == x;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 42
                            col_stop: 53
                            path: compiler-test
                            content: "    return x == sender ? receiver == x : sender == x;"
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 12
                        col_stop: 53
                        path: compiler-test
                        content: "    return x == sender ? receiver == x : sender == x;"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 53
                    path: compiler-test
                    content: "    return x == sender ? receiver == x : sender == x;"
            span:
              line_start: 3
              line_stop: 8
              col_start: 35
              col_stop: 2
              path: compiler-test
              content: "function main(x: address) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 8
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: address) -> bool {\n...\n}\n\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: address) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: address) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: address) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Address
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: address) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"sender\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 17
                        path: compiler-test
                        content: "    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
                  type_: ~
                  value:
                    Value:
                      Address:
                        - aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8
                        - line_start: 4
                          line_stop: 4
                          col_start: 20
                          col_stop: 83
                          path: compiler-test
                          content: "    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 83
                    path: compiler-test
                    content: "    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"receiver\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":11,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const receiver = aleo18qgam03qe483tdrcc3fkqwpp38ehff4a2xma6lu7hams6lfpgcpq3dq05r;\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 11
                        col_stop: 19
                        path: compiler-test
                        content: "    const receiver = aleo18qgam03qe483tdrcc3fkqwpp38ehff4a2xma6lu7hams6lfpgcpq3dq05r;"
                  type_: ~
                  value:
                    Value:
                      Address:
                        - aleo18qgam03qe483tdrcc3fkqwpp38ehff4a2xma6lu7hams6lfpgcpq3dq05r
                        - line_start: 5
                          line_stop: 5
                          col_start: 22
                          col_stop: 85
                          path: compiler-test
                          content: "    const receiver = aleo18qgam03qe483tdrcc3fkqwpp38ehff4a2xma6lu7hams6lfpgcpq3dq05r;"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 85
                    path: compiler-test
                    content: "    const receiver = aleo18qgam03qe483tdrcc3fkqwpp38ehff4a2xma6lu7hams6lfpgcpq3dq05r;"
              - Return:
                  expression:
                    Ternary:
                      condition:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender ? receiver == x : sender == x;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"sender\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":17,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender ? receiver == x : sender == x;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 12
                            col_stop: 23
                            path: compiler-test
                            content: "    return x == sender ? receiver == x : sender == x;"
                      if_true:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"receiver\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":26,\\\"col_stop\\\":34,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender ? receiver == x : sender == x;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":38,\\\"col_stop\\\":39,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender ? receiver == x : sender == x;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 26
                            col_stop: 39
                            path: compiler-test
                            content: "    return x == sender ? receiver == x : sender == x;"
                      if_false:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"sender\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":42,\\\"col_stop\\\":48,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender ? receiver == x : sender == x;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":52,\\\"col_stop\\\":53,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender ? receiver == x : sender == x;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 42
                            col_stop: 53
                            path: compiler-test
                            content: "    return x == sender ? receiver == x : sender == x;"
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 12
                        col_stop: 53
                        path: compiler-test
                        content: "    return x == sender ? receiver == x : sender == x;"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 53
                    path: compiler-test
                    content: "    return x == sender ? receiver == x : sender == x;"
            span:
              line_start: 3
              line_stop: 8
              col_start: 35
              col_stop: 2
              path: compiler-test
              content: "function main(x: address) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 8
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: address) -> bool {\n...\n}\n\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: address) -> bool {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: address) -> bool {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(x: address) -> bool {\\\"}\"}"
                const_: false
                mutable: true
                type_: Address
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(x: address) -> bool {"
          output: Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"sender\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":11,\\\"col_stop\\\":17,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 11
                        col_stop: 17
                        path: compiler-test
                        content: "    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
                  type_: Address
                  value:
                    Value:
                      Address:
                        - aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8
                        - line_start: 4
                          line_stop: 4
                          col_start: 20
                          col_stop: 83
                          path: compiler-test
                          content: "    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 83
                    path: compiler-test
                    content: "    const sender = aleo1qnr4dkkvkgfqph0vzc3y6z2eu975wnpz2925ntjccd5cfqxtyu8sta57j8;"
              - Definition:
                  declaration_type: Const
                  variable_names:
                    - mutable: false
                      identifier: "{\"name\":\"receiver\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":11,\\\"col_stop\\\":19,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    const receiver = aleo18qgam03qe483tdrcc3fkqwpp38ehff4a2xma6lu7hams6lfpgcpq3dq05r;\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 11
                        col_stop: 19
                        path: compiler-test
                        content: "    const receiver = aleo18qgam03qe483tdrcc3fkqwpp38ehff4a2xma6lu7hams6lfpgcpq3dq05r;"
                  type_: Address
                  value:
                    Value:
                      Address:
                        - aleo18qgam03qe483tdrcc3fkqwpp38ehff4a2xma6lu7hams6lfpgcpq3dq05r
                        - line_start: 5
                          line_stop: 5
                          col_start: 22
                          col_stop: 85
                          path: compiler-test
                          content: "    const receiver = aleo18qgam03qe483tdrcc3fkqwpp38ehff4a2xma6lu7hams6lfpgcpq3dq05r;"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 85
                    path: compiler-test
                    content: "    const receiver = aleo18qgam03qe483tdrcc3fkqwpp38ehff4a2xma6lu7hams6lfpgcpq3dq05r;"
              - Return:
                  expression:
                    Ternary:
                      condition:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":12,\\\"col_stop\\\":13,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender ? receiver == x : sender == x;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"sender\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":17,\\\"col_stop\\\":23,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender ? receiver == x : sender == x;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 12
                            col_stop: 23
                            path: compiler-test
                            content: "    return x == sender ? receiver == x : sender == x;"
                      if_true:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"receiver\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":26,\\\"col_stop\\\":34,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender ? receiver == x : sender == x;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":38,\\\"col_stop\\\":39,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender ? receiver == x : sender == x;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 26
                            col_stop: 39
                            path: compiler-test
                            content: "    return x == sender ? receiver == x : sender == x;"
                      if_false:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"sender\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":42,\\\"col_stop\\\":48,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender ? receiver == x : sender == x;\\\"}\"}"
                          right:
                            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":7,\\\"line_stop\\\":7,\\\"col_start\\\":52,\\\"col_stop\\\":53,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return x == sender ? receiver == x : sender == x;\\\"}\"}"
                          op: Eq
                          span:
                            line_start: 7
                            line_stop: 7
                            col_start: 42
                            col_stop: 53
                            path: compiler-test
                            content: "    return x == sender ? receiver == x : sender == x;"
                      span:
                        line_start: 7
                        line_stop: 7
                        col_start: 12
                        col_stop: 53
                        path: compiler-test
                        content: "    return x == sender ? receiver == x : sender == x;"
                  span:
                    line_start: 7
                    line_stop: 7
                    col_start: 5
                    col_stop: 53
                    path: compiler-test
                    content: "    return x == sender ? receiver == x : sender == x;"
            span:
              line_start: 3
              line_stop: 8
              col_start: 35
              col_stop: 2
              path: compiler-test
              content: "function main(x: address) -> bool {\n...\n}"
          span:
            line_start: 3
            line_stop: 8
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(x: address) -> bool {\n...\n}\n\n\n"
