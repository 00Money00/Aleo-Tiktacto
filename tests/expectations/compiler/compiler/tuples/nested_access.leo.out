---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 2
      num_constraints: 2
      at: 401937c524c61a28b4fab76d7a1f85bb628850012af62362a0922610372faf92
      bt: cdf9a9cee4f2edf55111a95ae60bde9801080f6bde638a5c79273a39a2f9f7f5
      ct: 643d5437104296e21d906ecb15b2c96ad278f20cfc4af53b12bb6069bd853726
    output:
      - input_file: inputs/true_true.in
        output:
          registers:
            b:
              type: bool
              value: "false"
            c:
              type: bool
              value: "false"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: (bool, bool)) -> (bool, bool) {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: (bool, bool)) -> (bool, bool) {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: (bool, bool)) -> (bool, bool) {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Tuple:
                    - Boolean
                    - Boolean
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: (bool, bool)) -> (bool, bool) {"
          output:
            Tuple:
              - Boolean
              - Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = (a, false);\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let b = (a, false);"
                  type_: ~
                  value:
                    TupleInit:
                      elements:
                        - Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = (a, false);\\\"}\"}"
                        - Value:
                            Boolean:
                              - "false"
                              - line_start: 4
                                line_stop: 4
                                col_start: 17
                                col_stop: 22
                                path: compiler-test
                                content: "    let b = (a, false);"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 13
                        col_stop: 23
                        path: compiler-test
                        content: "    let b = (a, false);"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    let b = (a, false);"
              - Return:
                  expression:
                    TupleInit:
                      elements:
                        - Binary:
                            left:
                              TupleAccess:
                                tuple:
                                  Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (b.1 || b.0.0, b.1 && b.0.1);\\\"}\"}"
                                index:
                                  value: "1"
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 13
                                  col_stop: 16
                                  path: compiler-test
                                  content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                            right:
                              TupleAccess:
                                tuple:
                                  TupleAccess:
                                    tuple:
                                      Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":20,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (b.1 || b.0.0, b.1 && b.0.1);\\\"}\"}"
                                    index:
                                      value: "0"
                                    span:
                                      line_start: 6
                                      line_stop: 6
                                      col_start: 20
                                      col_stop: 23
                                      path: compiler-test
                                      content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                                index:
                                  value: "0"
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 20
                                  col_stop: 25
                                  path: compiler-test
                                  content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                            op: Or
                            span:
                              line_start: 6
                              line_stop: 6
                              col_start: 13
                              col_stop: 25
                              path: compiler-test
                              content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                        - Binary:
                            left:
                              TupleAccess:
                                tuple:
                                  Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":27,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (b.1 || b.0.0, b.1 && b.0.1);\\\"}\"}"
                                index:
                                  value: "1"
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 27
                                  col_stop: 30
                                  path: compiler-test
                                  content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                            right:
                              TupleAccess:
                                tuple:
                                  TupleAccess:
                                    tuple:
                                      Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":34,\\\"col_stop\\\":35,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (b.1 || b.0.0, b.1 && b.0.1);\\\"}\"}"
                                    index:
                                      value: "0"
                                    span:
                                      line_start: 6
                                      line_stop: 6
                                      col_start: 34
                                      col_stop: 37
                                      path: compiler-test
                                      content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                                index:
                                  value: "1"
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 34
                                  col_stop: 39
                                  path: compiler-test
                                  content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                            op: And
                            span:
                              line_start: 6
                              line_stop: 6
                              col_start: 27
                              col_stop: 39
                              path: compiler-test
                              content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 12
                        col_stop: 40
                        path: compiler-test
                        content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 40
                    path: compiler-test
                    content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
            span:
              line_start: 3
              line_stop: 7
              col_start: 48
              col_stop: 2
              path: compiler-test
              content: "function main(a: (bool, bool)) -> (bool, bool) {\n...\n}"
          span:
            line_start: 3
            line_stop: 7
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: (bool, bool)) -> (bool, bool) {\n...\n}\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: (bool, bool)) -> (bool, bool) {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: (bool, bool)) -> (bool, bool) {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: (bool, bool)) -> (bool, bool) {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Tuple:
                    - Boolean
                    - Boolean
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: (bool, bool)) -> (bool, bool) {"
          output:
            Tuple:
              - Boolean
              - Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = (a, false);\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let b = (a, false);"
                  type_: ~
                  value:
                    TupleInit:
                      elements:
                        - Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = (a, false);\\\"}\"}"
                        - Value:
                            Boolean:
                              - "false"
                              - line_start: 4
                                line_stop: 4
                                col_start: 17
                                col_stop: 22
                                path: compiler-test
                                content: "    let b = (a, false);"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 13
                        col_stop: 23
                        path: compiler-test
                        content: "    let b = (a, false);"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    let b = (a, false);"
              - Return:
                  expression:
                    TupleInit:
                      elements:
                        - Binary:
                            left:
                              TupleAccess:
                                tuple:
                                  Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (b.1 || b.0.0, b.1 && b.0.1);\\\"}\"}"
                                index:
                                  value: "1"
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 13
                                  col_stop: 16
                                  path: compiler-test
                                  content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                            right:
                              TupleAccess:
                                tuple:
                                  TupleAccess:
                                    tuple:
                                      Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":20,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (b.1 || b.0.0, b.1 && b.0.1);\\\"}\"}"
                                    index:
                                      value: "0"
                                    span:
                                      line_start: 6
                                      line_stop: 6
                                      col_start: 20
                                      col_stop: 23
                                      path: compiler-test
                                      content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                                index:
                                  value: "0"
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 20
                                  col_stop: 25
                                  path: compiler-test
                                  content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                            op: Or
                            span:
                              line_start: 6
                              line_stop: 6
                              col_start: 13
                              col_stop: 25
                              path: compiler-test
                              content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                        - Binary:
                            left:
                              TupleAccess:
                                tuple:
                                  Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":27,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (b.1 || b.0.0, b.1 && b.0.1);\\\"}\"}"
                                index:
                                  value: "1"
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 27
                                  col_stop: 30
                                  path: compiler-test
                                  content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                            right:
                              TupleAccess:
                                tuple:
                                  TupleAccess:
                                    tuple:
                                      Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":34,\\\"col_stop\\\":35,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (b.1 || b.0.0, b.1 && b.0.1);\\\"}\"}"
                                    index:
                                      value: "0"
                                    span:
                                      line_start: 6
                                      line_stop: 6
                                      col_start: 34
                                      col_stop: 37
                                      path: compiler-test
                                      content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                                index:
                                  value: "1"
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 34
                                  col_stop: 39
                                  path: compiler-test
                                  content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                            op: And
                            span:
                              line_start: 6
                              line_stop: 6
                              col_start: 27
                              col_stop: 39
                              path: compiler-test
                              content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 12
                        col_stop: 40
                        path: compiler-test
                        content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 40
                    path: compiler-test
                    content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
            span:
              line_start: 3
              line_stop: 7
              col_start: 48
              col_stop: 2
              path: compiler-test
              content: "function main(a: (bool, bool)) -> (bool, bool) {\n...\n}"
          span:
            line_start: 3
            line_stop: 7
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: (bool, bool)) -> (bool, bool) {\n...\n}\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: (bool, bool)) -> (bool, bool) {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: (bool, bool)) -> (bool, bool) {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":16,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(a: (bool, bool)) -> (bool, bool) {\\\"}\"}"
                const_: false
                mutable: true
                type_:
                  Tuple:
                    - Boolean
                    - Boolean
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 16
                  path: compiler-test
                  content: "function main(a: (bool, bool)) -> (bool, bool) {"
          output:
            Tuple:
              - Boolean
              - Boolean
          block:
            statements:
              - Definition:
                  declaration_type: Let
                  variable_names:
                    - mutable: true
                      identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":9,\\\"col_stop\\\":10,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = (a, false);\\\"}\"}"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 9
                        col_stop: 10
                        path: compiler-test
                        content: "    let b = (a, false);"
                  type_:
                    Tuple:
                      - Tuple:
                          - Boolean
                          - Boolean
                      - Boolean
                  value:
                    TupleInit:
                      elements:
                        - Identifier: "{\"name\":\"a\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":14,\\\"col_stop\\\":15,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    let b = (a, false);\\\"}\"}"
                        - Value:
                            Boolean:
                              - "false"
                              - line_start: 4
                                line_stop: 4
                                col_start: 17
                                col_stop: 22
                                path: compiler-test
                                content: "    let b = (a, false);"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 13
                        col_stop: 23
                        path: compiler-test
                        content: "    let b = (a, false);"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 23
                    path: compiler-test
                    content: "    let b = (a, false);"
              - Return:
                  expression:
                    TupleInit:
                      elements:
                        - Binary:
                            left:
                              TupleAccess:
                                tuple:
                                  Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":13,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (b.1 || b.0.0, b.1 && b.0.1);\\\"}\"}"
                                index:
                                  value: "1"
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 13
                                  col_stop: 16
                                  path: compiler-test
                                  content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                            right:
                              TupleAccess:
                                tuple:
                                  TupleAccess:
                                    tuple:
                                      Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":20,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (b.1 || b.0.0, b.1 && b.0.1);\\\"}\"}"
                                    index:
                                      value: "0"
                                    span:
                                      line_start: 6
                                      line_stop: 6
                                      col_start: 20
                                      col_stop: 23
                                      path: compiler-test
                                      content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                                index:
                                  value: "0"
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 20
                                  col_stop: 25
                                  path: compiler-test
                                  content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                            op: Or
                            span:
                              line_start: 6
                              line_stop: 6
                              col_start: 13
                              col_stop: 25
                              path: compiler-test
                              content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                        - Binary:
                            left:
                              TupleAccess:
                                tuple:
                                  Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":27,\\\"col_stop\\\":28,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (b.1 || b.0.0, b.1 && b.0.1);\\\"}\"}"
                                index:
                                  value: "1"
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 27
                                  col_stop: 30
                                  path: compiler-test
                                  content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                            right:
                              TupleAccess:
                                tuple:
                                  TupleAccess:
                                    tuple:
                                      Identifier: "{\"name\":\"b\",\"span\":\"{\\\"line_start\\\":6,\\\"line_stop\\\":6,\\\"col_start\\\":34,\\\"col_stop\\\":35,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return (b.1 || b.0.0, b.1 && b.0.1);\\\"}\"}"
                                    index:
                                      value: "0"
                                    span:
                                      line_start: 6
                                      line_stop: 6
                                      col_start: 34
                                      col_stop: 37
                                      path: compiler-test
                                      content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                                index:
                                  value: "1"
                                span:
                                  line_start: 6
                                  line_stop: 6
                                  col_start: 34
                                  col_stop: 39
                                  path: compiler-test
                                  content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                            op: And
                            span:
                              line_start: 6
                              line_stop: 6
                              col_start: 27
                              col_stop: 39
                              path: compiler-test
                              content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                      span:
                        line_start: 6
                        line_stop: 6
                        col_start: 12
                        col_stop: 40
                        path: compiler-test
                        content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
                  span:
                    line_start: 6
                    line_stop: 6
                    col_start: 5
                    col_stop: 40
                    path: compiler-test
                    content: "    return (b.1 || b.0.0, b.1 && b.0.1);"
            span:
              line_start: 3
              line_stop: 7
              col_start: 48
              col_stop: 2
              path: compiler-test
              content: "function main(a: (bool, bool)) -> (bool, bool) {\n...\n}"
          span:
            line_start: 3
            line_stop: 7
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(a: (bool, bool)) -> (bool, bool) {\n...\n}\n\n"
