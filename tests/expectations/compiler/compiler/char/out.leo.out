---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 6
      num_constraints: 4
      at: 2859fe6f24016b5634df2791da7de932e68ec32c73b5b573e0c39e968c7a4e12
      bt: 8143508f19c8eee208a7fbbcfb833aeeace6ba0a761e41d028599d2237cc60fa
      ct: d0c6feeed1e6b8d5c0e03dc9e25641b7fdc34ad912e2b1488296d4a99ed6cbf5
    output:
      - input_file: inputs/ascii.in
        output:
          registers:
            r:
              type: char
              value: "'a'"
      - input_file: inputs/escaped_unicode1.in
        output:
          registers:
            r:
              type: char
              value: "'\\u{f}'"
      - input_file: inputs/escaped_unicode2.in
        output:
          registers:
            r:
              type: char
              value: "'å'"
      - input_file: inputs/escaped_unicode3.in
        output:
          registers:
            r:
              type: char
              value: "'Ӡ'"
      - input_file: inputs/escaped_unicode4.in
        output:
          registers:
            r:
              type: char
              value: "'\\u{2764}'"
      - input_file: inputs/escaped_unicode5.in
        output:
          registers:
            r:
              type: char
              value: "'\\u{1f622}'"
      - input_file: inputs/escaped_unicode6.in
        output:
          registers:
            r:
              type: char
              value: "'\\u{10001f}'"
      - input_file: inputs/escaped.in
        output:
          registers:
            r:
              type: char
              value: "'\\''"
      - input_file: inputs/hex1.in
        output:
          registers:
            r:
              type: char
              value: "'*'"
      - input_file: inputs/hex2.in
        output:
          registers:
            r:
              type: char
              value: "'\\u{7f}'"
      - input_file: inputs/unicode1.in
        output:
          registers:
            r:
              type: char
              value: "'\\u{e00f}'"
      - input_file: inputs/unicode2.in
        output:
          registers:
            r:
              type: char
              value: "'å'"
      - input_file: inputs/unicode3.in
        output:
          registers:
            r:
              type: char
              value: "'Ӡ'"
      - input_file: inputs/unicode4.in
        output:
          registers:
            r:
              type: char
              value: "'\\u{2764}'"
      - input_file: inputs/unicode5.in
        output:
          registers:
            r:
              type: char
              value: "'\\u{1f62d}'"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":2,\\\"line_stop\\\":2,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(character: char) -> char {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":2,\\\"line_stop\\\":2,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(character: char) -> char {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":2,\\\"line_stop\\\":2,\\\"col_start\\\":15,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(character: char) -> char {\\\"}\"}"
                const_: false
                mutable: true
                type_: Char
                span:
                  line_start: 2
                  line_stop: 2
                  col_start: 15
                  col_stop: 24
                  path: compiler-test
                  content: "function main(character: char) -> char {"
          output: Char
          block:
            statements:
              - Console:
                  function:
                    Log:
                      parts:
                        - Const: ""
                        - Container
                      parameters:
                        - Identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":23,\\\"col_stop\\\":32,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    console.log(\\\\\\\"{}\\\\\\\", character);\\\"}\"}"
                      span:
                        line_start: 3
                        line_stop: 3
                        col_start: 17
                        col_stop: 32
                        path: compiler-test
                        content: "    console.log(\"{}\", character);"
                  span:
                    line_start: 3
                    line_stop: 3
                    col_start: 5
                    col_stop: 32
                    path: compiler-test
                    content: "    console.log(\"{}\", character);"
              - Return:
                  expression:
                    Ternary:
                      condition:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":12,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return character == 'z' ? 'x' : character;\\\"}\"}"
                          right:
                            Value:
                              Char:
                                character:
                                  Scalar: 122
                                span:
                                  line_start: 5
                                  line_stop: 5
                                  col_start: 25
                                  col_stop: 28
                                  path: compiler-test
                                  content: "    return character == 'z' ? 'x' : character;"
                          op: Eq
                          span:
                            line_start: 5
                            line_stop: 5
                            col_start: 12
                            col_stop: 28
                            path: compiler-test
                            content: "    return character == 'z' ? 'x' : character;"
                      if_true:
                        Value:
                          Char:
                            character:
                              Scalar: 120
                            span:
                              line_start: 5
                              line_stop: 5
                              col_start: 31
                              col_stop: 34
                              path: compiler-test
                              content: "    return character == 'z' ? 'x' : character;"
                      if_false:
                        Identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":37,\\\"col_stop\\\":46,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return character == 'z' ? 'x' : character;\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 12
                        col_stop: 46
                        path: compiler-test
                        content: "    return character == 'z' ? 'x' : character;"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 46
                    path: compiler-test
                    content: "    return character == 'z' ? 'x' : character;"
            span:
              line_start: 2
              line_stop: 6
              col_start: 40
              col_stop: 2
              path: compiler-test
              content: "function main(character: char) -> char {\n...\n}"
          span:
            line_start: 2
            line_stop: 6
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(character: char) -> char {\n...\n}\n\n"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":2,\\\"line_stop\\\":2,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(character: char) -> char {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":2,\\\"line_stop\\\":2,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(character: char) -> char {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":2,\\\"line_stop\\\":2,\\\"col_start\\\":15,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(character: char) -> char {\\\"}\"}"
                const_: false
                mutable: true
                type_: Char
                span:
                  line_start: 2
                  line_stop: 2
                  col_start: 15
                  col_stop: 24
                  path: compiler-test
                  content: "function main(character: char) -> char {"
          output: Char
          block:
            statements:
              - Console:
                  function:
                    Log:
                      parts:
                        - Const: ""
                        - Container
                      parameters:
                        - Identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":23,\\\"col_stop\\\":32,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    console.log(\\\\\\\"{}\\\\\\\", character);\\\"}\"}"
                      span:
                        line_start: 3
                        line_stop: 3
                        col_start: 17
                        col_stop: 32
                        path: compiler-test
                        content: "    console.log(\"{}\", character);"
                  span:
                    line_start: 3
                    line_stop: 3
                    col_start: 5
                    col_stop: 32
                    path: compiler-test
                    content: "    console.log(\"{}\", character);"
              - Return:
                  expression:
                    Ternary:
                      condition:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":12,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return character == 'z' ? 'x' : character;\\\"}\"}"
                          right:
                            Value:
                              Char:
                                character:
                                  Scalar: 122
                                span:
                                  line_start: 5
                                  line_stop: 5
                                  col_start: 25
                                  col_stop: 28
                                  path: compiler-test
                                  content: "    return character == 'z' ? 'x' : character;"
                          op: Eq
                          span:
                            line_start: 5
                            line_stop: 5
                            col_start: 12
                            col_stop: 28
                            path: compiler-test
                            content: "    return character == 'z' ? 'x' : character;"
                      if_true:
                        Value:
                          Char:
                            character:
                              Scalar: 120
                            span:
                              line_start: 5
                              line_stop: 5
                              col_start: 31
                              col_stop: 34
                              path: compiler-test
                              content: "    return character == 'z' ? 'x' : character;"
                      if_false:
                        Identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":37,\\\"col_stop\\\":46,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return character == 'z' ? 'x' : character;\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 12
                        col_stop: 46
                        path: compiler-test
                        content: "    return character == 'z' ? 'x' : character;"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 46
                    path: compiler-test
                    content: "    return character == 'z' ? 'x' : character;"
            span:
              line_start: 2
              line_stop: 6
              col_start: 40
              col_stop: 2
              path: compiler-test
              content: "function main(character: char) -> char {\n...\n}"
          span:
            line_start: 2
            line_stop: 6
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(character: char) -> char {\n...\n}\n\n"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":2,\\\"line_stop\\\":2,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(character: char) -> char {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":2,\\\"line_stop\\\":2,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(character: char) -> char {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":2,\\\"line_stop\\\":2,\\\"col_start\\\":15,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(character: char) -> char {\\\"}\"}"
                const_: false
                mutable: true
                type_: Char
                span:
                  line_start: 2
                  line_stop: 2
                  col_start: 15
                  col_stop: 24
                  path: compiler-test
                  content: "function main(character: char) -> char {"
          output: Char
          block:
            statements:
              - Console:
                  function:
                    Log:
                      parts:
                        - Const: ""
                        - Container
                      parameters:
                        - Identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":23,\\\"col_stop\\\":32,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    console.log(\\\\\\\"{}\\\\\\\", character);\\\"}\"}"
                      span:
                        line_start: 3
                        line_stop: 3
                        col_start: 17
                        col_stop: 32
                        path: compiler-test
                        content: "    console.log(\"{}\", character);"
                  span:
                    line_start: 3
                    line_stop: 3
                    col_start: 5
                    col_stop: 32
                    path: compiler-test
                    content: "    console.log(\"{}\", character);"
              - Return:
                  expression:
                    Ternary:
                      condition:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":12,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return character == 'z' ? 'x' : character;\\\"}\"}"
                          right:
                            Value:
                              Char:
                                character:
                                  Scalar: 122
                                span:
                                  line_start: 5
                                  line_stop: 5
                                  col_start: 25
                                  col_stop: 28
                                  path: compiler-test
                                  content: "    return character == 'z' ? 'x' : character;"
                          op: Eq
                          span:
                            line_start: 5
                            line_stop: 5
                            col_start: 12
                            col_stop: 28
                            path: compiler-test
                            content: "    return character == 'z' ? 'x' : character;"
                      if_true:
                        Value:
                          Char:
                            character:
                              Scalar: 120
                            span:
                              line_start: 5
                              line_stop: 5
                              col_start: 31
                              col_stop: 34
                              path: compiler-test
                              content: "    return character == 'z' ? 'x' : character;"
                      if_false:
                        Identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":5,\\\"line_stop\\\":5,\\\"col_start\\\":37,\\\"col_stop\\\":46,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return character == 'z' ? 'x' : character;\\\"}\"}"
                      span:
                        line_start: 5
                        line_stop: 5
                        col_start: 12
                        col_stop: 46
                        path: compiler-test
                        content: "    return character == 'z' ? 'x' : character;"
                  span:
                    line_start: 5
                    line_stop: 5
                    col_start: 5
                    col_stop: 46
                    path: compiler-test
                    content: "    return character == 'z' ? 'x' : character;"
            span:
              line_start: 2
              line_stop: 6
              col_start: 40
              col_stop: 2
              path: compiler-test
              content: "function main(character: char) -> char {\n...\n}"
          span:
            line_start: 2
            line_stop: 6
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(character: char) -> char {\n...\n}\n\n"
