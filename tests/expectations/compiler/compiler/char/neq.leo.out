---
namespace: Compile
expectation: Pass
outputs:
  - circuit:
      num_public_variables: 0
      num_private_variables: 6
      num_constraints: 3
      at: cc1286e0b6fa2e90fb6f0880431a7c1e2cc37a329fae3aff1c13f51036c66f12
      bt: 02c492cb6df07172e56cffd0cfd902a8443921e1256a2d907bbabd30bf6b8f6d
      ct: a1f8e2b168c0f2f28f0ca3f16ce9b25ba7f7c410cfd68b0912bf19c90b53f2a2
    output:
      - input_file: inputs/ascii.in
        output:
          registers:
            r:
              type: char
              value: "'Z'"
      - input_file: inputs/escaped_unicode1.in
        output:
          registers:
            r:
              type: char
              value: "'a'"
      - input_file: inputs/escaped_unicode2.in
        output:
          registers:
            r:
              type: char
              value: "'a'"
      - input_file: inputs/escaped_unicode3.in
        output:
          registers:
            r:
              type: char
              value: "'a'"
      - input_file: inputs/escaped_unicode4.in
        output:
          registers:
            r:
              type: char
              value: "'a'"
      - input_file: inputs/escaped_unicode5.in
        output:
          registers:
            r:
              type: char
              value: "'a'"
      - input_file: inputs/escaped_unicode6.in
        output:
          registers:
            r:
              type: char
              value: "'a'"
      - input_file: inputs/escaped.in
        output:
          registers:
            r:
              type: char
              value: "'a'"
      - input_file: inputs/hex1.in
        output:
          registers:
            r:
              type: char
              value: "'a'"
      - input_file: inputs/hex2.in
        output:
          registers:
            r:
              type: char
              value: "'a'"
      - input_file: inputs/unicode1.in
        output:
          registers:
            r:
              type: char
              value: "'a'"
      - input_file: inputs/unicode2.in
        output:
          registers:
            r:
              type: char
              value: "'a'"
      - input_file: inputs/unicode3.in
        output:
          registers:
            r:
              type: char
              value: "'a'"
      - input_file: inputs/unicode4.in
        output:
          registers:
            r:
              type: char
              value: "'a'"
      - input_file: inputs/unicode5.in
        output:
          registers:
            r:
              type: char
              value: "'a'"
    initial_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(character: char) -> char {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(character: char) -> char {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(character: char) -> char {\\\"}\"}"
                const_: false
                mutable: true
                type_: Char
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 24
                  path: compiler-test
                  content: "function main(character: char) -> char {"
          output: Char
          block:
            statements:
              - Return:
                  expression:
                    Ternary:
                      condition:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return character != 'a' ? 'a' : 'Z';\\\"}\"}"
                          right:
                            Value:
                              Char:
                                character:
                                  Scalar: 97
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 25
                                  col_stop: 28
                                  path: compiler-test
                                  content: "    return character != 'a' ? 'a' : 'Z';"
                          op: Ne
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 12
                            col_stop: 28
                            path: compiler-test
                            content: "    return character != 'a' ? 'a' : 'Z';"
                      if_true:
                        Value:
                          Char:
                            character:
                              Scalar: 97
                            span:
                              line_start: 4
                              line_stop: 4
                              col_start: 31
                              col_stop: 34
                              path: compiler-test
                              content: "    return character != 'a' ? 'a' : 'Z';"
                      if_false:
                        Value:
                          Char:
                            character:
                              Scalar: 90
                            span:
                              line_start: 4
                              line_stop: 4
                              col_start: 37
                              col_stop: 40
                              path: compiler-test
                              content: "    return character != 'a' ? 'a' : 'Z';"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 40
                        path: compiler-test
                        content: "    return character != 'a' ? 'a' : 'Z';"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 40
                    path: compiler-test
                    content: "    return character != 'a' ? 'a' : 'Z';"
            span:
              line_start: 3
              line_stop: 5
              col_start: 40
              col_stop: 2
              path: compiler-test
              content: "function main(character: char) -> char {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(character: char) -> char {\n...\n}"
    canonicalized_theorem:
      name: ""
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(character: char) -> char {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(character: char) -> char {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(character: char) -> char {\\\"}\"}"
                const_: false
                mutable: true
                type_: Char
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 24
                  path: compiler-test
                  content: "function main(character: char) -> char {"
          output: Char
          block:
            statements:
              - Return:
                  expression:
                    Ternary:
                      condition:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return character != 'a' ? 'a' : 'Z';\\\"}\"}"
                          right:
                            Value:
                              Char:
                                character:
                                  Scalar: 97
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 25
                                  col_stop: 28
                                  path: compiler-test
                                  content: "    return character != 'a' ? 'a' : 'Z';"
                          op: Ne
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 12
                            col_stop: 28
                            path: compiler-test
                            content: "    return character != 'a' ? 'a' : 'Z';"
                      if_true:
                        Value:
                          Char:
                            character:
                              Scalar: 97
                            span:
                              line_start: 4
                              line_stop: 4
                              col_start: 31
                              col_stop: 34
                              path: compiler-test
                              content: "    return character != 'a' ? 'a' : 'Z';"
                      if_false:
                        Value:
                          Char:
                            character:
                              Scalar: 90
                            span:
                              line_start: 4
                              line_stop: 4
                              col_start: 37
                              col_stop: 40
                              path: compiler-test
                              content: "    return character != 'a' ? 'a' : 'Z';"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 40
                        path: compiler-test
                        content: "    return character != 'a' ? 'a' : 'Z';"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 40
                    path: compiler-test
                    content: "    return character != 'a' ? 'a' : 'Z';"
            span:
              line_start: 3
              line_stop: 5
              col_start: 40
              col_stop: 2
              path: compiler-test
              content: "function main(character: char) -> char {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(character: char) -> char {\n...\n}"
    type_inferenced_theorem:
      name: test
      expected_input: []
      imports: []
      circuits: {}
      global_consts: {}
      functions:
        "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(character: char) -> char {\\\"}\"}":
          annotations: []
          identifier: "{\"name\":\"main\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":10,\\\"col_stop\\\":14,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(character: char) -> char {\\\"}\"}"
          input:
            - Variable:
                identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":3,\\\"line_stop\\\":3,\\\"col_start\\\":15,\\\"col_stop\\\":24,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"function main(character: char) -> char {\\\"}\"}"
                const_: false
                mutable: true
                type_: Char
                span:
                  line_start: 3
                  line_stop: 3
                  col_start: 15
                  col_stop: 24
                  path: compiler-test
                  content: "function main(character: char) -> char {"
          output: Char
          block:
            statements:
              - Return:
                  expression:
                    Ternary:
                      condition:
                        Binary:
                          left:
                            Identifier: "{\"name\":\"character\",\"span\":\"{\\\"line_start\\\":4,\\\"line_stop\\\":4,\\\"col_start\\\":12,\\\"col_stop\\\":21,\\\"path\\\":\\\"compiler-test\\\",\\\"content\\\":\\\"    return character != 'a' ? 'a' : 'Z';\\\"}\"}"
                          right:
                            Value:
                              Char:
                                character:
                                  Scalar: 97
                                span:
                                  line_start: 4
                                  line_stop: 4
                                  col_start: 25
                                  col_stop: 28
                                  path: compiler-test
                                  content: "    return character != 'a' ? 'a' : 'Z';"
                          op: Ne
                          span:
                            line_start: 4
                            line_stop: 4
                            col_start: 12
                            col_stop: 28
                            path: compiler-test
                            content: "    return character != 'a' ? 'a' : 'Z';"
                      if_true:
                        Value:
                          Char:
                            character:
                              Scalar: 97
                            span:
                              line_start: 4
                              line_stop: 4
                              col_start: 31
                              col_stop: 34
                              path: compiler-test
                              content: "    return character != 'a' ? 'a' : 'Z';"
                      if_false:
                        Value:
                          Char:
                            character:
                              Scalar: 90
                            span:
                              line_start: 4
                              line_stop: 4
                              col_start: 37
                              col_stop: 40
                              path: compiler-test
                              content: "    return character != 'a' ? 'a' : 'Z';"
                      span:
                        line_start: 4
                        line_stop: 4
                        col_start: 12
                        col_stop: 40
                        path: compiler-test
                        content: "    return character != 'a' ? 'a' : 'Z';"
                  span:
                    line_start: 4
                    line_stop: 4
                    col_start: 5
                    col_stop: 40
                    path: compiler-test
                    content: "    return character != 'a' ? 'a' : 'Z';"
            span:
              line_start: 3
              line_stop: 5
              col_start: 40
              col_stop: 2
              path: compiler-test
              content: "function main(character: char) -> char {\n...\n}"
          span:
            line_start: 3
            line_stop: 5
            col_start: 1
            col_stop: 2
            path: compiler-test
            content: "function main(character: char) -> char {\n...\n}"
