/// Visibility

visibility_public = { "public" }
visibility_private = { "private" }
visibility = { visibility_public | visibility_private }

/// Types

type_u32 = {"u32"}
type_field = {"fe"}
type_bool = {"bool"}
type_basic = { type_u32 | type_field | type_bool }
type_struct = { variable }
type_array = {type_basic ~ ("[" ~ value ~ "]")+ }
_type = { type_array | type_basic | type_struct }

/// Values

value_number = @{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
value_u32 = { value_number ~ type_u32? }
value_field = { value_number ~ type_field }
value_boolean = { "true" | "false" }
value = { value_field | value_boolean | value_u32 }

/// Variables

protected_name = { visibility | "return" }
variable = @{ ((!protected_name ~ ASCII_ALPHA) | (protected_name ~ (ASCII_ALPHANUMERIC | "_"))) ~ (ASCII_ALPHANUMERIC | "_")* }

/// Arrays

inline_array_inner = _{(expression ~ ("," ~ NEWLINE* ~ expression)*)?}
expression_array_inline = { "[" ~ NEWLINE* ~ inline_array_inner ~ NEWLINE* ~ "]"}
expression_array_initializer = { "[" ~ expression ~ ";" ~ value ~ "]" }

/// Structs

inline_struct_member = { variable ~ ":" ~ expression }
inline_struct_member_list = _{(inline_struct_member ~ ("," ~ NEWLINE* ~ inline_struct_member)*)? ~ ","? }
expression_inline_struct = { variable ~ "{" ~ NEWLINE* ~ inline_struct_member_list ~ NEWLINE* ~ "}" }

/// Expressions

expression = {
    expression_inline_struct
    | expression_array_inline
    | expression_array_initializer
    | value
    | variable
}

/// Functions

parameter = { variable ~ ":" ~ visibility? ~ _type }

function_name = @{ ((!protected_name ~ ASCII_ALPHA) | (protected_name ~ (ASCII_ALPHANUMERIC | "_"))) ~ (ASCII_ALPHANUMERIC | "_")* }

/// Section

header = { "[" ~ function_name ~ "]" }
assignment = { parameter ~ "=" ~ expression  }
// assignment = { parameter ~ "="  }

section = { header ~ NEWLINE+ ~ (assignment ~ NEWLINE*)* }

/// Utilities

COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!NEWLINE ~ ANY)*) }
WHITESPACE = _{ " " | "\t" ~ (NEWLINE)* }

/// Program File

file = { SOI ~ NEWLINE* ~ section* ~ NEWLINE* ~ EOI }
