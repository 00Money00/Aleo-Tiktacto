/// Common

// Declared in common/identifier.rs
identifier = @{ ((!protected_name ~ ASCII_ALPHA) | (protected_name ~ (ASCII_ALPHANUMERIC | "_"))) ~ (ASCII_ALPHANUMERIC | "_")* }
protected_name = {
    "address"
    | "as"
    | "const"
    | "else"
    | "false"
    | "function"
    | "for"
    | "if"
    | "import"
    | "in"
    | "let"
    | main
    | "mut"
    | private
    | public
    | record
    | registers
    | "return"
    | state
    | state_leaf
    | "static"
    | "test"
    | "true"
 }

// Declared in common/line_end.rs
LINE_END = { ";" ~ NEWLINE* }
/// Types

// Declared in types/type_.rs
type_ = { type_array | type_data }

// Declared in types/integer_type.rs
type_integer = {
    type_u8
    | type_u16
    | type_u32
    | type_u64
    | type_u128
    | type_i8
    | type_i16
    | type_i32
    | type_i64
    | type_i128
}

// Declared in types/integer_type.rs
type_u8 = { "u8" }
type_u16 = { "u16" }
type_u32 = { "u32" }
type_u64 = { "u64" }
type_u128 = { "u128" }

// Declared in types/integer_type.rs
type_i8 = { "i8" }
type_i16 = { "i16" }
type_i32 = { "i32" }
type_i64 = { "i64" }
type_i128 = { "i128" }

// Declared in types/field_type.rs
type_field = { "field" }

// Declared in types/group_type.rs
type_group = { "group" }

// Declared in types/boolean_type.rs
type_boolean = { "bool" }

// Declared in types/address_type.rs
type_address = { "address" }

// Declared in types/data_type.rs
type_data = { type_field | type_group | type_boolean | type_integer }

// Declared in types/array_type.rs
type_array = { type_data ~ ("[" ~ value_number ~ "]")+ }

/// Values

// Declared in values/value.rs
value = {
    value_address
    | value_boolean
    | value_field
    | value_group
    | value_integer
    | value_implicit // must be last as a catch all
}

// Declared in values/number_value.rs
value_number = @{ (("-" ~ ASCII_NONZERO_DIGIT) | "0" | ASCII_NONZERO_DIGIT) ~ ASCII_DIGIT* }

// Declared in values/number_implicit_value.rs
value_implicit = { value_number }

// Declared in values/integer_value.rs
value_integer = { value_number ~ type_integer }

// Declared in values/boolean_value.rs
value_boolean = { "true" | "false" }

// Declared in values/field_value.rs
value_field = { value_number ~ type_field }

// Declared in values/group_value.rs
value_group = { group_tuple ~ type_group }
group_tuple = { "(" ~ NEWLINE* ~ value_number ~ "," ~ NEWLINE* ~ value_number ~ NEWLINE* ~")" }

// Declared in values/address.rs
address = @{ (LOWERCASE_LETTER | ASCII_DIGIT)* }

// Declared in values/address_value.rs
value_address = { type_address ~ "(" ~ address ~ ")" }

/// Expressions

// Declared in expressions/array_initializer_expression.rs
expression_array_initializer = { "[" ~ expression ~ ";" ~ value_number ~ "]" }

// Declared in expressions/array_inline_expression.rs
expression_array_inline = { "[" ~ NEWLINE* ~ inline_array_inner ~ NEWLINE* ~ "]"}
inline_array_inner = _{ (expression ~ ("," ~ NEWLINE* ~ expression)*)? }

// Declared in expressions/expression.rs
expression = {
    expression_array_inline
    | expression_array_initializer
    | value
    | address // address conflicts with identifier namespaces so we catch implicit address values as expressions here
}

/// Parameters

// Declared in parameters/parameters.rs
parameter = { identifier ~ ":" ~ type_ }

/// Section

// Declared in sections/section.rs
section = { "["  ~ header ~ "]" ~ NEWLINE+ ~ (definition ~ NEWLINE*)* }

// Declared in sections/main_.rs
main = { "main" }

// Declared in sections/record.rs
record = { "record" }

// Declared in sections/registers.rs
registers = { "registers" }

// Declared in sections/state.rs
state = { "state" }

// Declared in sections/state_leaf.rs
state_leaf = { "state_leaf" }

// Declared in sections/header.rs
header = { main | record | registers | state_leaf | state | identifier }

/// Definitions

// Declared in definition/definition.rs
definition = { parameter ~ "=" ~ NEWLINE* ~ expression ~ LINE_END }

/// Table

// Declared in tables/public.rs
public = { "public" }

// Declared in tables/private.rs
private = { "private" }

// Declared in tables/visibility.rs
visibility = { public | private }

// Declared in sections/table.rs
table = {"[[" ~ visibility ~ "]]" ~ NEWLINE+ ~ section*}

/// Utilities

COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!NEWLINE ~ ANY)*) }
WHITESPACE = _{ " " | "\t" ~ (NEWLINE)* }

/// Files

// Declared in files/table_or_section.rs
table_or_section = { table | section }

// Declared in files/file.rs
file = { SOI ~ NEWLINE* ~ table_or_section* ~ NEWLINE* ~ EOI }
